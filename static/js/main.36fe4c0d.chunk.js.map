{"version":3,"sources":["types/QuestionTypes.ts","redux/actions/answersActions.ts","redux/storeListener.ts","types/ResultTypes.ts","redux/actions/resultActions.ts","utils/labels.ts","hooks/useLabel.ts","utils/validator.ts","utils/utils.ts","redux/storeMiddleware.ts","utils/calculator.ts","redux/reducers/answersReducer.ts","redux/reducers/configReducer.ts","redux/reducers/resultReducer.ts","redux/reducers/messagesReducer.ts","redux/store.ts","utils/theme.ts","components/styles/Image.ts","components/styles/Question.ts","components/styles/Container.ts","svg/info-circle-solid.svg","svg/times-circle-solid.svg","svg/caret-up-solid.svg","svg/check-solid.svg","svg/exclamation-triangle-solid.svg","svg/arrow-circle-right-solid.svg","svg/times-solid.svg","components/common/Icon.tsx","components/styles/Input.ts","components/common/Checkbox.tsx","components/styles/Tooltip.ts","components/common/HintableLabel.tsx","components/questions/SingleChoiceQuestion.tsx","components/common/Select.tsx","components/questions/MultipleChoiceQuestion.tsx","components/questions/TextQuestion.tsx","components/common/Slider.tsx","components/common/RadioSlider.tsx","components/questions/RangeQuestion.tsx","components/styles/Loader.ts","components/styles/Button.ts","components/questions/ShowResultsButton.tsx","components/styles/GroupTable.ts","components/groups/TabledSingleChoiceQuestion.tsx","components/groups/TabledMultipleChoiceQuestion.tsx","components/groups/TabledTextQuestion.tsx","components/groups/TabledRangeQuestion.tsx","components/groups/QuestionTable.tsx","components/QuestionGroupList.tsx","hooks/timerHooks.ts","components/styles/Result.ts","components/styles/Dial180.ts","components/common/ScoreCounter180.tsx","components/styles/Dial270.ts","types/MessageTypes.ts","components/common/ScoreCounter270.tsx","components/result/LabelResult.tsx","hooks/useAfterFirstRender.ts","redux/actions/messagesActions.ts","hooks/useGraphData.ts","components/styles/Graph.ts","components/common/Graph.tsx","utils/lineGraph.ts","utils/barGraph.ts","components/result/GraphResult.tsx","components/result/ButtonResult.tsx","components/styles/IFrame.ts","components/result/IFrameResult.tsx","components/result/ImageResult.tsx","components/ResultList.tsx","components/styles/Message.ts","components/MessagesList.tsx","redux/actions/configActions.ts","components/DebugPanel.tsx","components/Footer.tsx","components/App.tsx","serviceWorker.ts","utils/mockConfig.ts","index.tsx"],"names":["questionTypes","prevScoreAnswerList","resultContentTypes","initAnswers","list","lastUpdate","type","setAnswer","answer","setAnswerFocus","questionHash","focussed","showResult","visible","updateRestartTimer","timestamp","defaultLabels","dateLocaleId","footerText","messageErrorTitle","messageDismissAll","messageGraphDataError","questionsErrorTitle","inputSelectPlaceholder","inputTextErrorNumber","inputTextErrorEmail","inputTextErrorText","inputSingleRequiredError","inputMultipleRequiredError","resultSeeButton","getLabel","labels","query","values","replaceValues","useLabels","useStoreSelector","state","config","map","labelKey","useLabel","REGEX_EMAIL_FORMAT","REGEX_NUMBER_ONLY","isAnswerValueFilledIn","multiple","length","range","single","value","text","isAnswerValid","question","hash","questionIdHash","includes","Error","required","customValidation","regex","match","inputType","isTextAnswerValid","textAnswerErrorLabelMap","number","email","getValidAnswerData","store","dispatch","getState","getQuestionAnswerSelector","errorLabel","getErrorLabel","error","showError","setFocussed","isDev","allowOnDemo","generateAnswerStorageKey","configId","generateThemeStorageKey","getQuestionIdHash","id","getQuestionScrollId","populateQuestionHash","newQuestion","generateInitialAnswer","baseAnswer","checkedByDefault","defaultIds","default","flattenQuestionGroups","groups","reduce","group","questions","label","replaceAll","Object","entries","newLabel","key","RegExp","replace","Number","isNaN","fetchAnswerData","methodUrl","data","a","splitUrl","split","url","score","method","fetch","headers","body","JSON","stringify","undefined","request","json","console","resetFormDispatcher","window","scrollTo","top","onTextAnswerChange","format","hasTextAnswerForbiddenCharacter","onSingleAnswerClick","getRangeQuestionDefaultProps","min","max","step","disabled","direction","tickCount","tickValues","tickLabels","onChange","onMultipleAnswerClick","selectedIds","newSelectedId","newValues","filter","getInitializedSelector","initialized","answers","disableControlsSelector","result","enableControls","getAllQuestionsSelector","find","middlewares","applyMiddleware","next","action","localAnswersString","localStorage","getItem","loadedAnswers","parse","mergedAnswers","loadedAnswer","initialAnswers","hideResultsAfterUpdate","restartTimestamp","customMessageHandler","settings","messages","exception","calculateScore","total","index","calcFunction","parseInt","textAnswer","mcAnswer","mcQuestion","options","findIndex","option","calculateDefaultAnswerScore","debouncedFetchAnswerData","debounce","prevScoreValue","listeners","restartTimeout","Date","now","newScore","redirectUrl","location","href","postDataUrl","prevPersistAnswerList","setItem","initialAnswersState","loadedFromStorage","initialConfigState","theme","scoreDomain","content","style","initialResultState","initialMessagesState","rootReducer","combineReducers","newAnswersList","newAnswer","locallyStoredTheme","darkMode","enabled","lastId","input","message","messageId","initialStoreState","useSelector","useStoreDispatch","useDispatch","useTypedStore","useStore","createNewStore","enhancers","composeWithDevTools","createStore","forEach","listener","subscribe","palettes","lightTheme","colors","primary","back","surface","onPrimary","onBack","onSurface","onError","controlBack","controlBackHover","controlBackDisabled","controlOnBackDisabled","controlHighlight","controlHighlightActive","controlBorder","controlBorderHover","controlBorderActive","controlPlaceholder","controlTick","controlSliderBack","controlSliderDisabled","controlSliderOnDisabled","controlButton","controlOnButton","controlButtonDisabled","controlOnButtonDisabled","messageInfo","messageInfoBorder","onMessageInfo","messageError","messageErrorBorder","onMessageError","messageNeutral","messageNeutralBorder","onMessageNeutral","shadow","spinner","icon","iconHover","separator","scoreCounterFront","scoreCounterBack","sizes","radius","title","subtitle","footer","controlWidthSingle","controlWidthMulti","controlCheckOffset","controlRadioOffset","controlError","controlSliderRailHeight","controlSliderTrackHeight","controlSliderHandleSize","buttonTextSize","scoreCounterSize","scoreCounterThickness","zIndex","checkmark","tooltip","selectValue","sliderTrack","sliderHandle","debug","elevation","button","dropdown","fonts","description","breakpoints","xs","sm","md","lg","xl","space","defaultThemes","darkTheme","elevations","getElevation","level","imageAlignmentStyles","css","imagePosition","Image","ImageWrapper","styled","div","img","widthPercentage","Question","article","defaultProps","marginY","paddingY","paddingX","Title","h2","ErrorPanel","ErrorList","ul","Container","maxBreakpoint","marginX","Line","hr","Header","h1","Description","Group","showSeparator","accentColor","questionBackgroundColor","Footer","textAlign","_extends","assign","target","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_","createElement","fill","d","_ref","svgRef","props","focusable","className","role","viewBox","ref","ForwardRef","forwardRef","orientations","icons","info","IconInfo","closeCircle","IconCloseCircle","upCaret","IconUpCaret","check","IconCheck","IconError","IconNext","close","IconClose","IconWrapper","span","color","orientation","size","Icon","Component","baseColors","baseMargin","basePadding","Checkbox","checked","RadioButton","RadioListWrapper","SelectWrapper","SelectValue","opened","SelectDropdown","show","SelectOption","li","Label","BottomLabel","TextFieldWrapper","TextField","rows","isError","FieldError","sliderTransition","sliderDisabled","sliderOnDisabled","SliderWrapper","width","SliderRail","SliderTrack","percent","SliderHandle","SliderTick","SliderTickLabel","children","onClick","TooltipContent","Tooltip","TOOLTIP_BOUNDS_SIZE","Hint","useState","setOpened","event","stopPropagation","prev","HintableLabel","hints","parts","warn","output","part","hint","SingleChoiceQuestion","disableControl","image","alignment","src","alt","Select","selectedOptionId","onSelectOption","placeholder","count","toggleOpen","selectedOption","useEffect","up","down","MultipleChoiceQuestion","TextQuestion","onBlur","as","rowCount","Slider","fullWidth","useTheme","mode","domain","reversed","getRailProps","handles","getHandleProps","handle","left","right","tracks","getTrackProps","ticks","tick","tickIndex","RadioSlider","radioTickValues","Array","reverse","itemValue","RangeQuestion","sliderProps","animation","keyframes","Loader","Button","attrs","iconAlign","CenteredButtonWrapper","ShowResultsButton","allQuestions","allAnswers","buttonLabel","errorTitleLabel","invalidDataList","invalidList","push","idHash","isValid","mt","item","document","querySelector","scrollIntoView","behavior","scrollToQuestionId","Table","TitleCell","surfacedCellStyles","HeadingCell","InputCell","includeMargin","isRadioButtonSlider","TabledSingleChoiceQuestion","TabledMultipleChoiceQuestion","TabledTextQuestion","TabledRangeQuestion","determineTabledComponent","QuestionTable","tableInputHeadings","heading","determineComponent","QuestionGroupList","py","backgroundColor","dangerouslySetInnerHTML","__html","tabledView","calcCountdown","Math","round","useRestartTimer","countdown","setCountdown","timerInterval","useRef","current","clearInterval","setInterval","newCountdown","Result","Wrapper","Dial","angle","enableAnimation","resultAnimationTotalFrames","Counter","ScoreCounter180","dialPercentage","animate","limitedAngle","messageTypes","GenericDial","MaskDial","ScoreCounter270","items","rescaleToDomain","sourceDomain","targetDomain","LabelResult","afterFirstRender","setValue","useAfterFirstRender","frame","displayedScore","setDisplayedScore","labelParts","join","addMessages","useGraphData","postUrl","setData","loading","setLoading","postData","useCallback","Card","StatusWrapper","GRAPH_LOADER_SIZE","flexbox","flexDirection","Legend","justifyContent","LegendItem","LegendSwatch","Graph","graphElement","margin","bottom","inputData","element","height","tickSpread","sortedValues","sort","b","x","series","filteredValues","point","y","svg","select","selectAll","remove","extent","xMin","xMax","xScale","scaleLinear","append","attr","axisBottom","tickSizeOuter","clone","xLabel","yMin","yMax","yScale","nice","axisLeft","yLabel","line","lineFunc","highlightSeries","highlight","drawLineGraph","graphWidth","graphHeight","categories","scaleBand","padding","yValues","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","highlights","numberOfSeries","category","highlightGroup","highlightPadding","bandwidth","barWidth","barColor","xValue","selectedCategory","drawBarGraph","overflow","GraphResult","titleLabel","dataUrl","hideLegend","name","ButtonResult","loaded","setLoaded","function","openInTab","open","mb","IFrame","iframe","IFrameResult","scoreUrl","debouncedUrl","setDebouncedUrl","debouncedSetter","useMemo","scrolling","disableScroll","ImageResult","block","graph","ResultList","containerRef","restartTime","useInitResetTimer","pb","visibleScoreDomain","neutral","borderColor","textColor","Message","DismissLabel","CloseButton","MessagesList","dismissLabel","TransitionGroup","Transition","timeout","in","initConfig","mockMessages","GlobalDebugStyle","createGlobalStyle","DebugPanel","localeId","lastAnsweredTimestamp","showAnsweredTimetamp","footerLabel","date","Intl","DateTimeFormat","weekday","day","month","year","hour","minute","second","BaseStyle","App","overriddenTheme","merge","Boolean","hostname","mockConfig","MemoWrapper","React","memo","SurveyTool","selector","_store","updateConfig","ReactDOM","render","StrictMode","tool","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"uMAGYA,E,wKAAAA,K,gBAAAA,E,oBAAAA,E,YAAAA,E,eAAAA,M,KCCL,IC4BHC,EC9BQC,EFECC,EAAc,SAACC,EAAwBC,GAAzB,MAAkD,CACzEC,KAAM,eACNF,OACAC,eAOSE,EAAY,SAACC,GAAD,MAA2D,CAChFF,KAAM,cACNE,WAGSC,EAAiB,SAACC,EAAsBC,GAAvB,MAA8C,CACxEL,KAAM,oBACNI,eACAC,aGhBSC,EAAa,eAACC,IAAD,+DAAqB,CAC3CP,KAAM,cACNO,YAGSC,EAAqB,SAACC,GAAD,MAA+B,CAC7DT,KAAM,8BACNS,cCyBSC,EAAa,eAtCG,CAEzBC,aAAc,UAEdC,WAAY,yBAkCU,GA/BG,CAEzBC,kBAAmB,QAEnBC,kBAAmB,cAEnBC,sBAAuB,kCAyBD,GAtBI,CAE1BC,oBAAqB,qEAErBC,uBAAwB,0BAExBC,qBAAsB,gCAEtBC,oBAAqB,qDAErBC,mBAAoB,eAEpBC,yBAA0B,yBAE1BC,2BAA4B,2BAQN,GALE,CAExBC,gBAAiB,gBC/BRC,EAAW,SAACC,EAAoBC,EAAqBC,GAC9D,OAAOC,EAAcH,EAAOC,IAAUhB,EAAcgB,IAAU,KAAMC,IAiB3DE,EAAY,SAACH,EAAuBC,GAC7C,IAAMF,EAASK,IAAiB,SAACC,GAAD,OAAWA,EAAMC,OAAOP,UACxD,OAAOC,EAAMO,KAAI,SAACC,GAAD,OAAcV,EAASC,EAAQS,EAAUP,OAG/CQ,EAbS,SAACT,EAAqBC,GAC1C,IAAMF,EAASK,IAAiB,SAACC,GAAD,OAAWA,EAAMC,OAAOP,UACxD,OAAOD,EAASC,EAAQC,EAAOC,ICP7BS,EAAqB,yJACrBC,EAAoB,WAoBpBC,EAAwB,SAACpC,GAC3B,OAAQA,EAAOF,MACX,KAAKN,EAAc6C,SACf,OAAOrC,EAAOyB,OAAOa,OAAS,EAElC,KAAK9C,EAAc+C,MACf,OAAO,EAEX,KAAK/C,EAAcgD,OACf,OAAOxC,EAAOyC,MAElB,KAAKjD,EAAckD,KACf,QAAS1C,EAAOyC,QAwBfE,EAAgB,SAACC,EAA4B5C,GAEtD,IAAK4C,EAASC,OAAS7C,EAAO8C,eAAeC,SAASH,EAASC,OAASD,EAAS9C,OAASE,EAAOF,KAC7F,MAAM,IAAIkD,MAAJ,qFAC4EJ,EAASC,KADrF,sCACuH7C,EAAO8C,iBAKxI,OAAIF,EAAS9C,OAASN,EAAckD,MAAQ1C,EAAOF,OAASN,EAAckD,KA5BpD,SAACE,EAA4B5C,GAAqC,IAAD,EAEvF,GAAI4C,EAASK,WAAab,EAAsBpC,GAAS,OAAO,EAGhE,aAAI4C,EAASM,wBAAb,aAAI,EAA2BC,MAC3B,QAASnD,EAAOyC,MAAMW,MAAMR,EAASM,iBAAiBC,OAG1D,OAAQP,EAASS,WACb,IAAK,SACD,QAASrD,EAAOyC,MAAMW,MAAMjB,GAChC,IAAK,QACD,QAASnC,EAAOyC,MAAMW,MAAMlB,GAChC,IAAK,OACD,OAAO,GAcJoB,CAAkBV,EAAU5C,KAInC4C,EAASK,WAAab,EAAsBpC,KAU9CuD,EAA+E,CACjFC,OAAQ,uBACRC,MAAO,sBACPf,KAAM,sBA0BGgB,EAAqB,SAA6Bd,EAAae,GAAgC,IAAD,EAE/FC,EAAuBD,EAAvBC,SACF/B,GAAQgC,EADiBF,EAAbE,YAEZ7D,EAAS8D,GAA0BlB,EAA1BkB,CAAoCjC,GAG7CN,EAASM,EAAMC,OAAOP,OACtBwC,EAAazC,EAASC,EA/BV,SAACqB,GACnB,OAAQA,EAAS9C,MACb,KAAKN,EAAcgD,OACf,MAAO,2BACX,KAAKhD,EAAc6C,SACf,MAAO,6BACX,KAAK7C,EAAckD,KACf,OAAOa,EAAwBX,EAASS,WAC5C,KAAK7D,EAAc+C,MACf,MAAO,IAsBqByB,CAAcpB,IAKlD,MAAO,CACHqB,OAJkB,UAAIrB,EAA8BM,wBAAlC,aAAG,EAAiDe,QAI3CF,GAAc,QACzCG,WAJUvB,EAAcC,EAAU5C,IAIbA,EAAOG,SAC5BgE,YAAa,WACTP,EAAS3D,EAAeD,EAAO8C,gBAAgB,OCtG9CsB,EAAQ,SAACC,GAAD,QAC2BA,IAAe,GAElDC,EAA2B,SAACC,GAAD,mCAAoDA,IAE/EC,EAA0B,SAACD,GAAD,iCAAkDA,IAkB5EE,EAAoB,SAAC7B,GAAD,gBAA2CA,EAASC,KAApD,YAA4DD,EAAS8B,KAKzFC,EAAsB,SAAC/B,GAAD,yBAAoD6B,EAAkB7B,KAK5FgC,EAAuB,SAA6BhC,GAC7D,IAAMiC,EAAW,eAAQjC,GAEzB,cADOiC,EAAYhC,KACZ,eAAKgC,EAAZ,CAAyBhC,KAAMA,IAAKgC,MAM3BC,EAAwB,SAAClC,GAClC,IAAMmC,EAAa,CAAEjC,eAAgB2B,EAAkB7B,GAAWzC,UAAU,GAC5E,OAAQyC,EAAS9C,MACb,KAAKN,EAAcgD,OACf,OAAO,eAAKuC,EAAZ,CAAwBjF,KAAMN,EAAcgD,OAAQC,MAAOG,EAASoC,mBAAoB,IAE5F,KAAKxF,EAAc6C,SACf,OAAO,eAAK0C,EAAZ,CAAwBjF,KAAMN,EAAc6C,SAAUZ,OAAQmB,EAASqC,YAAc,KAEzF,KAAKzF,EAAckD,KACf,OAAO,eAAKqC,EAAZ,CAAwBjF,KAAMN,EAAckD,KAAMD,MAAO,KAE7D,KAAKjD,EAAc+C,MACf,OAAO,eAAKwC,EAAZ,CAAwBjF,KAAMN,EAAc+C,MAAOE,MAAOG,EAASsC,SAAW,MAK7EC,EAAwB,SAACC,GAAD,OACjCA,EAAOC,QAA2B,SAACzF,EAAM0F,GAAP,4BAAqB1F,GAArB,YAA8B0F,EAAMC,cAAY,KAOzE7D,EAAgB,SAAC8D,EAAuB/D,GAA2D,IAAtCgE,IAAqC,yDAC3G,OAAKD,EACA/D,EAGEiE,OAAOC,QAAQlE,GAAQ4D,QAAO,SAACO,EAAD,GAA6B,IAAD,mBAAhBC,EAAgB,KAAXpD,EAAW,KAC7D,GAAc,OAAVA,EAAgB,OAAOmD,EAC3B,IAAMzC,EAAQ,IAAI2C,OAAJ,WAAeD,EAAf,KAAuBJ,EAAa,IAAM,IACxD,OAAOG,EAASG,QAAQ5C,EAAwB,kBAAVV,GAAsBuD,OAAOC,MAAMxD,GAAS,IAAnD,UAA4DA,MAC5F+C,GAPiBA,EADD,MAgBVU,EAAe,uCAAG,WAC3BC,EACAC,GAF2B,qBAAAC,EAAA,6DAIrBC,EAAWH,EAAUI,MAAM,KAC3BC,EAAM9E,EAAc4E,EAASA,EAAShE,OAAS,GAAI,CAAEmE,MAAOL,EAAKK,QACjEC,EAASJ,EAAShE,OAAS,EAAIgE,EAAS,GAAK,MANxB,kBASDK,MAAMH,EAAK,CAC7BE,SACAE,QAAS,CACL,eAAgB,oBAEpBC,KAAiB,SAAXH,EAAoBI,KAAKC,UAAUX,QAAQY,IAd9B,cASjBC,EATiB,gBAgBTA,EAAQC,OAhBC,iFAkBvBC,QAAQlD,MAAM,8BAAd,MAlBuB,kBAmBhB,MAnBgB,0DAAH,wDA2BfmD,EAAsB,SAACxD,GAChCyD,OAAOC,SAAS,CAAEC,IAAK,IACvB3D,EAASxD,GAAW,IACpBwD,EP3I+B,CAC/B9D,KAAM,kBO2IN8D,EAAStD,EAAmB,QAOnBkH,EAAqB,SAC9B5E,EACAgB,EACAnB,IAGKG,EAASM,kBDpJ6B,SAACuE,EAAuChF,GACnF,OAAQgF,GACJ,IAAK,SACD,OAAQhF,EAAMW,MAAMjB,GACxB,IAAK,QACD,OAAOM,EAAMM,SAAS,KAC1B,IAAK,OACD,OAAO,GC6ImB2E,CAAgC9E,EAASS,UAAWZ,IACtFmB,EACI7D,EAAU,CACN+C,eAAgB2B,EAAkB7B,GAClC9C,KAAM8C,EAAS9C,KACf2C,MAAOA,MAKNkF,EAAsB,SAC/B/E,EACAgB,EACAnB,GAEAmB,EAAS3D,EAAewE,EAAkB7B,IAAW,IACrDgB,EACI7D,EAAU,CACN+C,eAAgB2B,EAAkB7B,GAClC9C,KAAM8C,EAAS9C,KACf2C,YAKCmF,GAA+B,SACxChF,EACAgB,EACAnB,GAHwC,MAI0C,CAClFoF,IAAKjF,EAASiF,KAAO,EACrBC,IAAKlF,EAASkF,KAAO,EACrBrF,MAAOA,GAAS,EAChBsF,KAAMnF,EAASmF,MAAQ,EACvBC,UAAU,EACVC,UAAWrF,EAASqF,WAAa,WACjCC,UAAWtF,EAASsF,UACpBC,WAAYvF,EAASuF,WACrBC,WAAYxF,EAASwF,WACrBC,SAAU,SAAC5F,GACPmB,EACI7D,EAAU,CACN+C,eAAgB2B,EAAkB7B,GAClC9C,KAAM8C,EAAS9C,KACf2C,cAMH6F,GAAwB,SACjC1F,EACAgB,EACA2E,EACAC,GAEA,IAAIC,EAAsB,GACC,UAAvB7F,EAASS,YACToF,EAAYF,EAAYxF,SAASyF,GAAkB,GAAkB,CAACA,IAG/C,UAAvB5F,EAASS,YACToF,EAAYF,EAAYxF,SAASyF,GAC3BD,EAAYG,QAAO,SAAChE,GAAD,OAAQA,IAAO8D,KAD5B,sBAEFD,GAFE,CAEWC,KAGA,WAAvB5F,EAASS,YACToF,EAAY,CAACD,IAGjB5E,EAAS3D,EAAewE,EAAkB7B,IAAW,IACrDgB,EACI7D,EAAU,CACN+C,eAAgB2B,EAAkB7B,GAClC9C,KAAM8C,EAAS9C,KACf2B,OAAQgH,MAYPE,GAAyB,SAAC9G,GAAD,OAClCA,EAAMC,OAAO8G,aAAe/G,EAAMgH,QAAQD,aAKjCE,GAA0B,SAACjH,GAAD,OAClCA,EAAMC,OAAOiH,OAAOC,gBAAkBnH,EAAMkH,OAAO3I,YAK3C6I,GAA0B,SAACpH,GAAD,OACnCsD,EAAsBtD,EAAMC,OAAOsD,SAK1BtB,GAA4B,SAA2BlB,GAA3B,OAA0D,SAC/Ff,GAD+F,OAE1FA,EAAMgH,QAAQjJ,KAAKsJ,MAAK,SAAClJ,GAAD,OAAYA,EAAO8C,eAAeC,SAASH,EAASC,UAAkB,KC3L1FsG,GAAcC,2BAvEY,SAACzF,GAAD,OAAyB,SAAC0F,GAAD,OAAiC,SAC7FC,GAEA,OAAQA,EAAOxJ,MACX,IAAK,cAGD,IAAMyJ,EAAqBC,aAAaC,QAAQnF,EAAyBgF,EAAOxH,OAAO4C,KACjFgF,EACFH,GAAsBA,EAAmBjH,OAASwE,KAAK6C,MAAMJ,GAAoB3J,KAAO,GAQtFgK,EALiBzE,EAAsBmE,EAAOxH,OAAOsD,QACtDrD,IAAI6C,GACJ7C,IAAI+C,GAG4B/C,KAAI,SAAC/B,GAKtC,OAJ0B0J,EAAcR,MACpC,SAACW,GAAD,OACIA,EAAa/G,iBAAmB9C,EAAO8C,gBAAkB+G,EAAa/J,OAASE,EAAOF,SAElEE,KAGhC2D,EAAMC,SAASjE,EAAYiK,IAC3B,MAGJ,IAAK,gBAED,IACME,EADYb,GAAwBtF,EAAME,YACf9B,IAAI+C,GAErC,YADAnB,EAAMC,SAASjE,EAAYmK,IAI/B,IAAK,cAAe,MAEmCnG,EAAME,WAAW/B,OAAOiH,OAAnEC,EAFQ,EAERA,eAAgBe,EAFR,EAEQA,uBACpBf,GAAkBe,GAClBpG,EAAMC,SAASxD,GAAW,IAE9B,MAGJ,IAAK,eAEIkJ,EAAOjJ,SAAWsD,EAAME,WAAWkF,OAAOiB,kBAC3CrG,EAAMC,SAAStD,EAAmB,OAEtC,MAGJ,IAAK,eAAiB,IACV2J,EAAyBtG,EAAME,WAAW/B,OAAOoI,SAAjDD,qBACR,GAAIA,EACA,IAGI,IAF6BA,EAAqBX,EAAOa,UAEhC,OAC3B,MAAOC,GACLjD,QAAQlD,MAAR,gCAA+CmG,IAM/D,OAAOf,EAAKC,QC9CHe,GAAiB,SAAC9E,EAA+BsD,GAC1D,OAAOtD,EAAUF,QAAO,SAACiF,EAAe1H,EAA4B2H,GAChE,IAAMvK,EAAS6I,EAAQ0B,GAEvB,GAAI3H,EAAS4H,aACT,IACI,IAAM/D,EAAQgE,SAAU7H,EAAS4H,aAAa5H,EAAU5C,IACxD,GAAIgG,OAAOC,MAAMQ,GAAQ,MAAM,IAAIzD,MAAM,yCAEzC,OAAOsH,EAAQ7D,EACjB,MAAO2D,GACLjD,QAAQlD,MAAR,gDAAuDQ,EAAkB7B,IAAawH,GAI9F,OAAOE,EAxCqB,SAAC1H,EAA4B5C,GAC7D,OAAQ4C,EAAS9C,MACb,KAAKN,EAAckD,KACf,IAAMgI,EAAa1K,EAGnB,MAA+B,WAFV4C,EAEJS,WAA+BoH,SAASC,EAAWjI,QAC7D,EAEX,KAAKjD,EAAcgD,OACf,OAAQxC,EAAkCyC,MAAQ,EAAI,EAE1D,KAAKjD,EAAc6C,SACf,IAAMsI,EAAW3K,EACX4K,EAAahI,EAEnB,MAA6B,UAAzBgI,EAAWvH,UAA8BsH,EAASlJ,OAAOa,OACjDsI,EAAWC,QAAQC,WAAU,SAACC,GAAD,OAAYA,EAAOrG,KAAOiG,EAASlJ,OAAO,MAAM,EAE7F,KAAKjC,EAAc+C,MACf,OAAQvC,EAA2ByC,OAoBxBuI,CAA4BpI,EAAU5C,KACtD,IRxBDiL,GAA2BC,oBAC7B,SAAC1E,EAAoBJ,GAArB,OAA8CF,EAAgBM,EAAKJ,KACnE,KAIA+E,GAAiB,EAgERC,GAAY,CAzDM,SAACzH,GAC5B,IAAM9B,EAAQ8B,EAAME,WAGpB,GAAI8E,GAAuB9G,IAAUA,EAAMkH,OAAO3I,YAAcyB,EAAMgH,QAAQjJ,OAASH,EAAqB,CACxGA,EAAsBoC,EAAMgH,QAAQjJ,KAGhCiC,EAAMC,OAAOiH,OAAOsC,gBACpB1H,EAAMC,SAAStD,EAAmBgL,KAAKC,MAA6C,IAArC1J,EAAMC,OAAOiH,OAAOsC,iBAIvE,IAAMG,EAAWnB,GAAepB,GAAwBpH,GAAQA,EAAMgH,QAAQjJ,MAC9E,GAAI4L,IAAaL,GAAgB,CAK7B,GAJAA,GAAiBK,EAIb3J,EAAMC,OAAOiH,OAAO0C,YAEpB,YADApE,OAAOqE,SAASC,KAAOjK,EAAcG,EAAMC,OAAOiH,OAAO0C,YAAa,CAAEhF,MAAO+E,KAM/E3J,EAAMC,OAAOiH,OAAO6C,aACpBX,GAAyBpJ,EAAMC,OAAOiH,OAAO6C,YAAa,CACtDrH,SAAU1C,EAAMC,OAAO4C,GACvB+B,MAAO+E,EACP3C,QAAShH,EAAMgH,QAAQjJ,OAI/B+D,EAAMC,SEzE2B,CACzC9D,KAAM,aACN2G,MFuEiC+E,OAWP,SAAC7H,GAC3B,IAAM9B,EAAQ8B,EAAME,gBAHpBgI,IAK8BhK,EAAMgH,QAAQjJ,MAAQiC,EAAMC,OAAO8G,aAAe/G,EAAMgH,QAAQD,aAC1FY,aAAasC,QAAQxH,EAAyBzC,EAAMC,OAAO4C,IAAKoC,KAAKC,UAAUlF,EAAMgH,YSlFhFkD,GAAsB,CAC/BnD,aAAa,EACbhJ,KAAM,GACNC,WAAY,EACZmM,mBAAmB,I,SRTXtM,K,cAAAA,E,gBAAAA,E,cAAAA,E,cAAAA,E,iBAAAA,M,KSOL,IAAMuM,GAA4D,CACrErD,aAAa,EACblE,GAAI,GACJnD,OAAQ,GACR2K,MAAO,GACP9G,OAAQ,GACR2D,OAAQ,CACJoD,YAAa,CAAC,EAAG,KACjBnD,gBAAgB,EAChBoD,QAAS,CAAC,CAAEtM,KAAMJ,EAAmB8F,MAAO6G,MAAO,QAAS7G,MAAO,iCAEvE0E,SAAU,ICbDoC,GAAqB,CAC9BlM,aAAYgE,KAAU0C,KAAK6C,MAAMH,aAAaC,QLiCN,0BKjCiD,SACzFhD,MAAO,EACPuD,iBAAkB,MCHTuC,GAAuB,CAChC3M,KAAM,ICOJ4M,GAAcC,0BAAgB,CAChC5D,QJG0B,WAAsF,IAArFhH,EAAoF,uDAA9DkK,GAAqBzC,EAAyC,uCAC/G,OAAQA,EAAOxJ,MACX,IAAK,eACD,OAAO,eACA+B,EADP,CAEI+G,aAAa,EACbhJ,KAAM0J,EAAO1J,KACbC,WAAYyJ,EAAOzJ,YAAc,EACjCmM,oBAAmB1C,EAAOzJ,aAOlC,IAAK,cAAgB,IACTG,EAAWsJ,EAAXtJ,OACF0M,EAAc,YAAO7K,EAAMjC,MAC3B2K,EAAQmC,EAAe5B,WAAU,SAACzE,GAAD,OAAOA,EAAEvD,eAAeC,SAAS/C,EAAO8C,mBACzE6J,EAAS,eAAQ3M,EAAR,CAAgBG,UAAU,IAEzC,OADAuM,EAAenC,GAAS,EAAIA,EAAQmC,EAAepK,QAAUqK,EACtD,eAAK9K,EAAZ,CAAmBjC,KAAM8M,EAAgB7M,WAAYyL,KAAKC,QAG9D,IAAK,oBAAsB,IACfrL,EAA2BoJ,EAA3BpJ,aAAcC,EAAamJ,EAAbnJ,SAChBuM,EAAc,YAAO7K,EAAMjC,MAC3B2K,EAAQmC,EAAe5B,WAAU,SAACzE,GAAD,OAAOA,EAAEvD,eAAeC,SAAS7C,MAExE,OADAwM,EAAenC,GAAf,eAA6BmC,EAAenC,GAA5C,CAAoDpK,aAC7C,eAAK0B,EAAZ,CAAmBjC,KAAM8M,IAE7B,QACI,OAAO7K,IIlCfC,OHWyB,WAAkF,IAAjFD,EAAgF,uDAA3DoK,GAAoB3C,EAAuC,uCAC1G,OAAQA,EAAOxJ,MACX,IAAK,cAED,IAAM8M,EAAqB9F,KAAK6C,MAC5BH,aAAaC,QAAQjF,EAAwB8E,EAAOxH,OAAO4C,MAAQ,MAEvE,OAAO,eACAuH,GADP,GAEO3C,EAAOxH,OAFd,CAGI8G,aAAa,EACbxD,OAAQkE,EAAOxH,OAAOsD,OAAOrD,KAAI,SAACuD,GAAD,sBAC1BA,EAD0B,CAE7BC,UAAWD,EAAMC,UAAUxD,IAAI6C,QAEnCsH,MAAM,eACCD,GAAmBC,MADrB,GAEE5C,EAAOxH,OAAOoK,MAFhB,GAGEU,GAEP7D,OAAO,eACAkD,GAAmBlD,OADpB,GAECO,EAAOxH,OAAOiH,QAErBmB,SAAS,eACF+B,GAAmB/B,SADlB,GAEDZ,EAAOxH,OAAOoI,YAI7B,IAAK,sBAGD,OADAV,aAAasC,QAAQtH,EAAwB3C,EAAM6C,IAAM,IAAKoC,KAAKC,UAAU,CAAE8F,SAAUvD,EAAOwD,WACzF,eAAKjL,EAAZ,CAAmBqK,MAAM,eAAMrK,EAAMqK,MAAb,CAAoBW,SAAUvD,EAAOwD,YAEjE,QACI,OAAOjL,IG9CfkH,OFAyB,WAAkF,IAAjFlH,EAAgF,uDAA3DyK,GAAoBhD,EAAuC,uCAC1G,OAAQA,EAAOxJ,MACX,IAAK,aACD,OAAO,eACA+B,EADP,CAEI4E,MAAO6C,EAAO7C,QAGtB,IAAK,cAGD,OADIrC,KAASoF,aAAasC,QLaM,wBKbkChF,KAAKC,UAAUuC,EAAOjJ,UACjF,eACAwB,EADP,CAEIzB,WAAYkJ,EAAOjJ,UAG3B,IAAK,8BACD,OAAO,eACAwB,EADP,CAEImI,iBAAkBV,EAAO/I,YAGjC,QACI,OAAOsB,IEtBfsI,SDH2B,WAGV,IAFjBtI,EAEgB,uDAFO0K,GACvBjD,EACgB,uCAChB,OAAQA,EAAOxJ,MACX,IAAK,eAAiB,IAAD,EACXiN,GAAS,UAAAlL,EAAMjC,KAAKiC,EAAMjC,KAAK0C,OAAS,UAA/B,eAAmCoC,KAAM,EACxD,OAAO,eACA7C,EADP,CAEIjC,KAAK,GAAD,mBAAMiC,EAAMjC,MAAZ,YAAqB0J,EAAOa,SAASpI,KAAI,SAACiL,EAAOzC,GAAR,sBAAwByC,EAAxB,CAA+BtI,GAAIqI,EAASxC,EAAQ,WAGzG,IAAK,kBACD,OAAO,eACA1I,EADP,CAEIjC,KAAK,YAAKiC,EAAMjC,KAAK8I,QAAO,SAACuE,GAAD,OAAaA,EAAQvI,KAAO4E,EAAO4D,gBAGvE,IAAK,iBACD,OAAO,eACArL,EADP,CAEIjC,KAAM,KAGd,QACI,OAAOiC,MCnBNsL,GAAoB,CAC7BtE,QAASkD,GACTjK,OAAQmK,GACRlD,OAAQuD,GACRnC,SAAUoC,IAQD3K,GAAoDwL,IACpDC,GAAgDC,IAChDC,GAAiCC,IAS/BC,GAPQ,WACnB,IAAMC,EAAYC,8BAAoBxE,IAChCxF,EAAQiK,sBAAYpB,GAAaW,GAAmBO,GAE1D,OADAtC,GAAUyC,SAAQ,SAACC,GAAD,OAAcnK,EAAMoK,WAAU,kBAAMD,EAASnK,SACxDA,GCvCEqK,GAEA,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAFpGA,GAGE,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAHtGA,GAKK,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WALzGA,GAMI,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAuH/GC,GAA2B,CAC7BC,OArHW,CAEXC,QAASH,GAAiB,GAC1BI,KAAMJ,GAAsB,GAC5BK,QAASL,GAAsB,GAC/B/J,MAAO+J,GAAmB,GAE1BM,UAAWN,GAAsB,GACjCO,OAAQP,GAAsB,GAC9BQ,UAAWR,GAAsB,GACjCS,QAAST,GAAsB,GAE/BU,YAAaV,GAAsB,GACnCW,iBAAkBX,GAAsB,GACxCY,oBAAqBZ,GAAsB,GAC3Ca,sBAAuBb,GAAsB,GAC7Cc,iBAAkBd,GAAiB,GACnCe,uBAAwBf,GAAiB,GACzCgB,cAAehB,GAAsB,GACrCiB,mBAAoBjB,GAAsB,GAC1CkB,oBAAqBlB,GAAsB,GAC3CmB,mBAAoBnB,GAAsB,GAC1CoB,YAAapB,GAAsB,GACnCqB,kBAAmBrB,GAAsB,GACzCsB,sBAAuBtB,GAAsB,GAC7CuB,wBAAyBvB,GAAsB,GAC/CwB,cAAexB,GAAiB,GAChCyB,gBAAiBzB,GAAsB,GACvC0B,sBAAuB1B,GAAsB,GAC7C2B,wBAAyB3B,GAAsB,GAE/C4B,YAAa,UACbC,kBAAmB,UACnBC,cAAe,UACfC,aAAc,UACdC,mBAAoB,UACpBC,eAAgB,UAChBC,eAAgBlC,GAAsB,GACtCmC,qBAAsBnC,GAAsB,GAC5CoC,iBAAkBpC,GAAsB,GAExCqC,OAAQrC,GAAsB,GAC9BsC,QAAStC,GAAiB,GAC1BuC,KAAMvC,GAAsB,GAC5BwC,UAAWxC,GAAsB,GACjCyC,UAAWzC,GAAsB,GAEjC0C,kBAAmB1C,GAAiB,GACpC2C,iBAAkB3C,GAAsB,IAsExC4C,MAnEU,CAEVC,OAAQ,MACRC,MAAO,OACPC,SAAU,OACVC,OAAQ,OAERC,mBAAoB,QACpBC,kBAAmB,QACnBlC,cAAe,MACfmC,mBAAoB,MACpBC,mBAAoB,MACpBC,aAAc,OACdC,wBAAyB,MACzBC,yBAA0B,OAC1BC,wBAAyB,OACzBC,eAAgB,OAEhBC,iBAAkB,QAClBC,sBAAuB,QAiDvBC,OA9CW,CACXC,UAAW,EACXC,QAAS,EACTC,YAAa,EACbC,YAAa,EACbC,aAAc,EACd9H,SAAU,EACV+H,MAAO,GAwCPC,UArCc,CACdvP,SAAU,EACVwP,OAAQ,EACRC,SAAU,EACVP,QAAS,EACT7E,QAAS,GAiCTqF,MAAO,CAEHxB,MAAO,GACPyB,YAAa,GACb3P,SAAU,GACVF,KAAM,IAEV8P,YAAa,CACTC,GAAI,MACJC,GAAI,QACJC,GAAI,QACJC,GAAI,QACJC,GAAI,UAERC,MAAO,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,KAoDhBC,GAAgB,CACzB9E,cACA+E,UAnDyB,eACtB/E,GADsB,CAEzBC,OAAO,eACAD,GAAWC,OADZ,CAGFC,QAASH,GAAiB,GAC1BI,KAAMJ,GAAqB,GAC3BK,QAASL,GAAqB,GAC9B/J,MAAO+J,GAAmB,GAE1BM,UAAWN,GAAqB,GAChCO,OAAQP,GAAqB,GAC7BQ,UAAWR,GAAqB,GAChCS,QAAST,GAAqB,GAE9BU,YAAaV,GAAqB,GAClCW,iBAAkBX,GAAqB,GACvCY,oBAAqBZ,GAAqB,GAC1Ca,sBAAuBb,GAAqB,GAC5CgB,cAAehB,GAAqB,GACpCiB,mBAAoBjB,GAAqB,GACzCkB,oBAAqBlB,GAAqB,GAC1CmB,mBAAoBnB,GAAqB,GACzCoB,YAAapB,GAAqB,GAClCqB,kBAAmBrB,GAAqB,GACxCsB,sBAAuBtB,GAAqB,GAC5CuB,wBAAyBvB,GAAqB,GAC9CwB,cAAexB,GAAiB,GAChCyB,gBAAiBzB,GAAqB,GACtC0B,sBAAuB1B,GAAqB,GAC5C2B,wBAAyB3B,GAAqB,GAE9C4B,YAAa5B,GAAqB,GAClC6B,kBAAmB,UACnBC,cAAe,UACfC,aAAc/B,GAAqB,GACnCgC,mBAAoB,UACpBC,eAAgB,UAChBC,eAAgBlC,GAAqB,GACrCmC,qBAAsBnC,GAAqB,GAC3CoC,iBAAkBpC,GAAqB,GAEvCqC,OAAQrC,GAAqB,GAC7BuC,KAAMvC,GAAqB,GAC3BwC,UAAWxC,GAAqB,GAChCyC,UAAWzC,GAAqB,QAclCiF,GAAa,CAAC,yEAAD,yrBAYNC,GAAe,SAACC,GAAD,OAAmB,gBAAGjH,EAAH,EAAGA,MAAH,OAC1C+G,GAAWE,IAAU,IAAIpN,QAAQ,WAAYmG,EAAMgC,OAAOmC,U,osBC3NxD,IAAM+C,GAAuBC,YAAH,MAC3B,gBAAGC,EAAH,EAAGA,cAAH,OACEA,GACAD,YADa,KAG2B,UAAlBC,EAA4B,MAAQ,SAGlDC,GACgC,SAAlBD,EAA2B,aAAe,UAC1C,gBAAGpH,EAAH,EAAGA,MAAH,MAAkC,UAAlBoH,EAA4B,EAAIpH,EAAM4G,MAAM,MAC3D,gBAAG5G,EAAH,EAAGA,MAAH,MAAkC,UAAlBoH,EAA4BpH,EAAM4G,MAAM,GAAK,QAK/EU,GAAeC,IAAOC,IAAV,KACnBN,IAGOG,GAAQE,IAAOE,IAAV,MACZ,gBAAGC,EAAH,EAAGA,gBAAH,OACEA,EACMP,YADS,KAEsB,IAAlBO,GAEb,M,8yBCvBP,IAAMC,GAAWJ,IAAOK,QAAV,MACG,qBAAG5H,MAAkBgC,OAAOG,WACvC,qBAAGnC,MAAkBgC,OAAOM,aACvB,gBAAGtC,EAAH,EAAGA,MAAH,OAAegH,GAAahH,EAAMiG,UAAUvP,aACzC,qBAAGsJ,MAAkB0E,MAAMC,SAC1CiC,KAEAM,IACA,gBAAGE,EAAH,EAAGA,cAAH,OACEA,GACAD,YADa,KAE2B,UAAlBC,EAA4B,cAAgB,aAI1EO,GAASE,aAAe,CACpBC,QAAS,EACTC,SAAU,EACVC,SAAU,CAAEzB,GAAI,EAAGG,GAAI,IAGpB,IAAMuB,GAAQV,IAAOW,GAAV,MACJ,qBAAGlI,MAAkB4G,MAAM,MACtB,qBAAG5G,MAAkBoG,MAAM1P,YAC7B,qBAAGsJ,MAAkB0E,MAAMG,YAI/BsD,GAAaZ,IAAOC,IAAV,MACL,qBAAGxH,MAAkB4G,MAAM,MAC1B,qBAAG5G,MAAkB4G,MAAM,MAClB,qBAAG5G,MAAkBgC,OAAOuC,aAO3C6D,GAAYb,IAAOc,GAAV,MAEL,qBAAGrI,MAAkBgC,OAAOjK,S,u7CCxCtC,IAAMuQ,GAAYf,IAAOC,IAAV,MACL,gBAAGxH,EAAH,EAAGA,MAAOuI,EAAV,EAAUA,cAAV,OAA8BvI,EAAMsG,YAAYiC,GAAiB,QAC5E3B,MAEN0B,GAAUT,aAAe,CACrBW,QAAS,OACTR,SAAU,CAAEzB,GAAI,EAAGC,GAAI,EAAGE,GAAI,IAG3B,IAAM+B,GAAOlB,IAAOmB,GAAV,MAEH,qBAAG1I,MAAkB4G,MAAM,MACb,qBAAG5G,MAAkBgC,OAAOuC,aAG3CoE,GAASpB,IAAOqB,GAAV,MACF,qBAAG5I,MAAkB0E,MAAME,SACzB,qBAAG5E,MAAkBoG,MAAMxB,SAIjCiE,GAActB,IAAOC,IAAV,MACL,qBAAGxH,MAAkBoG,MAAMC,cAExCO,MAENiC,GAAYhB,aAAe,CACvBG,SAAU,CAAEzB,GAAI,EAAGG,GAAI,IAGpB,IAAMoC,GAAQvB,IAAOC,IAAV,MACZ,gBAAGxH,EAAH,EAAGA,MAAH,SAAU+I,eAER5B,YADa,KAEPsB,GAIAI,GAKAvB,GACatH,EAAM4G,MAAM,GACN5G,EAAM4G,MAAM,GAChB5G,EAAM4G,MAAM,MAInCe,IACI,gBAAGqB,EAAH,EAAGA,YAAH,OACEA,EACM7B,YADK,KAEwB6B,GAE7B,MAER,gBAAGC,EAAH,EAAGA,wBAAH,OACEA,EACM9B,YADiB,KAEO8B,GAExB,MAILC,GAAS3B,YAAOe,GAAPf,CAAH,MACF,qBAAGvH,MAAkB0E,MAAMI,SAEtCqE,MC5EN,SAASC,KAA2Q,OAA9PA,GAAW5P,OAAO6P,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUpT,OAAQmT,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI5P,KAAO8P,EAAcjQ,OAAOkQ,UAAUC,eAAeC,KAAKH,EAAQ9P,KAAQ2P,EAAO3P,GAAO8P,EAAO9P,IAAY,OAAO2P,IAA2BO,MAAMC,KAAMN,WAEhT,SAASO,GAAyBN,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAAkE9P,EAAK4P,EAAnED,EAEzF,SAAuCG,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAA2D9P,EAAK4P,EAA5DD,EAAS,GAAQW,EAAazQ,OAAO0Q,KAAKT,GAAqB,IAAKF,EAAI,EAAGA,EAAIU,EAAW7T,OAAQmT,IAAO5P,EAAMsQ,EAAWV,GAAQS,EAASG,QAAQxQ,IAAQ,IAAa2P,EAAO3P,GAAO8P,EAAO9P,IAAQ,OAAO2P,EAFxMc,CAA8BX,EAAQO,GAAuB,GAAIxQ,OAAO6Q,sBAAuB,CAAE,IAAIC,EAAmB9Q,OAAO6Q,sBAAsBZ,GAAS,IAAKF,EAAI,EAAGA,EAAIe,EAAiBlU,OAAQmT,IAAO5P,EAAM2Q,EAAiBf,GAAQS,EAASG,QAAQxQ,IAAQ,GAAkBH,OAAOkQ,UAAUa,qBAAqBX,KAAKH,EAAQ9P,KAAgB2P,EAAO3P,GAAO8P,EAAO9P,IAAU,OAAO2P,ED4EneJ,GAAOrB,aAAe,CAClBC,QAAS,EACTqB,UAAW,CAAEqB,EAAG,SAAU/D,GAAI,UCxElC,IAAI,GAAqB,IAAMgE,cAAc,OAAQ,CACnDC,KAAM,eACNC,EAAG,oZAGD,GAAqB,SAA4BC,GACnD,IAAIC,EAASD,EAAKC,OACdjG,EAAQgG,EAAKhG,MACbkG,EAAQf,GAAyBa,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMH,cAAc,MAAOrB,GAAS,CACtD,cAAe,OACf2B,UAAW,QACX,cAAe,MACf,YAAa,cACbC,UAAW,wCACXC,KAAM,MACNC,QAAS,cACTC,IAAKN,GACJC,GAAQlG,EAAqB,IAAM6F,cAAc,QAAS,KAAM7F,GAAS,KAAM,KAGhFwG,GAAa,IAAMC,YAAW,SAAUP,EAAOK,GACjD,OAAoB,IAAMV,cAAc,GAAoBrB,GAAS,CACnEyB,OAAQM,GACPL,OAEU,ICnCf,SAAS,KAA2Q,OAA9P,GAAWtR,OAAO6P,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUpT,OAAQmT,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI5P,KAAO8P,EAAcjQ,OAAOkQ,UAAUC,eAAeC,KAAKH,EAAQ9P,KAAQ2P,EAAO3P,GAAO8P,EAAO9P,IAAY,OAAO2P,IAA2BO,MAAMC,KAAMN,WAEhT,SAAS,GAAyBC,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAAkE9P,EAAK4P,EAAnED,EAEzF,SAAuCG,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAA2D9P,EAAK4P,EAA5DD,EAAS,GAAQW,EAAazQ,OAAO0Q,KAAKT,GAAqB,IAAKF,EAAI,EAAGA,EAAIU,EAAW7T,OAAQmT,IAAO5P,EAAMsQ,EAAWV,GAAQS,EAASG,QAAQxQ,IAAQ,IAAa2P,EAAO3P,GAAO8P,EAAO9P,IAAQ,OAAO2P,EAFxM,CAA8BG,EAAQO,GAAuB,GAAIxQ,OAAO6Q,sBAAuB,CAAE,IAAIC,EAAmB9Q,OAAO6Q,sBAAsBZ,GAAS,IAAKF,EAAI,EAAGA,EAAIe,EAAiBlU,OAAQmT,IAAO5P,EAAM2Q,EAAiBf,GAAQS,EAASG,QAAQxQ,IAAQ,GAAkBH,OAAOkQ,UAAUa,qBAAqBX,KAAKH,EAAQ9P,KAAgB2P,EAAO3P,GAAO8P,EAAO9P,IAAU,OAAO2P,EAMne,IAAI,GAAqB,IAAMmB,cAAc,OAAQ,CACnDC,KAAM,eACNC,EAAG,4XAGD,GAAsB,SAA6BC,GACrD,IAAIC,EAASD,EAAKC,OACdjG,EAAQgG,EAAKhG,MACbkG,EAAQ,GAAyBF,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMH,cAAc,MAAO,GAAS,CACtD,cAAe,OACfM,UAAW,QACX,cAAe,MACf,YAAa,eACbC,UAAW,yCACXC,KAAM,MACNC,QAAS,cACTC,IAAKN,GACJC,GAAQlG,EAAqB,IAAM6F,cAAc,QAAS,KAAM7F,GAAS,KAAM,KAGhF,GAAa,IAAMyG,YAAW,SAAUP,EAAOK,GACjD,OAAoB,IAAMV,cAAc,GAAqB,GAAS,CACpEI,OAAQM,GACPL,OAEU,ICnCf,SAAS,KAA2Q,OAA9P,GAAWtR,OAAO6P,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUpT,OAAQmT,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI5P,KAAO8P,EAAcjQ,OAAOkQ,UAAUC,eAAeC,KAAKH,EAAQ9P,KAAQ2P,EAAO3P,GAAO8P,EAAO9P,IAAY,OAAO2P,IAA2BO,MAAMC,KAAMN,WAEhT,SAAS,GAAyBC,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAAkE9P,EAAK4P,EAAnED,EAEzF,SAAuCG,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAA2D9P,EAAK4P,EAA5DD,EAAS,GAAQW,EAAazQ,OAAO0Q,KAAKT,GAAqB,IAAKF,EAAI,EAAGA,EAAIU,EAAW7T,OAAQmT,IAAO5P,EAAMsQ,EAAWV,GAAQS,EAASG,QAAQxQ,IAAQ,IAAa2P,EAAO3P,GAAO8P,EAAO9P,IAAQ,OAAO2P,EAFxM,CAA8BG,EAAQO,GAAuB,GAAIxQ,OAAO6Q,sBAAuB,CAAE,IAAIC,EAAmB9Q,OAAO6Q,sBAAsBZ,GAAS,IAAKF,EAAI,EAAGA,EAAIe,EAAiBlU,OAAQmT,IAAO5P,EAAM2Q,EAAiBf,GAAQS,EAASG,QAAQxQ,IAAQ,GAAkBH,OAAOkQ,UAAUa,qBAAqBX,KAAKH,EAAQ9P,KAAgB2P,EAAO3P,GAAO8P,EAAO9P,IAAU,OAAO2P,EAMne,IAAI,GAAqB,IAAMmB,cAAc,OAAQ,CACnDC,KAAM,eACNC,EAAG,qKAGD,GAAkB,SAAyBC,GAC7C,IAAIC,EAASD,EAAKC,OACdjG,EAAQgG,EAAKhG,MACbkG,EAAQ,GAAyBF,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMH,cAAc,MAAO,GAAS,CACtD,cAAe,OACfM,UAAW,QACX,cAAe,MACf,YAAa,WACbC,UAAW,qCACXC,KAAM,MACNC,QAAS,cACTC,IAAKN,GACJC,GAAQlG,EAAqB,IAAM6F,cAAc,QAAS,KAAM7F,GAAS,KAAM,KAGhF,GAAa,IAAMyG,YAAW,SAAUP,EAAOK,GACjD,OAAoB,IAAMV,cAAc,GAAiB,GAAS,CAChEI,OAAQM,GACPL,OAEU,ICnCf,SAAS,KAA2Q,OAA9P,GAAWtR,OAAO6P,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUpT,OAAQmT,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI5P,KAAO8P,EAAcjQ,OAAOkQ,UAAUC,eAAeC,KAAKH,EAAQ9P,KAAQ2P,EAAO3P,GAAO8P,EAAO9P,IAAY,OAAO2P,IAA2BO,MAAMC,KAAMN,WAEhT,SAAS,GAAyBC,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAAkE9P,EAAK4P,EAAnED,EAEzF,SAAuCG,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAA2D9P,EAAK4P,EAA5DD,EAAS,GAAQW,EAAazQ,OAAO0Q,KAAKT,GAAqB,IAAKF,EAAI,EAAGA,EAAIU,EAAW7T,OAAQmT,IAAO5P,EAAMsQ,EAAWV,GAAQS,EAASG,QAAQxQ,IAAQ,IAAa2P,EAAO3P,GAAO8P,EAAO9P,IAAQ,OAAO2P,EAFxM,CAA8BG,EAAQO,GAAuB,GAAIxQ,OAAO6Q,sBAAuB,CAAE,IAAIC,EAAmB9Q,OAAO6Q,sBAAsBZ,GAAS,IAAKF,EAAI,EAAGA,EAAIe,EAAiBlU,OAAQmT,IAAO5P,EAAM2Q,EAAiBf,GAAQS,EAASG,QAAQxQ,IAAQ,GAAkBH,OAAOkQ,UAAUa,qBAAqBX,KAAKH,EAAQ9P,KAAgB2P,EAAO3P,GAAO8P,EAAO9P,IAAU,OAAO2P,EAMne,IAAI,GAAqB,IAAMmB,cAAc,OAAQ,CACnDC,KAAM,eACNC,EAAG,uRAGD,GAAgB,SAAuBC,GACzC,IAAIC,EAASD,EAAKC,OACdjG,EAAQgG,EAAKhG,MACbkG,EAAQ,GAAyBF,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMH,cAAc,MAAO,GAAS,CACtD,cAAe,OACfM,UAAW,QACX,cAAe,MACf,YAAa,QACbC,UAAW,kCACXC,KAAM,MACNC,QAAS,cACTC,IAAKN,GACJC,GAAQlG,EAAqB,IAAM6F,cAAc,QAAS,KAAM7F,GAAS,KAAM,KAGhF,GAAa,IAAMyG,YAAW,SAAUP,EAAOK,GACjD,OAAoB,IAAMV,cAAc,GAAe,GAAS,CAC9DI,OAAQM,GACPL,OAEU,ICnCf,SAAS,KAA2Q,OAA9P,GAAWtR,OAAO6P,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUpT,OAAQmT,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI5P,KAAO8P,EAAcjQ,OAAOkQ,UAAUC,eAAeC,KAAKH,EAAQ9P,KAAQ2P,EAAO3P,GAAO8P,EAAO9P,IAAY,OAAO2P,IAA2BO,MAAMC,KAAMN,WAEhT,SAAS,GAAyBC,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAAkE9P,EAAK4P,EAAnED,EAEzF,SAAuCG,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAA2D9P,EAAK4P,EAA5DD,EAAS,GAAQW,EAAazQ,OAAO0Q,KAAKT,GAAqB,IAAKF,EAAI,EAAGA,EAAIU,EAAW7T,OAAQmT,IAAO5P,EAAMsQ,EAAWV,GAAQS,EAASG,QAAQxQ,IAAQ,IAAa2P,EAAO3P,GAAO8P,EAAO9P,IAAQ,OAAO2P,EAFxM,CAA8BG,EAAQO,GAAuB,GAAIxQ,OAAO6Q,sBAAuB,CAAE,IAAIC,EAAmB9Q,OAAO6Q,sBAAsBZ,GAAS,IAAKF,EAAI,EAAGA,EAAIe,EAAiBlU,OAAQmT,IAAO5P,EAAM2Q,EAAiBf,GAAQS,EAASG,QAAQxQ,IAAQ,GAAkBH,OAAOkQ,UAAUa,qBAAqBX,KAAKH,EAAQ9P,KAAgB2P,EAAO3P,GAAO8P,EAAO9P,IAAU,OAAO2P,EAMne,IAAI,GAAqB,IAAMmB,cAAc,OAAQ,CACnDC,KAAM,eACNC,EAAG,qcAGD,GAA8B,SAAqCC,GACrE,IAAIC,EAASD,EAAKC,OACdjG,EAAQgG,EAAKhG,MACbkG,EAAQ,GAAyBF,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMH,cAAc,MAAO,GAAS,CACtD,cAAe,OACfM,UAAW,QACX,cAAe,MACf,YAAa,uBACbC,UAAW,iDACXC,KAAM,MACNC,QAAS,cACTC,IAAKN,GACJC,GAAQlG,EAAqB,IAAM6F,cAAc,QAAS,KAAM7F,GAAS,KAAM,KAGhF,GAAa,IAAMyG,YAAW,SAAUP,EAAOK,GACjD,OAAoB,IAAMV,cAAc,GAA6B,GAAS,CAC5EI,OAAQM,GACPL,OAEU,ICnCf,SAAS,KAA2Q,OAA9P,GAAWtR,OAAO6P,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUpT,OAAQmT,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI5P,KAAO8P,EAAcjQ,OAAOkQ,UAAUC,eAAeC,KAAKH,EAAQ9P,KAAQ2P,EAAO3P,GAAO8P,EAAO9P,IAAY,OAAO2P,IAA2BO,MAAMC,KAAMN,WAEhT,SAAS,GAAyBC,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAAkE9P,EAAK4P,EAAnED,EAEzF,SAAuCG,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAA2D9P,EAAK4P,EAA5DD,EAAS,GAAQW,EAAazQ,OAAO0Q,KAAKT,GAAqB,IAAKF,EAAI,EAAGA,EAAIU,EAAW7T,OAAQmT,IAAO5P,EAAMsQ,EAAWV,GAAQS,EAASG,QAAQxQ,IAAQ,IAAa2P,EAAO3P,GAAO8P,EAAO9P,IAAQ,OAAO2P,EAFxM,CAA8BG,EAAQO,GAAuB,GAAIxQ,OAAO6Q,sBAAuB,CAAE,IAAIC,EAAmB9Q,OAAO6Q,sBAAsBZ,GAAS,IAAKF,EAAI,EAAGA,EAAIe,EAAiBlU,OAAQmT,IAAO5P,EAAM2Q,EAAiBf,GAAQS,EAASG,QAAQxQ,IAAQ,GAAkBH,OAAOkQ,UAAUa,qBAAqBX,KAAKH,EAAQ9P,KAAgB2P,EAAO3P,GAAO8P,EAAO9P,IAAU,OAAO2P,EAMne,IAAI,GAAqB,IAAMmB,cAAc,OAAQ,CACnDC,KAAM,eACNC,EAAG,uUAGD,GAA2B,SAAkCC,GAC/D,IAAIC,EAASD,EAAKC,OACdjG,EAAQgG,EAAKhG,MACbkG,EAAQ,GAAyBF,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMH,cAAc,MAAO,GAAS,CACtD,cAAe,OACfM,UAAW,QACX,cAAe,MACf,YAAa,qBACbC,UAAW,+CACXC,KAAM,MACNC,QAAS,cACTC,IAAKN,GACJC,GAAQlG,EAAqB,IAAM6F,cAAc,QAAS,KAAM7F,GAAS,KAAM,KAGhF,GAAa,IAAMyG,YAAW,SAAUP,EAAOK,GACjD,OAAoB,IAAMV,cAAc,GAA0B,GAAS,CACzEI,OAAQM,GACPL,OAEU,ICnCf,SAAS,KAA2Q,OAA9P,GAAWtR,OAAO6P,QAAU,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUpT,OAAQmT,IAAK,CAAE,IAAIE,EAASD,UAAUD,GAAI,IAAK,IAAI5P,KAAO8P,EAAcjQ,OAAOkQ,UAAUC,eAAeC,KAAKH,EAAQ9P,KAAQ2P,EAAO3P,GAAO8P,EAAO9P,IAAY,OAAO2P,IAA2BO,MAAMC,KAAMN,WAEhT,SAAS,GAAyBC,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAAkE9P,EAAK4P,EAAnED,EAEzF,SAAuCG,EAAQO,GAAY,GAAc,MAAVP,EAAgB,MAAO,GAAI,IAA2D9P,EAAK4P,EAA5DD,EAAS,GAAQW,EAAazQ,OAAO0Q,KAAKT,GAAqB,IAAKF,EAAI,EAAGA,EAAIU,EAAW7T,OAAQmT,IAAO5P,EAAMsQ,EAAWV,GAAQS,EAASG,QAAQxQ,IAAQ,IAAa2P,EAAO3P,GAAO8P,EAAO9P,IAAQ,OAAO2P,EAFxM,CAA8BG,EAAQO,GAAuB,GAAIxQ,OAAO6Q,sBAAuB,CAAE,IAAIC,EAAmB9Q,OAAO6Q,sBAAsBZ,GAAS,IAAKF,EAAI,EAAGA,EAAIe,EAAiBlU,OAAQmT,IAAO5P,EAAM2Q,EAAiBf,GAAQS,EAASG,QAAQxQ,IAAQ,GAAkBH,OAAOkQ,UAAUa,qBAAqBX,KAAKH,EAAQ9P,KAAgB2P,EAAO3P,GAAO8P,EAAO9P,IAAU,OAAO2P,EAMne,IAAI,GAAqB,IAAMmB,cAAc,OAAQ,CACnDC,KAAM,eACNC,EAAG,oaAGD,GAAgB,SAAuBC,GACzC,IAAIC,EAASD,EAAKC,OACdjG,EAAQgG,EAAKhG,MACbkG,EAAQ,GAAyBF,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAMH,cAAc,MAAO,GAAS,CACtD,cAAe,OACfM,UAAW,QACX,cAAe,MACf,YAAa,QACbC,UAAW,kCACXC,KAAM,MACNC,QAAS,cACTC,IAAKN,GACJC,GAAQlG,EAAqB,IAAM6F,cAAc,QAAS,KAAM7F,GAAS,KAAM,KAGhF,GAAa,IAAMyG,YAAW,SAAUP,EAAOK,GACjD,OAAoB,IAAMV,cAAc,GAAe,GAAS,CAC9DI,OAAQM,GACPL,OAEU,I,6rBCpBf,IAgBYQ,GAhBNC,GAAQ,CACVC,KAAMC,GACNC,YAAaC,GACbC,QAASC,GACTC,MAAOC,GACPhU,MAAOiU,GACP7O,KAAM8O,GACNC,MAAOC,IAGc3S,OAAO0Q,KAAKqB,K,SAMzBD,O,WAAAA,I,iBAAAA,I,eAAAA,I,gBAAAA,Q,KAQL,IAAMc,GAAc7E,IAAO8E,KAAV,MAEP,gBAAGrM,EAAH,EAAGA,MAAOsM,EAAV,EAAUA,MAAV,OAAuBA,EAAQtM,EAAMgC,OAAOsK,GAAStM,EAAMgC,OAAOsC,aAQlE,gBAAGtE,EAAH,EAAGA,MAAOsM,EAAV,EAAUA,MAAV,OAAuBA,EAAQtM,EAAMgC,OAAOsK,GAAStM,EAAMgC,OAAOqC,QAMzE,gBAAGkI,EAAH,EAAGA,YAAH,OACEA,GACApF,YADW,KAE2B,GAAdoF,MAG1B,gBAAGC,EAAH,EAAGA,KAAH,OACEA,GACArF,YADI,KAESqF,EACCA,MAeXC,GATF,SAAC3B,GACV,IAAM4B,EAAYnB,GAAMT,EAAMlX,MAC9B,OACI,kBAACwY,GAAgBtB,EACb,kBAAC4B,EAAD,Q,4xRCtEZ,IAAMC,GAAaxF,YAAH,MACQ,qBAAGnH,MAAkBgC,OAAOQ,eAChC,qBAAGxC,MAAkB0E,MAAM5B,iBAC3B,qBAAG9C,MAAkBgC,OAAOc,iBAM1C8J,GAAazF,YAAH,MACE,qBAAGnH,MAAkB4G,MAAM,MACzB,qBAAG5G,MAAkB4G,MAAM,MAC1B,qBAAG5G,MAAkB4G,MAAM,MAI1CiG,GAAc1F,YAAH,MACF,gBAAGnH,EAAH,EAAGA,MAAH,gBAAkBA,EAAM4G,MAAM,GAA9B,cAAsC5G,EAAM4G,MAAM,GAAlD,SAOFkG,GAAWvF,IAAOC,IAAV,KACfmF,GACAC,IAKc,gBAAG5M,EAAH,EAAGA,MAAH,SAAU+M,QAAyB/M,EAAMgC,OAAOgB,oBAAsBhD,EAAMgC,OAAOc,iBAClF,qBAAG9C,MAAkB0E,MAAMC,UAUhC,qBAAGoI,QAAyB,IAAM,KAE/B,qBAAG/M,MAAkB0F,OAAOC,aACnB,qBAAG3F,MAAkBgC,OAAOQ,eAO1B,qBAAGxC,MAAkB0E,MAAMO,sBAC1B,qBAAGjF,MAAkB0E,MAAMO,sBACxC,qBAAGjF,MAAkB0E,MAAMO,sBAShC+H,GAAczF,IAAOC,IAAV,KAClBmF,GACAC,IAKc,gBAAG5M,EAAH,EAAGA,MAAH,SAAU+M,QAAyB/M,EAAMgC,OAAOgB,oBAAsBhD,EAAMgC,OAAOc,iBAQ7F,gBAAG9C,EAAH,EAAGA,MAAH,OAAemH,YAAd,KACQnH,EAAM0E,MAAMQ,mBACVlF,EAAM0E,MAAMQ,mBACXlF,EAAM0E,MAAMQ,mBACdlF,EAAM0E,MAAMQ,uBAGJ,qBAAGlF,MAAkBgC,OAAOY,oBAK9C,gBAAGmK,EAAH,EAAGA,QAAH,OAAiB5F,YAAhB,KACY4F,EAAU,EAAI,EACNA,EAAU,EAAI,QAKhCE,GAAmB1F,IAAOC,IAAV,MAGlB,qBAAGxH,MAAkB4G,MAAM,MACpB,qBAAG5G,MAAkB4G,MAAM,MAOhCsG,GAAgB3F,IAAOC,IAAV,MAOb2F,GAAc5F,IAAOC,IAAV,KAClBmF,GACAC,GACAC,IAES,qBAAG7M,MAAkB0F,OAAOG,eAKtB,qBAAG7F,MAAkB0E,MAAMC,UAIzB,qBAAG3E,MAAkB4G,MAAM,MAG5C,gBAAGwG,EAAH,EAAGA,OAAQtR,EAAX,EAAWA,SAAX,OACGsR,IACAtR,GACDqL,YAFA,MAIwB,qBAAGnH,MAAkBgC,OAAOe,sBAInC,qBAAG/C,MAAkBgC,OAAOsC,gBAI/C,qBAAG8I,QAEDjG,YADM,MAMW,qBAAGnH,MAAkBgC,OAAOgB,0BAI/C,gBAAGlH,EAAH,EAAGA,SAAUkE,EAAb,EAAaA,MAAb,OACElE,GACAqL,YADQ,KAGgBnH,EAAMgC,OAAOU,oBACxB1C,EAAMgC,OAAOW,0BAIrB0K,GAAiB9F,IAAOc,GAAV,KACrBsE,IAKuB,qBAAG3M,MAAkB4G,MAAM,MAAU,qBAAG5G,MAAkB0E,MAAM5B,iBAG3D,qBAAG9C,MAAkB0E,MAAMC,UAC5B,qBAAG3E,MAAkB0E,MAAMC,UAC1C,gBAAG3E,EAAH,EAAGA,MAAH,OAAegH,GAAahH,EAAMiG,UAAUE,aAKxD,gBAAGmH,EAAH,EAAGA,KAAMtN,EAAT,EAASA,MAAT,OAAqBmH,YAApB,KACYmG,EAAO,EAAI,EACJA,EAAO,UAAY,OACbA,EAAO,GAAKtN,EAAM4G,MAAM,OAI3C2G,GAAehG,IAAOiG,GAAV,KACnBX,IAK0B,qBAAG7M,MAAkBgC,OAAOc,iBAIhC,qBAAG9C,MAAkBgC,OAAOS,oBAQ3CgL,GAAQlG,IAAOC,IAAV,MAKZ,gBAAG1L,EAAH,EAAGA,SAAUkE,EAAb,EAAaA,MAAb,OACElE,EACMqL,YADE,KAGI6F,GAAgBF,GACM9M,EAAMgC,OAAOU,oBACxB1C,EAAMgC,OAAOW,sBAIxBqK,GACsBhN,EAAMgC,OAAOW,sBAInCmK,GACsB9M,EAAMgC,OAAOU,qBAGzCyE,YAlBE,KAsBQ6F,GAAgBF,IACE,qBAAG9M,MAAkBgC,OAAOe,yBAMzD2K,GAAcnG,YAAOkG,GAAPlG,CAAH,MAIX,qBAAGvH,MAAkBgC,OAAOkB,cAEnC8J,GAAgBF,IASTa,GAAmBpG,IAAOC,IAAV,MAIhBoG,GAAYrG,IAAOzG,MAAV,KAChB6L,GACAC,GACAC,IACO,gBAAG7M,EAAH,EAAGA,MAAO6N,EAAV,EAAUA,KAAV,OAAsBA,GAAQA,EAAO,EAAI7N,EAAM0E,MAAMM,kBAAoBhF,EAAM0E,MAAMK,sBACjF,gBAAG/E,EAAH,EAAGA,MAAO6N,EAAV,EAAUA,KAAV,OACTA,GAAQA,EAAO,EAAI7N,EAAM0E,MAAMM,kBAAoBhF,EAAM0E,MAAMK,sBAElD,qBAAG/E,MAAkB0E,MAAMC,UACnC,qBAAG3E,MAAkBgC,OAAOM,aAKjB,qBAAGtC,MAAkBgC,OAAOe,sBAI5B,gBAAG/C,EAAH,EAAGA,MAAH,SAAU8N,QAAyB9N,EAAMgC,OAAOjK,MAAQiI,EAAMgC,OAAOgB,uBAI5E,qBAAGhD,MAAkBgC,OAAOiB,sBAIjB,qBAAGjD,MAAkBgC,OAAOU,uBACvC,qBAAG1C,MAAkBgC,OAAOW,yBACrB,qBAAG3C,MAAkBgC,OAAOc,iBAIvCiL,GAAaxG,IAAOC,IAAV,MAGN,qBAAGxH,MAAkB0E,MAAMS,gBAE/B,qBAAGnF,MAAkBgC,OAAOjK,QAEnCqU,IAUA4B,GAAmB7G,YAAH,MAMhB8G,GAAiB,SAAC,GAAD,IAAGnS,EAAH,EAAGA,SAAUkE,EAAb,EAAaA,MAAb,OACnBlE,GACAqL,YADQ,KAEgBnH,EAAMgC,OAAOoB,wBAGnC8K,GAAmB,SAAC,GAAD,IAAGpS,EAAH,EAAGA,SAAUkE,EAAb,EAAaA,MAAb,OACrBlE,GACAqL,YADQ,KAEgBnH,EAAMgC,OAAOqB,0BAG5B8K,GAAgB5G,IAAOC,IAAV,MAID,qBAAGxH,MAAkB4G,MAAM,KAE1CwH,MAIGC,GAAa9G,IAAOC,IAAV,MAEA,qBAAGxH,MAAkB0E,MAAMU,2BAEpC,qBAAGpF,MAAkB0E,MAAMU,2BACpB,qBAAGpF,MAAkB0E,MAAMC,UACxB,qBAAG3E,MAAkBgC,OAAOmB,oBAC9C8K,IAGOK,GAAc/G,IAAOC,IAAV,MAET,qBAAGxH,MAAkB0F,OAAOI,eACpB,qBAAG9F,MAAkB0E,MAAMW,4BAErC,mBAAiB,IAAjB,EAAGkJ,WACF,qBAAGvO,MAAkB0E,MAAMW,4BAEjB,qBAAGrF,MAAkBgC,OAAOC,WAC/B,gBAAGsM,EAAH,EAAGA,QAASvO,EAAZ,EAAYA,MAAZ,OAAqC,MAAZuO,EAAkBvO,EAAM0E,MAAMC,OAAS,aACvD,qBAAG3E,MAAkB0E,MAAMC,UACxB,qBAAG3E,MAAkB0E,MAAMC,SACtDqJ,GACAE,IAGOM,GAAejH,IAAOC,IAAV,MAEV,qBAAGxH,MAAkB0F,OAAOK,gBACpB,qBAAG/F,MAAkB0E,MAAMY,2BACtC,qBAAGiJ,WAEF,qBAAGvO,MAAkB0E,MAAMY,2BAC1B,qBAAGtF,MAAkB0E,MAAMY,2BAGjB,qBAAGtF,MAAkBgC,OAAOY,mBAG9CoL,GACAE,IAEA,gBAAGpS,EAAH,EAAGA,SAAUkE,EAAb,EAAaA,MAAb,OACGlE,GACDqL,YADA,KAM4BnH,EAAMgC,OAAOa,2BAKpC4L,GAAalH,IAAOC,IAAV,MAEA,qBAAGxH,MAAkB0E,MAAMW,4BACtC,qBAAGkJ,WAED,qBAAGvO,MAAkB0E,MAAMW,4BACjB,qBAAGrF,MAAkBgC,OAAOmB,oBAC9C8K,IAEgB,mBAA8B,MAA9B,EAAGM,QAAiC,mBAAqB,MAKlEG,GAAkBnH,IAAO8E,KAAV,MAGhB,qBAAGkC,WACF,qBAAGvO,MAAkBgC,OAAOkB,eCrY1B4J,GAZE,SAAChC,GAAmC,IACzCiC,EAAyCjC,EAAzCiC,QAASjR,EAAgCgP,EAAhChP,SAAU6S,EAAsB7D,EAAtB6D,SAAUC,EAAY9D,EAAZ8D,QACrC,OACI,kBAAC,GAAD,CAAcA,QAAU9S,OAAqChB,EAA1B,kBAAM8T,GAAS7B,IAAsBjR,SAAUA,GAC9E,kBAAC,GAAD,CAAiBiR,QAASA,GACtB,kBAAC,GAAD,CAAMnZ,KAAK,QAAQ0Y,MAAOxQ,EAAW,wBAA0B,sBAElE6S,I,47BChBb,IAEaE,GAAiBtH,IAAO8E,KAAV,MAEZ,qBAAGrM,MAAkB0F,OAAOE,WAK9B,qBAAG5F,MAAkBgC,OAAOM,aACjB,qBAAGtC,MAAkBgC,OAAOG,WAClC,gBAAGnC,EAAH,EAAGA,MAAH,OAAegH,GAAahH,EAAMiG,UAAUL,YAIxD,gBAAG0H,EAAH,EAAGA,KAAH,OAAcnG,YAAb,KACYmG,EAAO,EAAI,EACJA,EAAO,UAAY,UAGvClB,IACkB,qBAAGpM,MAAkB4G,MAAM,MAItCkI,GAAUvH,IAAO8E,KAAV,KAzBQ,GAmCL0C,GACCA,EAIhB3C,IACe,qBAAGpM,MAAkB4G,MAAM,MClC5CoI,GAAO,SAAClE,GAA6C,IAAD,EAC1BmE,oBAAS,GADiB,mBAC/C7B,EAD+C,KACvC8B,EADuC,KAEhDN,EAAU,SAACO,GACbA,EAAMC,kBACNF,GAAU,SAACG,GAAD,OAAWA,MAGzB,OACI,kBAACP,GAAD,KACI,kBAAC,GAAD,CAAMlb,KAAK,OAAOgb,QAASxB,OAAStS,EAAY8T,IAChD,kBAACC,GAAD,CAAgBvB,KAAMF,EAAQwB,QAASxB,EAASwB,OAAU9T,GACtD,kBAAC,GAAD,CAAMlH,KAAK,cAAc0Y,MAAM,cAC9BxB,EAAM5K,WAwCRoP,GAlCO,SAACxE,GAA2C,IACtDxR,EAAiBwR,EAAjBxR,MAAOiW,EAAUzE,EAAVyE,MACTC,EAAQlW,EAAMe,MAAM,UAE1B,GAAIkV,GAASA,EAAMnZ,OACf,GAAIoZ,EAAMpZ,QAAU,EAChB6E,QAAQwU,KAAR,qBAA2BnW,EAA3B,sEACG,IAAIiW,EAAMnZ,SAAWoZ,EAAMpZ,OAAS,EAGvC,OACI,8BACKoZ,EAAMrW,QAAO,SAACuW,EAAQC,EAAMtR,GACzB,IAAMuR,EAAOL,EAAMlR,GACnB,OACI,oCACKqR,EACAC,EACAC,GAAQ,kBAAC,GAAD,CAAM1P,QAAS0P,OAGjC,uCAbX3U,QAAQwU,KAAR,qBAA2BnW,EAA3B,0EAuBR,OAJIkW,EAAMpZ,OAAS,GACf6E,QAAQwU,KAAR,qBAA2BnW,EAA3B,uEAGG,8BAAOA,ICSHuW,GA/Cc,SAAC/E,GAAmC,IACrDpU,EAAaoU,EAAbpU,SAEFgB,EAAWyJ,KACX2O,EAAiBpa,GAAiBkH,IAClCmQ,EAAUrX,GAAiBkC,GAAkDlB,IAAWH,MAExFkB,EAAQ4J,KAP8C,EAQ/B7J,EAAmBd,EAAUe,GAAlDM,EARoD,EAQpDA,MAAOC,EAR6C,EAQ7CA,UAEf,OACI,kBAAC2P,GAAD,CACInP,GAAIC,EAAoB/B,GACxB0Q,cAAe1Q,EAASqZ,MAAQrZ,EAASqZ,MAAMC,WAAa,YAASlV,GAEpEpE,EAASqZ,OACN,kBAAC1I,GAAD,CAAO4I,IAAKvZ,EAASqZ,MAAMzV,IAAKoN,gBAAiBhR,EAASqZ,MAAMvD,KAAM0D,IAAKxZ,EAASqZ,MAAMG,MAG9F,6BACI,kBAAC,GAAD,CACInD,QAASA,IAAW,EACpBjR,SAAUgU,EACVlB,QAAS,kBAAMnT,EAAoB/E,EAAUgB,GAAWqV,KAExD,kBAAC9E,GAAD,KACI,kBAAC,GAAD,CAAe3O,MAAO5C,EAASkO,MAAO2K,MAAO7Y,EAAS6Y,UAK9D,kBAACxB,GAAD,KACK/V,GACG,oCACI,kBAAC,GAAD,CAAMpE,KAAK,QAAQ0Y,MAAM,UACxBvU,OCAdoY,GAxCA,SAACrF,GAAmC,IACvCnM,EAAwDmM,EAAxDnM,QAASyR,EAA+CtF,EAA/CsF,iBAAkBC,EAA6BvF,EAA7BuF,eAAgBvU,EAAagP,EAAbhP,SAC7CwU,EAAcva,EAAS,yBAA0B,CAAEwa,MAAO5R,EAAQvI,SAF1B,EAGlB6Y,oBAAS,GAHS,mBAGvC7B,EAHuC,KAG/B8B,EAH+B,KAKxCsB,EAAa,kBAAO1U,GAAYoT,GAAU,SAACG,GAAD,OAAWA,MACrDoB,EAAiB9R,EAAQ3B,MAAK,SAAC6B,GAAD,OAAYA,EAAOrG,KAAO4X,KAM9D,OAJAM,qBAAU,WACF5U,GAAUoT,GAAU,KACzB,CAACpT,IAGA,kBAACoR,GAAD,KACI,kBAACC,GAAD,CAAayB,QAAS4B,EAAYpD,OAAQA,EAAQtR,SAAUA,GACxD,kBAAC,GAAD,CAAexC,OAAqB,OAAdmX,QAAc,IAAdA,OAAA,EAAAA,EAAgB7L,QAAS0L,GAAe,GAAIf,OAAqB,OAAdkB,QAAc,IAAdA,OAAA,EAAAA,EAAgBlB,QAAS,KAClG,kBAAC,GAAD,CACI3b,KAAK,UACL2Y,YAAaa,EAAS9B,GAAaqF,GAAKrF,GAAasF,KACrDtE,MAAOxQ,EAAW,6BAA0BhB,KAIpD,kBAACuS,GAAD,CAAgBC,KAAMF,GACjBzO,EAAQ9I,KAAI,SAACgJ,GAAD,OACT,kBAAC0O,GAAD,CACI5T,IAAKkF,EAAOrG,GACZoW,QAAS,WACLyB,EAAexR,EAAOrG,IACtBgY,MAGJ,kBAAC,GAAD,CAAelX,MAAOuF,EAAO+F,MAAO2K,MAAO1Q,EAAO0Q,eCiD3DsB,GA3EgB,SAAC/F,GAAmC,IACvDpU,EAAaoU,EAAbpU,SACFgB,EAAWyJ,KACX2O,EAAiBpa,GAAiBkH,IAClCP,EAAc3G,GAAiBkC,GAAoDlB,IAAWnB,OAE9FkC,EAAQ4J,KANgD,EAOjC7J,EAAmBd,EAAUe,GAAlDM,EAPsD,EAOtDA,MAAOC,EAP+C,EAO/CA,UAEf,OACI,kBAAC2P,GAAD,CACInP,GAAIC,EAAoB/B,GACxB0Q,cAAe1Q,EAASqZ,MAAQrZ,EAASqZ,MAAMC,WAAa,aAAUlV,GAErEpE,EAASqZ,OACN,kBAAC1I,GAAD,CAAO4I,IAAKvZ,EAASqZ,MAAMzV,IAAKoN,gBAAiBhR,EAASqZ,MAAMvD,KAAM0D,IAAKxZ,EAASqZ,MAAMG,MAG9F,6BACI,kBAACjI,GAAD,KACI,kBAAC,GAAD,CAAe3O,MAAO5C,EAASkO,MAAO2K,MAAO7Y,EAAS6Y,SAGlC,UAAvB7Y,EAASS,WACNT,EAASiI,QAAQ9I,KAAI,SAACgJ,GAAD,OACjB,kBAAC4O,GAAD,CACI9T,IAAKkF,EAAOrG,GACZoW,QAAS,kBACJkB,GAAkB1T,GAAsB1F,EAAUgB,EAAU2E,EAAawC,EAAOrG,KAErFsD,SAAUgU,GAEV,kBAAC9C,GAAD,CAAaD,QAAS1Q,EAAYxF,SAASgI,EAAOrG,MAClD,kBAAC,GAAD,CAAec,MAAOuF,EAAO+F,MAAO2K,MAAO1Q,EAAO0Q,YAItC,UAAvB7Y,EAASS,WACNT,EAASiI,QAAQ9I,KAAI,SAACgJ,GAAD,OACjB,kBAAC,GAAD,CACIlF,IAAKkF,EAAOrG,GACZuU,QAAS1Q,EAAYxF,SAASgI,EAAOrG,IACrCoW,QAAS,kBAAMxS,GAAsB1F,EAAUgB,EAAU2E,EAAawC,EAAOrG,KAC7EsD,SAAUgU,GAEV,kBAAC,GAAD,CAAexW,MAAOuF,EAAO+F,MAAO2K,MAAO1Q,EAAO0Q,YAItC,WAAvB7Y,EAASS,WACN,kBAAC,GAAD,CACIwH,QAASjI,EAASiI,QAClByR,iBAAkB/T,EAAY,GAC9BgU,eAAgB,SAAC9Z,GAAD,OAAW6F,GAAsB1F,EAAUgB,EAAU2E,EAAa9F,IAClFuF,SAAUgU,IAKlB,kBAAC/B,GAAD,KACK/V,GACG,oCACI,kBAAC,GAAD,CAAMpE,KAAK,QAAQ0Y,MAAM,UACxBvU,OCXd+Y,GAtDM,SAAChG,GAAmC,IAC7CpU,EAAaoU,EAAbpU,SAEFgB,EAAWyJ,KACX2O,EAAiBpa,GAAiBkH,IAChCrG,EAAUb,GAAiBkC,GAA0ClB,IAArEH,MAEFkB,EAAQ4J,KAPsC,EAQV7J,EAAmBd,EAAUe,GAA/DM,EAR4C,EAQ5CA,MAAOC,EARqC,EAQrCA,UAAWC,EAR0B,EAQ1BA,YAE1B,OACI,kBAAC0P,GAAD,CACInP,GAAIC,EAAoB/B,GACxB0Q,cAAe1Q,EAASqZ,MAAQrZ,EAASqZ,MAAMC,WAAa,aAAUlV,GAErEpE,EAASqZ,OACN,kBAAC1I,GAAD,CAAO4I,IAAKvZ,EAASqZ,MAAMzV,IAAKoN,gBAAiBhR,EAASqZ,MAAMvD,KAAM0D,IAAKxZ,EAASqZ,MAAMG,MAG9F,kBAACvC,GAAD,KACI,kBAAC1F,GAAD,KACI,kBAAC,GAAD,CAAe3O,MAAO5C,EAASkO,MAAO2K,MAAO7Y,EAAS6Y,SAG1D,kBAAC3B,GAAD,CACIrX,MAAOA,EACP+Z,YAAa5Z,EAAS4Z,aAAe,GACrCxC,QAAS9V,EACTmE,SAAU,SAACgT,GAAD,OACN7T,EAAmB5E,EAAUgB,EAAUyX,EAAM7F,OAAO/S,QAExDwa,OAAQ9Y,EACR6D,SAAUgU,EACVkB,IAAKta,EAASua,UAAY,GAAK,EAAI,gBAAanW,EAChD+S,KAAMnX,EAASua,WAInB,kBAAClD,GAAD,KACK/V,GACG,oCACI,kBAAC,GAAD,CAAMpE,KAAK,QAAQ0Y,MAAM,UACxBvU,O,kBCoCdmZ,GAnEA,SAACpG,GAAmC,IACvCnP,EAAoEmP,EAApEnP,IAAKC,EAA+DkP,EAA/DlP,IAAKrF,EAA0DuU,EAA1DvU,MAAOsF,EAAmDiP,EAAnDjP,KAAME,EAA6C+O,EAA7C/O,UAAWI,EAAkC2O,EAAlC3O,SAAUL,EAAwBgP,EAAxBhP,SAAUqV,EAAcrG,EAAdqG,UACtDnV,EAAsC8O,EAAtC9O,UAAWC,EAA2B6O,EAA3B7O,WAAYC,EAAe4O,EAAf5O,WAFe,EAGfkV,cAAvB9K,EAHsC,EAGtCA,YAAaM,EAHyB,EAGzBA,MAGf4F,GAAwB5Q,EAAMD,GAAOE,EAAO,GAAK,KAAO,KAE9D,OACI,kBAACsS,GAAD,CAAeC,MAAO+C,EAAY,EAAH,cAAS5K,GAAI,GAAIiG,EAAOjO,SAAS+H,EAAYkG,IAAoB,EAAX5F,EAAM,KACvF,kBAAC,KAAD,CACIyK,KAAM,EACNC,OAAQ,CAAC3V,EAAKC,GACdC,KAAMA,EACNtG,OAAQ,CAACgB,GACTgb,SAAwB,aAAdxV,EACVI,SAAU,SAAC5G,GAAD,OAAY4G,EAAS5G,EAAO,KACtCuG,SAAUA,GAEV,kBAAC,KAAD,MAAO,gBAAG0V,EAAH,EAAGA,aAAH,OAAsB,kBAACnD,GAAD,eAAYvS,SAAUA,GAAc0V,SACjE,kBAAC,KAAD,MACK,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,eAAZ,OACG,yBAAK1G,UAAU,kBACVyG,EAAQ5b,KAAI,SAAC8b,GAAD,OACT,kBAACnD,GAAD,eACI7U,IAAKgY,EAAOnZ,GACZ+V,QAASoD,EAAOpD,QAChBzS,SAAUA,GACN4V,EAAeC,EAAOnZ,aAM9C,kBAAC,KAAD,CAAQoZ,MAAM,EAAOC,OAAK,IACrB,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,cAAX,OACG,yBAAK/G,UAAU,iBACV8G,EAAOjc,KAAI,gBAAG2C,EAAH,EAAGA,GAAIiR,EAAP,EAAOA,OAAP,OACR,kBAAC6E,GAAD,eACI3U,IAAKnB,EACL+V,QAAS9E,EAAO8E,QAChBzS,SAAUA,GACNiW,aAMxB,kBAAC,KAAD,CAAOxB,MAAOvU,EAAWzG,OAAQ0G,IAC5B,gBAAG+V,EAAH,EAAGA,MAAH,OACG,yBAAKhH,UAAU,gBACVgH,EAAMnc,KAAI,SAACoc,EAAMC,GAAP,OACP,kBAAC,WAAD,CAAUvY,IAAKsY,EAAKzZ,IAChB,kBAACiW,GAAD,CAAYF,QAAS0D,EAAK1D,QAASzS,SAAUA,IAC7C,kBAAC4S,GAAD,CAAiBH,QAAS0D,EAAK1D,UAChB,OAAVrS,QAAU,IAAVA,OAAA,EAAAA,EAAagW,KAAcD,EAAK1b,kBCjC1D4b,GA7BK,SAACrH,GAAmC,IAC5CnP,EAAiFmP,EAAjFnP,IAAKC,EAA4EkP,EAA5ElP,IAAKrF,EAAuEuU,EAAvEvU,MAAOsF,EAAgEiP,EAAhEjP,KAAME,EAA0D+O,EAA1D/O,UAAWE,EAA+C6O,EAA/C7O,WAAYC,EAAmC4O,EAAnC5O,WAAYC,EAAuB2O,EAAvB3O,SAAUL,EAAagP,EAAbhP,SAEtEsW,EACFnW,GACC,IAAIoW,MAAMzW,EAAMD,EAAM,GAClB+O,KAAK,MACL7U,KAAI,SAAC2U,EAAGnM,GACL,OAAIxC,GAAQwC,EAAQxC,IAAS,EAAU,KAChCF,EAAM0C,KAEhB7B,QAAO,SAACjG,EAAO8H,GAAR,OAAkB9H,GAAmB,IAAV8H,KAErC2T,EAAsB,aAAdjW,EAA2BqW,EAAgBE,UAAYF,EAErE,OACI,kBAACnF,GAAD,KACK+E,EAAMnc,KAAI,SAAC0c,EAAWlU,GACnB,OACI,kBAACqP,GAAD,CAAa/T,IAAK4Y,EAAW3D,QAAS,kBAAO9S,GAAYK,EAASoW,IAAYzW,SAAUA,GACpF,kBAACkR,GAAD,CAAaD,QAASxW,IAAUgc,IAChC,8BAAgB,OAAVrW,QAAU,IAAVA,OAAA,EAAAA,EAAamC,KAAUkU,SCStCC,GAnCO,SAAC1H,GAAmC,IAC9CpU,EAAaoU,EAAbpU,SACFgB,EAAWyJ,KACX2O,EAAiBpa,GAAiBkH,IAChCrG,EAAUb,GAAiBkC,GAA2ClB,IAAtEH,MAEFkc,EAA2F,eAC1F/W,GAA6BhF,EAAUgB,EAAUnB,GADyC,CAE7FuF,SAAUgU,IAGd,OACI,kBAACnI,GAAD,CACInP,GAAIC,EAAoB/B,GACxB0Q,cAAe1Q,EAASqZ,MAAQrZ,EAASqZ,MAAMC,WAAa,aAAUlV,GAErEpE,EAASqZ,OACN,kBAAC1I,GAAD,CAAO4I,IAAKvZ,EAASqZ,MAAMzV,IAAKoN,gBAAiBhR,EAASqZ,MAAMvD,KAAM0D,IAAKxZ,EAASqZ,MAAMG,MAG9F,6BACI,kBAACjI,GAAD,KACI,kBAAC,GAAD,CAAe3O,MAAO5C,EAASkO,MAAO2K,MAAO7Y,EAAS6Y,SAGlC,WAAvB7Y,EAASS,WAA0B,kBAAC,GAAD,iBAAYsb,EAAZ,CAAyBzW,UAAWtF,EAASsF,aACzD,UAAvBtF,EAASS,WAAyB,kBAAC,GAAgBsb,M,gsBC3CpE,IAAMC,GAAYC,YAAH,MASFC,GAASrL,IAAOC,IAAV,MACN,qBAAGgF,MAAmB,MACrB,qBAAGA,MAAmB,MAIhB,qBAAGA,MAAoB,IAAM,QAEzB,qBAAGxM,MAAkBgC,OAAOoC,UAChCsO,GAEd9L,MAGuBW,IAAOC,IAAV,M,29BCrBnB,IAAMqL,GAAStL,IAAOrB,OAAO4M,MAAM,CAAElf,KAAM,UAA5B2T,CAAH,MACJ,gBAAGvH,EAAH,EAAGA,MAAH,gBAAkBA,EAAM4G,MAAM,GAA9B,cAAsC5G,EAAM4G,MAAM,GAAlD,SACS,qBAAG5G,MAAkBgC,OAAOsB,iBACvC,qBAAGtD,MAAkBgC,OAAOuB,mBACxB,qBAAGvD,MAAkB0E,MAAMa,kBAIvB,qBAAGvF,MAAkB0E,MAAMC,UAC9B,gBAAG3E,EAAH,EAAGA,MAAH,OAAegH,GAAahH,EAAMiG,UAAUC,WAOlC,qBAAGlG,MAAkBgC,OAAOa,0BAGlD,qBAAG/G,UAEDqL,YADQ,MAEgB,qBAAGnH,MAAkBgC,OAAOwB,yBACvC,qBAAGxD,MAAkBgC,OAAOyB,6BAI3CmP,IAEW,gBAAG5S,EAAH,EAAGA,MAAH,SAAUlE,SAA2BkE,EAAMgC,OAAOqC,KAAO,aAChE,gBAAG0O,EAAH,EAAGA,UAAW/S,EAAd,EAAcA,MAAd,OACE+S,GACA5L,YADS,KAEI4L,EACc,SAAdA,EAAuB,QAAU,OAAW/S,EAAM4G,MAAM,OAKpEoM,GAAwBzL,IAAOC,IAAV,KAK5BZ,MCyBSqM,GA3DW,WACtB,IAAMvb,EAAWyJ,KACX+R,EAAexd,GAAiBqH,IAChCoW,EAAazd,IAAiB,SAACC,GAAD,OAAWA,EAAMgH,QAAQjJ,QAHpB,EAIF+B,EAAU,CAAC,kBAAmB,wBAJ5B,mBAIlC2d,EAJkC,KAIrBC,EAJqB,KAMnCC,EAAkBH,EAAWha,QAAsB,SAACoa,EAAazf,GACnE,IAAM4C,EAAWwc,EAAalW,MAAK,SAACtG,GAAD,OAAc5C,EAAO8C,eAAeC,SAASH,EAASC,SAczF,OAbID,IAAaD,EAAcC,EAAU5C,KAZ9B,IAcHyf,EAAYnd,QACZmd,EAAYC,KAAK,CAAEC,OAAQ,OAAQ7O,MAAO,QAG1C2O,EAAYnd,OAlBT,GAmBHmd,EAAYC,KAAK,CACbC,OAAQlb,EAAkB7B,GAC1BkO,MAAOlO,EAASkO,MAAM/K,QAAQ,SAAU,OAI7C0Z,IACR,IACGG,EAAUJ,EAAgBld,OAAS,EAazC,OACI,kBAAC4c,GAAD,CAAuBW,GAAI,GACvB,kBAACd,GAAD,CAAQ/W,UAAW4X,EAAS9E,QANhB,WACZ8E,GAAShc,EAASxD,MAKgC6e,UAAU,SACvDK,EACD,kBAAC,GAAD,CAAMxf,KAAK,WAGb8f,GACE,kBAACvL,GAAD,KACI,2BAAIkL,GACJ,kBAACjL,GAAD,KACKkL,EAAgBzd,KAAI,SAAC+d,GAAD,OACjB,wBAAIja,IAAKia,EAAKH,OAAQ7E,QAAS,kBAvB5B,SAAC6E,GAAoB,IAAD,EAC3C/b,EAAS3D,EAAe0f,GAAQ,IAChC,UAAAI,SAASC,cAAT,oBAAoCL,WAApC,SAA+CM,eAAe,CAC1DC,SAAU,WAoB2CC,CAAmBL,EAAKH,UACxDG,EAAKhP,c,+nDC7D/B,IAAMsP,GAAQ3M,IAAOC,IAAV,MAYL2M,GAAY5M,IAAOC,IAAV,MAED,qBAAGxH,MAAkB4G,MAAM,MAE7B,qBAAG5G,MAAkBoG,MAAM1P,YAIxC0d,GAAqBjN,YAAH,MAET,qBAAGnH,MAAkB4G,MAAM,MAClB,qBAAG5G,MAAkBgC,OAAOG,WACvC,qBAAGnC,MAAkBgC,OAAOM,aAI5B+R,GAAc9M,IAAOC,IAAV,KAClB4M,IAIK,qBAAGpU,MAAkB4G,MAAM,MASzB0N,GAAY/M,IAAOC,IAAV,KAChB4M,IAEA,gBAAwBG,EAAxB,EAAGC,oBAAoCxU,EAAvC,EAAuCA,MAAvC,OACGuU,EAIK,GAHApN,YADN,KAEqBnH,EAAM4G,MAAM,GAAQ5G,EAAM4G,MAAM,OAKzC,gBAAG5G,EAAH,EAAGA,MAAH,SAAUwU,oBAA0DxU,EAAM4G,MAAM,GAAK,IAGnGgH,IACuB,gBAAG5N,EAAH,EAAGA,MAAH,SAAUwU,oBACM,EAAjBxU,EAAM4G,MAAM,GAAS,IAG3CkG,GAAaE,GAIbmB,GAIAlB,IAES,qBAAGjN,MAAkB4G,MAAM,KAIpC8G,GAAyBV,ICvBhByH,GAlCoB,SAAC3J,GAAmC,IAC3DpU,EAAaoU,EAAbpU,SAEFgB,EAAWyJ,KACX2O,EAAiBpa,GAAiBkH,IAClCmQ,EAAUrX,GAAiBkC,GAAkDlB,IAAWH,MAExFkB,EAAQ4J,KAPoD,EAQrC7J,EAAmBd,EAAUe,GAAlDM,EAR0D,EAQ1DA,MAAOC,EARmD,EAQnDA,UAEf,OACI,oCACI,kBAACmc,GAAD,KACI,kBAAC,GAAD,CAAe7a,MAAO5C,EAASkO,MAAO2K,MAAO7Y,EAAS6Y,QAErDvX,GACG,kBAAC+V,GAAD,KACI,kBAAC,GAAD,CAAMna,KAAK,QAAQ0Y,MAAM,UACxBvU,IAKb,kBAACuc,GAAD,CAAW9b,GAAIC,EAAoB/B,GAAW8d,qBAAmB,GAC7D,kBAAC,GAAD,CACIzH,QAASA,IAAW,EACpBjR,SAAUgU,EACVlB,QAAS,kBAAMnT,EAAoB/E,EAAUgB,GAAWqV,SCoC7D2H,GA9DsB,SAAC5J,GAAmC,IAC7DpU,EAAaoU,EAAbpU,SACFgB,EAAWyJ,KACX2O,EAAiBpa,GAAiBkH,IAClCP,EAAc3G,GAAiBkC,GAAoDlB,IAAWnB,OAE9FkC,EAAQ4J,KANsD,EAOvC7J,EAAmBd,EAAUe,GAAlDM,EAP4D,EAO5DA,MAAOC,EAPqD,EAOrDA,UAEf,OACI,oCACI,kBAACmc,GAAD,KACI,kBAAC,GAAD,CAAe7a,MAAO5C,EAASkO,MAAO2K,MAAO7Y,EAAS6Y,QAErDvX,GACG,kBAAC+V,GAAD,KACI,kBAAC,GAAD,CAAMna,KAAK,QAAQ0Y,MAAM,UACxBvU,IAKb,kBAACuc,GAAD,CAAW9b,GAAIC,EAAoB/B,GAAW8d,qBAAmB,GACrC,UAAvB9d,EAASS,WACNT,EAASiI,QAAQ9I,KAAI,SAACgJ,GAAD,OACjB,kBAAC4O,GAAD,CACI9T,IAAKkF,EAAOrG,GACZoW,QAAS,kBACJkB,GAAkB1T,GAAsB1F,EAAUgB,EAAU2E,EAAawC,EAAOrG,KAErFsD,SAAUgU,GAEV,kBAAC9C,GAAD,CAAaD,QAAS1Q,EAAYxF,SAASgI,EAAOrG,MAClD,kBAAC,GAAD,CAAec,MAAOuF,EAAO+F,MAAO2K,MAAO1Q,EAAO0Q,YAItC,UAAvB7Y,EAASS,WACNT,EAASiI,QAAQ9I,KAAI,SAACgJ,GAAD,OACjB,kBAAC,GAAD,CACIlF,IAAKkF,EAAOrG,GACZuU,QAAS1Q,EAAYxF,SAASgI,EAAOrG,IACrCoW,QAAS,kBAAMxS,GAAsB1F,EAAUgB,EAAU2E,EAAawC,EAAOrG,KAC7EsD,SAAUgU,GAEV,kBAAC,GAAD,CAAexW,MAAOuF,EAAO+F,MAAO2K,MAAO1Q,EAAO0Q,YAItC,WAAvB7Y,EAASS,WACN,kBAAC,GAAD,CACIwH,QAASjI,EAASiI,QAClByR,iBAAkB/T,EAAY,GAC9BgU,eAAgB,SAAC9Z,GAAD,OAAW6F,GAAsB1F,EAAUgB,EAAU2E,EAAa9F,IAClFuF,SAAUgU,OCnBnB6E,GArCY,SAAC7J,GAAmC,IACnDpU,EAAaoU,EAAbpU,SAEFgB,EAAWyJ,KACX2O,EAAiBpa,GAAiBkH,IAChCrG,EAAUb,GAAiBkC,GAA0ClB,IAArEH,MAEFkB,EAAQ4J,KAP4C,EAQhB7J,EAAmBd,EAAUe,GAA/DM,EARkD,EAQlDA,MAAOC,EAR2C,EAQ3CA,UAAWC,EARgC,EAQhCA,YAE1B,OACI,oCACI,kBAACkc,GAAD,KACI,kBAAC,GAAD,CAAe7a,MAAO5C,EAASkO,MAAO2K,MAAO7Y,EAAS6Y,QAErDvX,GACG,kBAAC+V,GAAD,KACI,kBAAC,GAAD,CAAMna,KAAK,QAAQ0Y,MAAM,UACxBvU,IAKb,kBAACuc,GAAD,CAAW9b,GAAIC,EAAoB/B,GAAW8d,qBAAmB,GAC7D,kBAAC5G,GAAD,CACIrX,MAAOA,EACP+Z,YAAa5Z,EAAS4Z,aAAe,GACrCxC,QAAS9V,EACTmE,SAAU,SAACgT,GAAD,OAAW7T,EAAmB5E,EAAUgB,EAAUyX,EAAM7F,OAAO/S,QACzEwa,OAAQ9Y,EACR6D,SAAUgU,OCJf8E,GA3Ba,SAAC9J,GAAmC,IACpDpU,EAAaoU,EAAbpU,SACFgB,EAAWyJ,KACX2O,EAAiBpa,GAAiBkH,IAChCrG,EAAUb,GAAiBkC,GAA2ClB,IAAtEH,MAEFkc,EAA2F,eAC1F/W,GAA6BhF,EAAUgB,EAAUnB,GADyC,CAE7FuF,SAAUgU,IAGd,OACI,oCACI,kBAACqE,GAAD,KACI,kBAAC,GAAD,CAAe7a,MAAO5C,EAASkO,MAAO2K,MAAO7Y,EAAS6Y,SAG1D,kBAAC+E,GAAD,CAAW9b,GAAIC,EAAoB/B,GAAW8d,oBAA4C,UAAvB9d,EAASS,WAChD,WAAvBT,EAASS,WACN,kBAAC,GAAD,iBAAYsb,EAAZ,CAAyBzW,UAAWtF,EAASsF,UAAWmV,WAAS,KAE7C,UAAvBza,EAASS,WAAyB,kBAAC,GAAgBsb,MChC9DoC,GAA2B,SAACne,GAC9B,OAAQA,EAAS9C,MACb,KAAKN,EAAcgD,OACf,OAAO,kBAAC,GAAD,CAA4BqD,IAAKjD,EAAS8B,GAAI9B,SAAUA,IACnE,KAAKpD,EAAc6C,SACf,OAAO,kBAAC,GAAD,CAA8BwD,IAAKjD,EAAS8B,GAAI9B,SAAUA,IACrE,KAAKpD,EAAckD,KACf,OAAO,kBAAC,GAAD,CAAoBmD,IAAKjD,EAAS8B,GAAI9B,SAAUA,IAC3D,KAAKpD,EAAc+C,MACf,OAAO,kBAAC,GAAD,CAAqBsD,IAAKjD,EAAS8B,GAAI9B,SAAUA,MA2BrDoe,GAlBO,SAAChK,GAAmC,IAC9C1R,EAAU0R,EAAV1R,MACR,OACI,kBAAC8a,GAAD,KACK9a,EAAM2b,oBACH,kBAACV,GAAD,KACKjb,EAAM2b,mBAAmBlf,KAAI,SAACmf,GAAD,OAC1B,yBAAKrb,IAAKqb,GAAUA,OAI/B5b,EAAMC,UAAUxD,IAAIgf,IAErB,kBAACP,GAAD,QC1BNW,GAAqB,SAACve,GACxB,OAAQA,EAAS9C,MACb,KAAKN,EAAcgD,OACf,OAAO,kBAAC,GAAD,CAAsBqD,IAAKpB,EAAkB7B,GAAWA,SAAUA,IAC7E,KAAKpD,EAAc6C,SACf,OAAO,kBAAC,GAAD,CAAwBwD,IAAKpB,EAAkB7B,GAAWA,SAAUA,IAC/E,KAAKpD,EAAckD,KACf,OAAO,kBAAC,GAAD,CAAcmD,IAAKpB,EAAkB7B,GAAWA,SAAUA,IACrE,KAAKpD,EAAc+C,MACf,OAAO,kBAAC,GAAD,CAAesD,IAAKpB,EAAkB7B,GAAWA,SAAUA,MA4C/Dwe,GAxCW,WACtB,IAAMtf,EAASF,IAAiB,SAACC,GAAD,OAAWA,EAAMC,UACjD,OAAKA,EAAOsD,OAAO9C,OAEf,kBAACkS,GAAD,CAAW6M,GAAI,GACVvf,EAAOsD,OAAOrD,KAAI,SAACuD,EAAOmQ,GAAR,OACf,kBAACT,GAAD,CACInP,IAAK4P,EACLR,cAAeQ,EAAI,EACnBP,YAAa5P,EAAM4P,YACnBC,wBAAyB7P,EAAMgc,iBAE/B,kBAAC3M,GAAD,MACA,kBAACnB,GAAD,CAAcF,cAAehO,EAAM2W,MAAQ3W,EAAM2W,MAAMC,WAAa,aAAUlV,GAC1E,6BACK1B,EAAMwL,OAAS,kBAAC+D,GAAD,KAASvP,EAAMwL,OAC9BxL,EAAMiN,aACH,kBAACwC,GAAD,KACI,0BAAMwM,wBAAyB,CAAEC,OAAQlc,EAAMiN,iBAK1DjN,EAAM2W,OACH,kBAAC1I,GAAD,CAAO4I,IAAK7W,EAAM2W,MAAMzV,IAAKoN,gBAAiBtO,EAAM2W,MAAMvD,KAAM0D,IAAK9W,EAAM2W,MAAMG,OAIxF9W,EAAMmc,WACH,kBAAC,GAAD,CAAenc,MAAOA,IAEtB,6BAAMA,EAAMC,UAAUxD,IAAIof,SAItC,kBAAC,GAAD,OAjC0B,MCxBhCO,GAAgB,SAACnhB,GAAD,OAA+BohB,KAAKC,OAAOrhB,EAAY+K,KAAKC,OAAS,MAK9EsW,GAAkB,WAC3B,IAAM7X,EAAmBpI,IAAiB,SAACC,GAAD,OAAWA,EAAMkH,OAAOiB,oBADlB,EAEdmR,mBAASnR,EAAmB0X,GAAc1X,GAAoB,MAFhD,mBAEzC8X,EAFyC,KAE9BC,EAF8B,KAG1CC,EAAgBC,mBAetB,OAbArF,qBAAU,WACD5S,IACDgY,EAAcE,SAASC,cAAcH,EAAcE,SACvDF,EAAcE,QAAUE,aAAY,WAChC,IAAMC,EAAeX,GAAc1X,GAC/BqY,GAAgB,GAChBF,cAAcH,EAAcE,SAEhCH,EAAaM,KACd,QAEJ,CAACrY,IAEG8X,G,qICxBJ,IAAMQ,GAAS7O,IAAOK,QAAV,KACbhB,MAKNwP,GAAOvO,aAAe,CAClBC,QAAS,EACTC,SAAU,EACVC,SAAU,CAAEzB,GAAI,EAAGG,GAAI,I,qkCCTpB,IAAM2P,GAAU9O,IAAOC,IAAV,MAEP,qBAAGxH,MAAkB0E,MAAMc,oBACrB,qBAAGxF,MAAkB0E,MAAMc,oBAIjC8Q,GAAO/O,IAAOC,IAAV,MAIJ,gBAAGxH,EAAH,EAAGA,MAAH,qBAAuBA,EAAM0E,MAAMc,iBAAnC,cAAyDxF,EAAM0E,MAAMe,sBAArE,YACC,gBAAGzF,EAAH,EAAGA,MAAH,qBAAuBA,EAAM0E,MAAMc,iBAAnC,cAAyDxF,EAAM0E,MAAMe,sBAArE,YACA,gBAAGzF,EAAH,EAAGA,MAAH,gBAAkBA,EAAM0E,MAAMe,sBAA9B,kBAA6DzF,EAAMgC,OAAOyC,qBAEhE,qBAAG8R,SAErB,qBAAGC,iBAEDrP,YADe,KAEasP,QAMnB,gBAAGzW,EAAH,EAAGA,MAAH,qBAAuBA,EAAM0E,MAAMc,iBAAnC,cAAyDxF,EAAM0E,MAAMe,sBAArE,YACC,gBAAGzF,EAAH,EAAGA,MAAH,qBAAuBA,EAAM0E,MAAMc,iBAAnC,cAAyDxF,EAAM0E,MAAMe,sBAArE,YACD,qBAAGzF,MAAkB0E,MAAMe,yBAC5B,qBAAGzF,MAAkB0E,MAAMe,yBACzB,gBAAGzF,EAAH,EAAGA,MAAH,gBAAkBA,EAAM0E,MAAMe,sBAA9B,kBAA6DzF,EAAMgC,OAAOwC,sBAQ/EkS,GAAUnP,IAAOC,IAAV,MCbLmP,GAfS,SAAC7L,GAAmC,IAChD8L,EAAmC9L,EAAnC8L,eAAgBtd,EAAmBwR,EAAnBxR,MAAOud,EAAY/L,EAAZ+L,QAGzBN,EADW,IACHK,EACRE,EAAerB,KAAK7Z,IAAI,EAAG6Z,KAAK9Z,IAAI4a,EAFzB,MAIjB,OACI,kBAACF,GAAD,KACI,kBAACC,GAAD,CAAMC,MAAOO,EAAcN,gBAAiBK,IAC5C,kBAACH,GAAD,KAAUpd,K,+kCCpBf,ICHKyd,GDGCV,GAAU9O,IAAOC,IAAV,MAEP,qBAAGxH,MAAkB0E,MAAMc,oBAC1B,qBAAGxF,MAAkB0E,MAAMc,oBAU5BwR,GAAczP,IAAOC,IAAV,MAEX,gBAAGxH,EAAH,EAAGA,MAAH,sBAAwBA,EAAM0E,MAAMc,iBAApC,cAA0DxF,EAAM0E,MAAMe,sBAAtE,aACC,gBAAGzF,EAAH,EAAGA,MAAH,sBAAwBA,EAAM0E,MAAMc,iBAApC,cAA0DxF,EAAM0E,MAAMe,sBAAtE,aACU,qBAAG8Q,SAEb,qBAAGvW,MAAkB0E,MAAMe,yBACd,gBAAG7R,EAAH,EAAGA,KAAMoM,EAAT,EAASA,MAAT,MACV,WAATpM,EAAoBoM,EAAMgC,OAAOwC,kBAAoBxE,EAAMgC,OAAOyC,oBAEpE,qBAAG+R,iBAEDrP,YADe,KAEasP,QAMvBQ,GAAW1P,IAAOC,IAAV,MAER,gBAAGxH,EAAH,EAAGA,MAAH,sBACIA,EAAM0E,MAAMc,iBADhB,eACuCxF,EAAM0E,MAAMe,sBADnD,cAJQ,EAIR,eAEC,gBAAGzF,EAAH,EAAGA,MAAH,sBACGA,EAAM0E,MAAMc,iBADf,eACsCxF,EAAM0E,MAAMe,sBADlD,cANO,EAMP,cANO,KAUP,gBAAGzF,EAAH,EAAGA,MAAH,sBAAwBA,EAAM0E,MAAMe,sBAApC,cAVO,EAUP,cACa,qBAAGzF,MAAkBgC,OAAOE,QAI1CwU,GAAUnP,IAAOC,IAAV,MECL0P,GArCS,SAACpM,GAAmC,IAChD8L,EAAmC9L,EAAnC8L,eAAgBtd,EAAmBwR,EAAnBxR,MAAOud,EAAY/L,EAAZ+L,QAGzBN,EADW,IACHK,EACRE,EAAerB,KAAK7Z,IAAI,EAAG6Z,KAAK9Z,IAAI4a,EAFzB,MAIXY,EAAQ,IAAI9E,MAAM,GAAG3H,KAAK,IAEhC,OACI,kBAAC,GAAD,KACKyM,EAAMthB,KAAI,SAAC2U,EAAGnM,GAAJ,OACP,kBAAC2Y,GAAD,CAEIrd,IAAK0E,EACLzK,KAAK,SACL2iB,MAAOO,IAAiBzY,EAAQ,GAAK8Y,EAAM/gB,QAC3CogB,gBAAiBK,OAIxBM,EAAMthB,KAAI,SAAC2U,EAAGnM,GAAJ,OACP,kBAAC2Y,GAAD,CAEIrd,IAAK0E,EACLzK,KAAK,QACL2iB,QAvBC,IAuBmBO,KAAkBzY,EAAQ,GAAK8Y,EAAM/gB,QACzDogB,gBAAiBK,OAIzB,kBAACI,GAAD,MACA,kBAAC,GAAD,KAAU3d,KCjChB8d,GAAkB,SAAC7gB,EAAe8gB,EAAwBC,GAE5D,OACMA,EAAa,GAAKA,EAAa,KAAOD,EAAa,GAAKA,EAAa,KAAQ9gB,EAAQ8gB,EAAa,IACpGC,EAAa,IAoFNC,GA5EK,SAACzM,GAAmC,IAC5ClV,EAAWkV,EAAXlV,OACF2E,EAAQ7E,IAAiB,SAACC,GAAD,OAAWA,EAAMkH,OAAOtC,SACjD+W,EAAS5b,IAAiB,SAACC,GAAD,OAAWA,EAAMC,OAAOiH,OAAOoD,aAAe,CAAC,EAAG,MAE5EuX,ECzByB,WAAgB,IAAD,EACpBvI,oBAAS,GADW,mBACvC1Y,EADuC,KAChCkhB,EADgC,KAK9C,OAHA/G,qBAAU,WACN+G,GAAS,KACV,IACIlhB,EDoBkBmhB,GACnB9B,EAAYD,KAGZjD,EAAYqD,mBACZ4B,EAAQ5B,iBAAO,GAV8B,EAWP9G,mBAASrZ,EAAOihB,QAAUvF,EAAO,GAAK/W,GAX/B,mBAW5Cqd,EAX4C,KAW5BC,EAX4B,KAYnDnH,qBAAU,WACD9a,EAAOihB,SAMZgB,EAAkBvG,EAAO,IACzBqG,EAAM3B,QAAU,EACZtD,EAAUsD,SAASC,cAAcvD,EAAUsD,SAG/CtD,EAAUsD,QAAUE,aAAY,WAC5B,GAAIyB,EAAM3B,ShDtBoB,GgDyB1B,OAFAC,cAAcvD,EAAUsD,cACxB6B,EAAkBtd,GAGtBod,EAAM3B,QAAU2B,EAAM3B,QAAU,EAChC6B,EAAkBtd,GAASod,EAAM3B,QhD5BH,OACA,KgDU9B6B,EAAkBtd,KAoBvB,CAACA,IAGJ,IAAMud,EAAaliB,EAAO0D,MAAMe,MAAM,IAAIT,OAAO,uBAC3CN,EACF9D,EACIsiB,EACKjiB,KAAI,SAACW,EAAM6H,GACR,OAAIA,EAAQ,IAAM,EAAU7H,EACxBsD,OAAOC,MAAM6d,GAAwB,SAC5B9c,IAATtE,EAA2Bif,KAAKC,MAAMkC,GACnCnC,KAAKC,MAAM0B,GAAgBQ,EAAgBtG,EAAQ,CAAC,EAAG/S,SAAS/H,SAE1EuhB,KAAK,IACV,CAAEnC,eACD,GAET,OACI,kBAACQ,GAAD,KACsB,UAAjBxgB,EAAOuK,OAAqB,kBAACwI,GAAD,KAASrP,GACpB,gBAAjB1D,EAAOuK,OAA2B,kBAAC0I,GAAD,KAAcvP,GAC/B,oBAAjB1D,EAAOuK,OACJ,kBAAC,GAAD,CACIyW,eAAgBY,EAAmBJ,GAAgB7c,EAAO+W,EAAQ,CAAC,EAAG,IAAM,EAC5EhY,MAAOA,EACPud,QAAS/L,EAAMlV,OAAOihB,UAGZ,oBAAjBjhB,EAAOuK,OACJ,kBAAC,GAAD,CACIyW,eAAgBY,EAAmBJ,GAAgB7c,EAAO+W,EAAQ,CAAC,EAAG,IAAM,EAC5EhY,MAAOA,EACPud,QAAS/L,EAAMlV,OAAOihB,a,SFzF9BE,K,cAAAA,E,YAAAA,E,mBAAAA,Q,KIGL,IAAMiB,GAAc,SAAC/Z,GAAD,MAAsC,CAC7DrK,KAAM,eACNqK,aC6DWga,GAlDM,SAACC,GAClB,IAAMxgB,EAAWyJ,KACX9I,EAAW3C,IAAiB,SAACC,GAAD,OAAWA,EAAMC,OAAO4C,MACpD+B,EAAQ7E,IAAiB,SAACC,GAAD,OAAWA,EAAMkH,OAAOtC,SACjDoC,EAAUjH,IAAiB,SAACC,GAAD,OAAWA,EAAMgH,QAAQjJ,QAJH,EAM1B+B,EAAU,CAAC,oBAAqB,0BANN,mBAMhDmP,EANgD,KAMzCyB,EANyC,OAQ/B4I,mBAAiC,MARF,mBAQhD/U,EARgD,KAQ1Cie,EAR0C,OASzBlJ,oBAAS,GATgB,mBAShDmJ,EATgD,KASvCC,EATuC,KAYjDC,EAA2B,CAAEjgB,WAAUkC,QAAOoC,WAC9ChG,EAAOiE,KAAKC,UAAUyd,GAGtBvd,EAAUwd,sBACZvZ,mBAAQ,uCAAC,WAAO1E,EAAoBJ,GAA3B,eAAAC,EAAA,6DACLke,GAAW,GADN,SAGgBre,EAAiCM,EAAKJ,GAHtD,UAGC2C,EAHD,+BAODsb,EAAQ,MACRE,GAAW,GAEXpd,QAAQlD,MAAM,iCACdL,EACIsgB,GAAY,CAAC,CAAEpkB,KAAMmjB,GAAahf,MAAO6M,MAAOA,GAAS,GAAIyB,YAAaA,GAAe,OAZ5F,2BAmBL8R,EAAQtb,GACRwb,GAAW,GApBN,4CAAD,wDAqBL,KACH,IAQJ,OALA3H,qBAAU,WACN3V,EAAQmd,EAASI,KAElB,CAACJ,EAASvhB,IAEN,CAAEuD,OAAMke,Y,03CC1DnB,IAGanQ,GAAQV,IAAOW,GAAV,MAELsQ,GAAOjR,IAAOC,IAAV,MAKF,qBAAGxH,MAAkB4G,MAAM,MAClB,qBAAG5G,MAAkBgC,OAAOG,WACvC,qBAAGnC,MAAkBgC,OAAOM,aACpB,qBAAGtC,MAAkB0E,MAAMC,SAC1CyJ,MAENoK,GAAK3Q,aAAe,CAChBuG,MAAO,CAAE7H,GAAI,EAAGE,GAAI,MAGjB,IAAMgS,GAAgBlR,IAAOC,IAAV,KAKhBoL,GAAexG,GAECsM,GACCA,IAIdrC,GAAU9O,IAAOC,IAAV,KAKdmR,KAGIvK,MAGViI,GAAQxO,aAAe,CACnBuG,MAAO,CAAE7H,GAAI,EAAGE,GAAI,KACpBmS,cAAe,CAAErS,GAAI,SAAUE,GAAI,QAGhC,IAAMoS,GAAStR,IAAOC,IAAV,MAGD,qBAAGxH,MAAkB4G,MAAM,KACvCwH,KACAuK,MAENE,GAAOhR,aAAe,CAClBuG,MAAO,CAAE7H,GAAI,EAAGE,GAxDC,KAyDjBmS,cAAe,CAAErS,GAAI,MAAOE,GAAI,UAChCqS,eAAgB,CAAEvS,GAAI,SAAUE,GAAI,eAGjC,IAAMsS,GAAaxR,IAAOC,IAAV,MAGH,qBAAGxH,MAAkB4G,MAAM,MAC1B,qBAAG5G,MAAkB4G,MAAM,MAGnCoS,GAAezR,IAAOC,IAAV,MAIL,qBAAGxH,MAAkB4G,MAAM,MACvB,qBAAG0F,S,iBCjCZ2M,GAjCD,SAACnO,GACX,IAAMoO,EAAenD,iBAAsB,MA0B3C,OAtBArF,qBAAU,WACN,IAAMyI,EAAS,CAAE9d,IAAK,GAAIwW,MAAO,GAAIuH,OAAQ,GAAIxH,KAAM,IAGvD,GAAKsH,EAAalD,QAClB,OAAQlL,EAAMlX,MACV,IAAK,QCTY,SACzBylB,EACAC,EACAlL,EACAmL,EACAJ,EACAK,GAEA,IAAMC,EAAeJ,EAAU9jB,OAAOmkB,MAAK,SAACvf,EAAGwf,GAAJ,OAAUxf,EAAEyf,EAAID,EAAEC,KAGvD1f,EAAyBmf,EAAUQ,OACpCrd,QAAO,SAACoX,GAAD,MtDEgB,csDFNA,EAAKpb,MACtB3C,KAAI,SAAC+d,GACF,IAAMkG,EAAiBL,EAAatgB,QAKlC,SAACzF,EAAMqmB,GAOL,YANuBjf,IAAnBif,EAAMnG,EAAKpb,KACX9E,EAAK8f,KAAK,CACNoG,EAAGG,EAAMH,EACTI,EAAGD,EAAMnG,EAAKpb,MAGf9E,IACR,IAEH,OAAO,eACAkgB,EADP,CAEIgG,EAAGE,EAAejkB,KAAI,SAACkkB,GAAD,OAAWA,EAAMH,KACvCI,EAAGF,EAAejkB,KAAI,SAACkkB,GAAD,OAAWA,EAAMC,UAK7CC,EAAMC,aAAOZ,GACnBW,EAAIE,UAAU,KAAKC,SA/BZ,MAkCcC,aAAOZ,GAAc,SAAC9O,GAAD,OAAOA,EAAEiP,KAlC5C,mBAkCAU,EAlCA,KAkCMC,EAlCN,KAmCDC,EAASC,eACVnJ,OAAO,CAACgJ,GAAQ,EAAGC,GAAQ,IAC3BlkB,MAAM,CAAC8iB,EAAOvH,KAAMxD,EAAQ+K,EAAOtH,QAGxCoI,EAAIS,OAAO,KACNC,KAAK,QAAS,UACdA,KAAK,YAFV,sBAEsCpB,EAASJ,EAAOC,OAFtD,MAGKxP,KACGgR,aAAWJ,GACNxI,MAAM5D,EAAQoL,GACdqB,cAAc,IAEtBjR,MAAK,SAACxQ,GAAD,OACFA,EACK8gB,OAAO,2BACPY,QACAH,KAAK,KAAM,IACXA,KAAK,cAAe,OACpBA,KAAK,cAAe,QACpBnkB,KAAK6iB,EAAU0B,WAI5B,IAAMC,EAAOrf,aAAIzB,GAAM,SAAC2f,GAAD,OAAYle,aAAIke,EAAOG,OAAO,EAC/CiB,EAAOrf,aAAI1B,GAAM,SAAC2f,GAAD,OAAYje,aAAIie,EAAOG,OAAO,EAC/CkB,EAAST,eACVnJ,OAAO,CAAC0J,EAAMC,IACd5kB,MAAM,CAACkjB,EAASJ,EAAOC,OAAQD,EAAO9d,MACtC8f,OAGLlB,EAAIS,OAAO,KACNC,KAAK,QAAS,UACdA,KAAK,YAFV,oBAEoCxB,EAAOvH,KAF3C,QAGKhI,KAAKwR,aAASF,IACdtR,MAAK,SAACxQ,GAAD,OACFA,EACK8gB,OAAO,2BACPY,QACAH,KAAK,IAAK,GACVA,KAAK,cAAe,SACpBA,KAAK,cAAe,QACpBnkB,KAAK6iB,EAAUgC,WAaVpB,EACbS,OAAO,KACPC,KAAK,QAAS,aACdA,KAAK,OAAQ,QACbA,KAAK,eAAgB,KACrBA,KAAK,kBAAmB,SACxBA,KAAK,iBAAkB,SAIvBR,UAAU,QACVjgB,KAAKA,GACL6d,KAAK,QACL4C,KAAK,UAAU,SAACd,GAAD,OAAYA,EAAOvN,SAClCqO,KAAK,KAvBO,SAACd,GAKd,OAJiByB,eACZ1B,GAAE,SAACA,GAAD,OAAOY,EAAOZ,MAChBI,GAAE,SAACxP,EAAGnM,GAAJ,OAAc6c,EAAOrB,EAAOG,EAAE3b,MAE9Bkd,CAAS1B,EAAOD,MAqB3B,IAAM4B,EAAkBnC,EAAUQ,OAAO7c,MAAK,SAAC4W,GAAD,MtDrGlB,csDqG4BA,EAAKpb,MACzDgjB,GACcnC,EAAU9jB,OAAO4D,QAAwB,SAACzF,EAAM6C,GAO1D,OANIA,EAAMklB,WACN/nB,EAAK8f,KAAK,CACNoG,EAAGrjB,EAAMqjB,EACTtN,OAA2B,IAApB/V,EAAMklB,UAAqBD,EAAgBlP,MAAQ/V,EAAMklB,YAGjE/nB,IACR,IAGGiO,SAAQ,SAAC2Z,GAAD,OACVrB,EACKS,OAAO,QACPC,KAAK,KAAMH,EAAOc,EAAK1B,IACvBe,KAAK,KAAMxB,EAAO9d,KAClBsf,KAAK,KAAMH,EAAOc,EAAK1B,IACvBe,KAAK,KAAMpB,EAASJ,EAAOC,QAC3BjZ,MAAM,eAAgB,GACtBA,MAAM,SAAUmb,EAAKhP,OACrBnM,MAAM,OAAQ,WD/Hfub,CACI5Q,EAAM5Q,KACNgf,EAAalD,QAZf,IACC,IAcCmD,EAVO,IAaX,MACJ,IAAK,OE1BW,SACxBE,EACAC,EACAlL,EACAmL,EACAJ,GAGA,IAAMc,EAAMC,aAAOZ,GACnBW,EAAIE,UAAU,KAAKC,SAEnB,IAAMuB,EAAavN,EAAQ+K,EAAOtH,MAC5B+J,EAAcrC,EAASJ,EAAOC,OAAS,GACvCyC,EAAaxC,EAAU9jB,OAAOM,KAAI,SAAC8U,GAAD,OAAOA,EAAEiP,KAI3CY,EAASsB,eACVxK,OAAOuK,GACPxlB,MAAM,CAAC8iB,EAAOvH,KAAM+J,IACpBI,QANc,IASL9B,EACTS,OAAO,KACPC,KAAK,QAAS,UACdA,KAAK,YAHI,sBAGwBiB,EAHxB,MAIThS,KAAKgR,aAAWJ,IAIhBE,OAAO,QACPC,KAAK,IAAKvM,EAAQ,EAAI+K,EAAOvH,KAAO,GACpC+I,KAAK,IAAK,IACVA,KAAK,cAAe,UACpBA,KAAK,cAAe,QACpBA,KAAK,OAAQ,gBACbnkB,KAAK6iB,EAAU0B,QA/Bb,MAkCc1B,EAAU9jB,OAAO4D,QAClC,SAAC5D,EAAQwkB,GACgCA,EAA7BH,EAA6BG,EAA1B0B,UADK,IACSO,EADV,aACsBjC,EADtB,mBAIf,MAAO,CAFKtE,KAAK9Z,IAAL,MAAA8Z,KAAI,CAAKlgB,EAAO,IAAZ,mBAAoBiE,OAAOjE,OAAOymB,MACtCvG,KAAK7Z,IAAL,MAAA6Z,KAAI,CAAKlgB,EAAO,IAAZ,mBAAoBiE,OAAOjE,OAAOymB,SAGtD,CAACliB,OAAOmiB,iBAAkBniB,OAAOoiB,mBAzC9B,mBAkCAlB,EAlCA,KAkCMC,EAlCN,KA4CDC,EAAST,eAAcnJ,OAAO,CAAC0J,EAAMC,IAAO5kB,MAAM,CAACulB,EAAazC,EAAO9d,MAAM8f,OAGnFlB,EAAIS,OAAO,KACNC,KAAK,QAAS,UACdA,KAAK,YAFV,oBAEoCxB,EAAOvH,KAF3C,QAGKhI,KAAKwR,aAASF,IACdtR,MAAK,SAACxQ,GAAD,OACFA,EACK8gB,OAAO,2BACPY,QACAH,KAAK,IAAK,GACVA,KAAK,cAAe,SACpBA,KAAK,cAAe,QACpBnkB,KAAK6iB,EAAUgC,WAG5B,IAGIc,EAHEC,EAAiB/C,EAAUQ,OAAOrd,QAAO,SAACoX,GAAD,MvD9CnB,cuD8C6BA,EAAKpb,MAAyBpC,OAIjFolB,EAAkBnC,EAAUQ,OAAO7c,MAAK,SAAC4W,GAAD,MvDlDlB,cuDkD4BA,EAAKpb,MAC7D,GAAIgjB,IACAW,EAAa9C,EAAU9jB,OAAO4D,QAAwB,SAACzF,EAAM6C,GAOzD,OANIA,EAAMklB,WACN/nB,EAAK8f,KAAK,CACN6I,SAAU9lB,EAAMqjB,EAChBtN,OAA2B,IAApB/V,EAAMklB,UAAqBD,EAAgBlP,MAAQ/V,EAAMklB,YAGjE/nB,IACR,IAGC0oB,EAAiB,GAAG,CACpB,IAAME,EAAiBrC,EAAIS,OAAO,KAAKC,KAAK,QAAS,aAC/C4B,EAxEK,GAwE2B/B,EAAOgC,YAAc,EAC3DL,EAAWxa,SAAQ,SAAC8Z,GAChBa,EACK5B,OAAO,QACPC,KAAK,OAAQc,EAAUnP,OACvBqO,KAAK,IAAKH,EAAOiB,EAAUY,UAAaE,GACxC5B,KAAK,IAAKxB,EAAO9d,KACjBsf,KAAK,QAASH,EAAOgC,YAAiC,EAAnBD,GACnC5B,KAAK,SAAUiB,EAAczC,EAAO9d,QAOrD,IAAMjC,EAAQ6gB,EAAIS,OAAO,KAAKC,KAAK,QAAS,YACtC8B,EAAWjC,EAAOgC,YAAcnD,EAAUQ,OAAOrd,QAAO,SAACoX,GAAD,MvDjFlC,cuDiF4CA,EAAKpb,MAAyBpC,OACtGijB,EAAU9jB,OAAOoM,SAAQ,SAACoY,GAAW,IACzBH,EAA6BG,EAA7BH,EAAiBoC,GAAYjC,EAA1B0B,UADqB,aACK1B,EADL,oBAEhCvgB,OAAOC,QAAQuiB,GAASra,SAAQ,WAActD,GAAW,IAMjDqe,EANgD,mBAAtBlkB,EAAsB,KAAlBjC,EAAkB,KAC9CsjB,EAASR,EAAUQ,OAAO7c,MAAK,SAAC6c,GAAD,OAAYA,EAAOrhB,KAAOA,KAEzDmkB,EAASnC,EAAOZ,GAAM6C,EAAWpe,EAIjCue,EAAmBT,EAAWnf,MAAK,SAAC4W,GAAD,OAAUA,EAAKyI,WAAazC,KAEjE8C,EADmB,IAAnBN,GAAwBQ,EACbA,EAAiBtQ,MAEpB,OAAGuN,QAAH,IAAGA,OAAH,EAAGA,EAAQvN,MAGvBlT,EACKshB,OAAO,QACPC,KAAK,QAFV,kBAE8BniB,IACzBmiB,KAAK,OAAQ+B,GACb/B,KAAK,IAAKgC,GACVhC,KAAK,IAAKO,EAAO3kB,IACjBokB,KAAK,QAAS8B,GACd9B,KAAK,SAAUiB,EAAcV,EAAO3kB,UFnGrCsmB,CAAa/R,EAAM5Q,KAAiCgf,EAAalD,QApB/D,IACC,IAmBsFmD,MAGlG,CAACrO,EAAM5Q,KAAM4Q,EAAMlX,OAEf,yBAAKuX,IAAK+N,EAAchO,QAAO,gBAzBxB,IAyBwB,aAxBvB,KAwBsD4R,SAAS,aGkBnEC,GAnCK,SAACjS,GAAmC,IAAD,EACCA,EAAMlV,OAAlDonB,EAD2C,EAC3CA,WAAYC,EAD+B,EAC/BA,QAAS1hB,EADsB,EACtBA,OAAQ2hB,EADc,EACdA,WADc,EAEzBjF,GAAagF,GAA/B/iB,EAF2C,EAE3CA,KAAMke,EAFqC,EAErCA,QAEd,OACI,kBAAChC,GAAD,KACI,kBAACoC,GAAD,KACI,kBAAC,GAAD,KAAQwE,GACR,kBAACvE,GAAD,KACKL,GAAW,kBAACxF,GAAD,CAAQpG,KJzBP,MI0BX4L,IAAYle,GAAQ,kBAAC,GAAD,CAAMtG,KAAK,QAAQ0Y,MAAM,QAAQE,KAAM,KAC5DtS,GACG,kBAAC,GAAD,CAASkU,MAAO8O,EAAa,OAAIpiB,GAC7B,kBAAC,GAAD,CAAOlH,KAAM2H,EAAQrB,KAAMA,KACzBgjB,GACE,kBAACrE,GAAD,KACK3e,EAAK2f,OAAOhkB,KAAI,SAACgkB,GAAD,OACb,kBAACd,GAAD,CAAYpf,IAAKkgB,EAAOrhB,IACpB,kBAACwgB,GAAD,CAAc1M,MAAOuN,EAAOvN,QAC5B,8BAAOuN,EAAOsD,gBC6B3CC,GAzDM,SAACtS,GAAmC,IAC7ClV,EAAWkV,EAAXlV,OAEFyC,EAAW3C,IAAiB,SAACC,GAAD,OAAWA,EAAMC,OAAO4C,MACpD+B,EAAQ7E,IAAiB,SAACC,GAAD,OAAWA,EAAMkH,OAAOtC,SACjDoC,EAAUjH,IAAiB,SAACC,GAAD,OAAWA,EAAMgH,QAAQjJ,QACpDgE,EAAWyJ,KANmC,EAQtB8N,oBAAS,GARa,mBAQ7CmJ,EAR6C,KAQpCC,EARoC,OASxBpJ,oBAAS,GATe,mBAS7CoO,EAT6C,KASrCC,EATqC,KAW9C1H,EAAYD,KACZrc,EAAQ9D,EAAcI,EAAO0D,MAAO,CAAEsc,YAAWrb,UACjD5D,EAAOiE,KAAKC,UAAU8B,GAEtBiS,EAAO,uCAAG,4BAAAzU,EAAA,sDACNG,EAAM9E,EAAcI,EAAO0E,IAAK,CAAEC,UAD5B,KAEJ3E,EAAO2nB,SAFH,OAGH,YAHG,OAMH,aANG,OAYH,SAZG,+BAIJriB,EAAoBxD,GAJhB,mCAOJ2gB,GAAW,GAPP,SAQEre,EAAgBpE,EAAO0E,IAAsB,CAAEjC,WAAUkC,QAAOoC,YARlE,cASJ0b,GAAW,GACXiF,GAAU,GAVN,oCAaA1nB,EAAO4nB,UACPriB,OAAOsiB,KAAKnjB,GAEZa,OAAOqE,SAASC,KAAOnF,EAhBvB,iEAAH,qDA2Bb,OALAoW,qBAAU,WACN2H,GAAW,GACXiF,GAAU,KACX,CAAC/iB,EAAO5D,IAGP,kBAACqc,GAAD,CAAuB0K,GAAI,GAEvB,kBAAC7K,GAAD,CAAQjE,QAASA,EAAS9S,SAAUsc,GAAWiF,EAAQtK,UAAU,SAC5DzZ,EACA8e,GAAW,kBAACxF,GAAD,CAAQpG,KAAM,KACzB6Q,GAAU,kBAAC,GAAD,CAAMzpB,KAAK,a,uHC1D/B,I,SAAM+pB,GAASpW,IAAOqW,OAAV,KAGbrE,MCwCSsE,GAjCM,SAAC/S,GAAmC,IAC7ClV,EAAWkV,EAAXlV,OACF2E,EAAQ7E,IAAiB,SAACC,GAAD,OAAWA,EAAMkH,OAAOtC,SACjDujB,EAAWtoB,EAAcI,EAAO0E,IAAK,CAAEC,UAHO,EAMZ0U,mBAAS6O,GANG,mBAM7CC,EAN6C,KAM/BC,EAN+B,KAO9CC,EAAkB1F,sBACpBvZ,oBAAS,SAAC1E,GAAD,OAAiB0jB,EAAgB1jB,KAAM,KAChD,IAMJ,OAJAoW,qBAAU,WACNuN,EAAgBH,KACjB,CAACA,EAAUG,IAEPC,mBACH,kBACI,kBAAC9H,GAAD,KACI,kBAACuH,GAAD,CACI/Y,MAAM,UACNqL,IAAK8N,EACLxE,OAAQ3jB,EAAO2jB,QAAU,IACzB4E,UAAWvoB,EAAOwoB,cAAgB,UAAOtjB,OAIrD,CAACijB,EAAcnoB,KCERyoB,GA5BK,SAACvT,GAAmC,IAC5ClV,EAAWkV,EAAXlV,OACF2E,EAAQ7E,IAAiB,SAACC,GAAD,OAAWA,EAAMkH,OAAOtC,SACjDujB,EAAWtoB,EAAcI,EAAO0E,IAAK,CAAEC,UAHM,EAMX0U,mBAAS6O,GANE,mBAM5CC,EAN4C,KAM9BC,EAN8B,KAO7CC,EAAkB1F,sBACpBvZ,oBAAS,SAAC1E,GAAD,OAAiB0jB,EAAgB1jB,KAAM,KAChD,IAMJ,OAJAoW,qBAAU,WACNuN,EAAgBH,KACjB,CAACA,EAAUG,IAEPC,mBACH,kBACI,kBAAC9H,GAAD,KACI,kBAAC/O,GAAD,CAAO4I,IAAK8N,EAAcrW,gBAAiB9R,EAAO4W,KAAM0D,IAAKta,EAAOsa,SAG5E,CAAC6N,EAAcnoB,KCvBjBqf,GAAqB,SAACqJ,EAA6BjgB,GACrD,OAAQigB,EAAM1qB,MACV,KAAKJ,EAAmB8F,MACpB,OAAO,kBAAC,GAAD,CAAaK,IAAK0E,EAAOzI,OAAQ0oB,IAC5C,KAAK9qB,EAAmB0S,OACpB,OAAO,kBAAC,GAAD,CAAcvM,IAAK0E,EAAOzI,OAAQ0oB,IAC7C,KAAK9qB,EAAmBuc,MACpB,OAAO,kBAAC,GAAD,CAAapW,IAAK0E,EAAOzI,OAAQ0oB,IAC5C,KAAK9qB,EAAmB+qB,MACpB,OAAO,kBAAC,GAAD,CAAa5kB,IAAK0E,EAAOzI,OAAQ0oB,IAC5C,KAAK9qB,EAAmBoqB,OACpB,OAAO,kBAAC,GAAD,CAAcjkB,IAAK0E,EAAOzI,OAAQ0oB,MAoCtCE,GAhCI,WACf,IAAMtqB,EAAawB,IAAiB,SAACC,GAAD,OAAWA,EAAMkH,OAAO3I,cACtDgM,EAAUxK,IAAiB,SAACC,GAAD,OAAWA,EAAMC,OAAOiH,OAAOqD,WAC1D3F,EAAQ7E,IAAiB,SAACC,GAAD,OAAWA,EAAMkH,OAAOtC,SACjDkkB,EAAe1I,iBAAuB,MAY5C,OpBT6B,WAC7B,IAAMre,EAAWyJ,KACXud,EAAc/I,KACpBjF,qBAAU,WACc,OAAhBgO,GAAwBA,GAAe,GACvCxjB,EAAoBxD,KAEzB,CAACgnB,EAAahnB,IoBRjBinB,GAGAjO,qBAAU,WACF+N,EAAazI,SACbyI,EAAazI,QAAQjC,eAAe,CAAEC,SAAU,aAErD,IAGIkK,mBAAQ,WACX,OAAKhqB,GAAegM,GAAYA,EAAQ9J,OAEpC,kBAACkS,GAAD,CAAW6C,IAAKsT,EAAcG,GAAI,EAAGrW,cAAc,MAC9CrI,EACI1D,QACG,SAAC8hB,GAAD,OACKA,EAAMO,oBACNP,EAAMO,mBAAmB,IAAMtkB,GAASA,GAAS+jB,EAAMO,mBAAmB,MAElFhpB,IAAIof,KATsC,OAYxD,CAAC/gB,EAAYgM,EAAS3F,K,6jCC/C7B,IAEM6a,IAAgD,sBACjD2B,GAAahf,MAAQ,gBAD4B,gBAEjDgf,GAAavL,KAAO,eAF6B,gBAGjDuL,GAAa+H,QAAU,kBAH0B,IAMhDC,IAA4C,sBAC7ChI,GAAahf,MAAQ,sBADwB,gBAE7Cgf,GAAavL,KAAO,qBAFyB,gBAG7CuL,GAAa+H,QAAU,wBAHsB,IAMrCE,IAA0C,sBAClDjI,GAAahf,MAAQ,kBAD6B,gBAElDgf,GAAavL,KAAO,iBAF8B,gBAGlDuL,GAAa+H,QAAU,oBAH2B,IAU1CzI,GAAU9O,IAAOC,IAAV,MAIL,qBAAGxH,MAAkB0F,OAAOzH,YAC5B,qBAAG+B,MAAkB4G,MAAM,KA7BpB,KAkCTqY,GAAU1X,IAAOC,IAAV,MAEP,gBAAGxH,EAAH,EAAGA,MAAH,SAAUsN,KAAmB,GApCpB,IAoCyCtN,EAAM4G,MAAM,MAC7D,qBAAG5G,MAAkB4G,MAAM,MAAQ,qBAAG5G,MAAkB4G,MAAM,MAC7D,qBAAG5G,MAAkB4G,MAAM,MACrB,qBAAG5G,MAAkB4G,MAAM,MACxB,gBAAG5G,EAAH,EAAGA,MAAOpM,EAAV,EAAUA,KAAV,OAAqBoM,EAAMgC,OAAOoT,GAAgBxhB,OAClD,gBAAGoM,EAAH,EAAGA,MAAOpM,EAAV,EAAUA,KAAV,OAAqBoM,EAAMgC,OAAO+c,GAAYnrB,OACjD,qBAAGoM,MAAkB0E,MAAMC,UACnC,gBAAG3E,EAAH,EAAGA,MAAOpM,EAAV,EAAUA,KAAV,OAAqBoM,EAAMgC,OAAOgd,GAAUprB,OACvC,gBAAGoM,EAAH,EAAGA,MAAH,OAAegH,GAAahH,EAAMiG,UAAUlF,YAIjDkH,GAAQV,IAAOC,IAAV,MAILqB,GAActB,IAAOC,IAAV,MAIX0X,GAAe3X,IAAOC,IAAV,MAIX,qBAAGxH,MAAmB4G,MAAM,MAG7BuY,GAAc5X,IAAOC,IAAV,MAEb,qBAAGxH,MAAkB4G,MAAM,MACzB,qBAAG5G,MAAkB4G,MAAM,MCvBzBwY,GA1CM,WACjB,IAAMnhB,EAAWvI,IAAiB,SAACC,GAAD,OAAWA,EAAMsI,SAASvK,QACtDgE,EAAWyJ,KACXke,EAAetpB,EAAS,qBAE9B,OACI,kBAAC,GAAD,KAEI,kBAACupB,GAAA,EAAD,KACKrhB,EAASpI,KAAI,SAACkL,GAAD,OACV,kBAACwe,GAAA,EAAD,CAAY5lB,IAAKoH,EAAQvI,GAAIgnB,QAAS,MACjC,SAAC7pB,GAAD,OACG,kBAACspB,GAAD,CAASrrB,KAAMmN,EAAQnN,KAAM0Z,KAAgB,YAAV3X,GAC/B,kBAACwpB,GAAD,CAAavQ,QAAS,kBAAMlX,EbdP,CACjD9D,KAAM,kBACNoN,UaY+ED,EAAQvI,OACvD,kBAAC,GAAD,CAAM5E,KAAK,cAAc0Y,MAAO0S,GAAUje,EAAQnN,SAErDmN,EAAQ6D,OAAS,kBAAC,GAAD,KAAQ7D,EAAQ6D,OAClC,kBAAC,GAAD,KAAc7D,EAAQsF,qBAQ1C,kBAACkZ,GAAA,EAAD,CAAYE,GAAIxhB,EAAS7H,OAAS,EAAGopB,QAAS,MACzC,SAAC7pB,GAAD,MACa,WAAVA,GACI,kBAACspB,GAAD,CACI3R,KAAgB,YAAV3X,EACN/B,KAAMmjB,GAAa+H,QACnBlQ,QAAS,kBAAMlX,Eb3BP,CAChC9D,KAAM,qBa4BkB,kBAACsrB,GAAD,KAAeG,SCvC9BK,GAAa,SAAC9pB,GAAD,MAAyB,CAC/ChC,KAAM,cACNgC,W,4eCSJ,IAAM+pB,GAAe,CACjB,CACItZ,YAAa,gFACbzS,KAAMmjB,GAAavL,KACnBnX,UAAW,GAEf,CACIuQ,MAAO,uBACPyB,YACI,yVACJzS,KAAMmjB,GAAahf,MACnB1D,UAAW,IAQNurB,GAAmBC,YAAH,MAGhB,qBAAG7f,MAAkBgC,OAAOK,UACjB,qBAAGrC,MAAkBgC,OAAOE,QAK9CmU,GAAU9O,IAAOC,IAAV,MAGA,qBAAGxH,MAAkB4G,MAAM,MACzB,qBAAG5G,MAAkB0F,OAAOM,SAMrB,qBAAGhG,MAAkB4G,MAAM,MAyClCkZ,GAjCI,WAA2B,IAAD,EACnCpoB,EAAWyJ,KACXvL,EAASF,IAAiB,SAACC,GAAD,OAAWA,EAAMC,UAEjD,OAAKsC,GAAM,GAEP,oCACI,kBAAC0nB,GAAD,MACA,kBAAC,GAAD,KACI,kBAAC,GAAD,CACI7S,QAAO,UAAEnX,EAAOoK,aAAT,aAAE,EAAcW,SACvBiO,QAAS,wBAAMlX,ED/DmB,CAClD9D,KAAM,sBACNgN,UC6DwD,UAAChL,EAAOoK,aAAR,aAAC,EAAcW,cAF3D,aAMA,kBAACkS,GAAD,CAAQjE,QAAS,kBAAMlX,EAASsgB,GAAY2H,OAA5C,gBACA,kBAAC9M,GAAD,CACIjE,QAAS,kBACLlX,EACIgoB,GAAW,eACJ9pB,EADG,CAENiH,OAAO,eAAMjH,EAAOiH,OAAd,CAAsBC,gBAAiBlH,EAAOiH,OAAOC,uBAL3E,qBAZa,MC9CdoM,GAZA,WACX,IlEoC4B7U,EAAmB0rB,EkEpCzCC,EAAwBtqB,IAAiB,SAACC,GAAD,OAAWA,EAAMgH,QAAQhJ,cAClEssB,EAAuBvqB,IAAiB,SAACC,GAAD,OAAWA,EAAMgH,QAAQmD,qBACjEvL,EAAewB,EAAS,gBACxBmqB,EAAcnqB,EAAS,aAAc,CACvCoqB,MlEgCwB9rB,EkEhCF2rB,ElEgCqBD,EkEhCExrB,ElEiCjD,IAAI6rB,KAAKC,eAAeN,GAAY,UAAW,CAC3CO,QAAS,QACTC,IAAK,UACLC,MAAO,OACPC,KAAM,UACNC,KAAM,UACNC,OAAQ,UACRC,OAAQ,YACTrlB,OAAO,IAAI6D,KAAK/K,OkEtCnB,OAAK4rB,GAAyBC,EACvB,kBAAC,GAAD,KAAcA,GAD6B,M,gGCFtD,IAAMW,GAAYtZ,IAAOC,IAAV,MACI,qBAAGxH,MAAkBoG,MAAM5P,QAsB/BsqB,GAnBH,WACR,IAAMpkB,EAAchH,GAAiB+G,IAC/BuD,EAAQtK,IAAiB,SAACC,GAAD,OAAWA,EAAMC,OAAOoK,SACjD+gB,EAAkBC,iBAAW,OAALhhB,QAAK,IAALA,OAAA,EAAAA,EAAOW,UAAWkG,GAAcC,UAAYD,GAAc9E,WAA3D,OAAuE/B,QAAvE,IAAuEA,OAAvE,EAAuEA,EAAOzK,QAE3G,OAAKmH,EAED,kBAAC,IAAD,CAAesD,MAAO+gB,GAClB,kBAACF,GAAD,KACI,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,QARa,MCRTI,QACa,cAA7B9lB,OAAOqE,SAAS0hB,UAEiB,UAA7B/lB,OAAOqE,SAAS0hB,UAEhB/lB,OAAOqE,SAAS0hB,SAAShqB,MAAM,2DCbhC,IAAMiqB,GAAkC,CAC3C3oB,GAAI,OACJU,OAAQ,CACJ,CACI0L,MAAO,YACPyB,YACI,4SACJ2C,YAAa,UACb3P,UAAW,CACP,CACIb,GAAI,aACJ5E,KAAMN,EAAcgD,OACpBsO,MAAO,yDACP2K,MAAO,CAAC,cAAe,aAE3B,CACI/W,GAAI,UACJ5E,KAAMN,EAAc6C,SACpByO,MAAO,4BACPzN,UAAW,QACXwH,QAAS,CACL,CAAEnG,GAAI,IAAKoM,MAAO,WAClB,CAAEpM,GAAI,IAAKoM,MAAO,UAClB,CACIpM,GAAI,IACJoM,MAAO,kDACP2K,MAAO,CAAC,OAAQ,gCAEpB,CAAE/W,GAAI,IAAKoM,MAAO,aAEtB7N,UAAU,EACVgZ,MAAO,CACHzV,IAAK,qCACL4V,IAAK,gBACLF,UAAW,SAGnB,CACIxX,GAAI,iBACJ5E,KAAMN,EAAckD,KACpBW,UAAW,SACXyN,MAAO,8EACP7N,UAAU,GAEd,CACIyB,GAAI,SACJ5E,KAAMN,EAAc+C,MACpBuO,MAAO,wBACPzN,UAAW,SACXwE,IAAK,EACLC,IAAK,GACL7E,UAAU,EACVmF,WAAY,CAAC,MAAO,GAAI,OACxB6T,MAAO,CACHzV,IAAK,qCACLkS,KAAM,GACN0D,IAAK,oBAKrB,CACIlH,YAAa,UACb3C,YACI,6TACJ0J,MAAO,CACHzV,IAAK,sCACL4V,IAAK,gBACLF,UAAW,SAEf3W,UAAW,CACP,CACIb,GAAI,cACJ5E,KAAMN,EAAckD,KACpBW,UAAW,QACXmZ,YAAa,gBACb1L,MAAO,wEACP2K,MAAO,CAAC,gCAEZ,CACI/W,GAAI,WACJ5E,KAAMN,EAAc6C,SACpByO,MAAO,qBACPzN,UAAW,SACXwH,QAAS,CACL,CAAEnG,GAAI,IAAKoM,MAAO,WAAY2K,MAAO,CAAC,kBACtC,CAAE/W,GAAI,IAAKoM,MAAO,mBAEtBtG,aAAc,SAAC5H,EAAe5C,GAC1B,OAAOA,EAAOyB,OAAOsB,SAAS,MAAQ,GAAK,IAGnD,CACI2B,GAAI,WACJ5E,KAAMN,EAAc6C,SACpByO,MAAO,8BACPzN,UAAW,QACXwH,QAAS,CACL,CAAEnG,GAAI,IAAKoM,MAAO,aAClB,CAAEpM,GAAI,IAAKoM,MAAO,UAClB,CAAEpM,GAAI,IAAKoM,MAAO,mBAEtB7L,WAAY,CAAC,IAAK,MAEtB,CACIP,GAAI,OACJ5E,KAAMN,EAAckD,KACpBW,UAAW,OACXyN,MAAO,yCAKPmL,MAAO,CACHzV,IAAK,qCACL0V,UAAW,QACXE,IAAK,iBAET5R,aAAc,SAAC5H,EAAe5C,GAC1B,OAAOA,EAAOyC,MAAMH,QAExB6a,SAAU,GAEd,CACIzY,GAAI,eACJ5E,KAAMN,EAAcgD,OACpBsO,MAAO,gCACP9L,kBAAkB,EAClB/B,UAAU,EACVgZ,MAAO,CACHzV,IAAK,qCACL0V,UAAW,SACXxD,KAAM,GACN0D,IAAK,kBAGb,CACI1X,GAAI,iBACJ5E,KAAMN,EAAc+C,MACpBuO,MAAO,4BACPzN,UAAW,QACXwE,IAAK,EACLE,KAAM,EACND,IAAK,EACL5C,QAAS,EACT+C,UAAW,WACXuC,aAAc,SAAC5H,EAAe5C,GAAhB,OACTA,EAAOyC,OAASG,EAASkF,IAAMlF,EAASiF,KAAQ,QAIjE,CACIiJ,MAAO,kBACP2Q,YAAY,EACZR,mBAAoB,CAAC,WAAY,MAAO,UAAW,OAAQ,aAC3D1b,UAAW,CACP,CACIb,GAAI,SACJ5E,KAAMN,EAAc+C,MACpBuO,MAAO,2CACPzN,UAAW,QACXwE,IAAK,EACLC,IAAK,GAET,CACIpD,GAAI,SACJ5E,KAAMN,EAAc+C,MACpBuO,MAAO,aACPzN,UAAW,QACXwE,IAAK,EACLC,IAAK,GAET,CACIpD,GAAI,SACJ5E,KAAMN,EAAc+C,MACpBuO,MAAO,aACPzN,UAAW,QACXwE,IAAK,EACLC,IAAK,GAET,CACIpD,GAAI,SACJ5E,KAAMN,EAAc+C,MACpBuO,MAAO,aACPzN,UAAW,QACXwE,IAAK,EACLC,IAAK,GAET,CACIpD,GAAI,SACJ5E,KAAMN,EAAc+C,MACpBuO,MAAO,aACPzN,UAAW,SACXwE,IAAK,EACLC,IAAK,EACLI,UAAW,GAEf,CACIxD,GAAI,cACJ5E,KAAMN,EAAcgD,OACpBsO,MAAO,yDACP2K,MAAO,CAAC,cAAe,aAE3B,CACI/W,GAAI,WACJ5E,KAAMN,EAAc6C,SACpByO,MAAO,4BACPzN,UAAW,QACXwH,QAAS,CACL,CAAEnG,GAAI,IAAKoM,MAAO,WAClB,CAAEpM,GAAI,IAAKoM,MAAO,UAClB,CACIpM,GAAI,IACJoM,MAAO,kDACP2K,MAAO,CAAC,OAAQ,gCAEpB,CAAE/W,GAAI,IAAKoM,MAAO,aAEtB7N,UAAU,EACVgZ,MAAO,CACHzV,IAAK,qCACL4V,IAAK,gBACLF,UAAW,SAGnB,CACIxX,GAAI,kBACJ5E,KAAMN,EAAckD,KACpBW,UAAW,SACXyN,MAAO,8EACP7N,UAAU,MAK1B8F,OAAQ,CACJoD,YAAa,CAAC,EAAG,KACjBP,YAAa,sCACbP,eAAgB,IAChBe,QAAS,CACL,CAAEtM,KAAMJ,EAAmB8F,MAAO6G,MAAO,QAAS7G,MAAO,4CACzD,CACI1F,KAAMJ,EAAmB0S,OACzB5M,MAAO,wBACPikB,SAAU,OACVjjB,IAAK,sCAET,CACI1G,KAAMJ,EAAmB8F,MACzB6G,MAAO,cACP7G,MACI,koBAER,CACI1F,KAAMJ,EAAmB8F,MACzB6G,MAAO,kBACP7G,MAAO,cACPud,SAAS,EACTgI,mBAAoB,CAAC,GAAI/kB,OAAOmiB,mBAEpC,CACIroB,KAAMJ,EAAmB8F,MACzB6G,MAAO,kBACP7G,MAAO,cACPud,SAAS,EACTgI,mBAAoB,CAAC/kB,OAAOoiB,iBAAkB,KAElD,CACItoB,KAAMJ,EAAmBuc,MACzBzV,IAAK,qCACLkS,KAAM,GACN0D,IAAK,iBAET,CACItc,KAAMJ,EAAmB+qB,MACzBtB,QAAS,mDACT1hB,OAAQ,OACRyhB,WAAY,cAEhB,CACIppB,KAAMJ,EAAmB+qB,MACzBtB,QAAS,gCACT1hB,OAAQ,MACRyhB,WAAY,aAEhB,CACIppB,KAAMJ,EAAmB+qB,MACzBtB,QAAS,sCACT1hB,OAAQ,MACRyhB,WAAY,YACZE,YAAY,GAEhB,CAAEtpB,KAAMJ,EAAmB0S,OAAQ5M,MAAO,wBAAyBikB,SAAU,WAC7E,CACI3pB,KAAMJ,EAAmB0S,OACzB5M,MAAO,eACPikB,SAAU,WACVjjB,IAAK,uCAET,CACI1G,KAAMJ,EAAmB0S,OACzB5M,MAAO,0BACPikB,SAAU,OACVjjB,IAAK,qCACLkjB,WAAW,GAEf,CACI5pB,KAAMJ,EAAmB0S,OACzB5M,MAAO,0BACPikB,SAAU,OACVjjB,IAAK,sCAET,CACI1G,KAAMJ,EAAmBoqB,OACzBtjB,IAAK,qCACLif,OAAQ,IACR6E,eAAe,GAEnB,CACIxqB,KAAMJ,EAAmB8F,MACzB6G,MAAO,cACP7G,MAAO,qDAInB0E,SAAU,CACND,qBAAsB,SAACE,GAGnB,OADAA,EAAS0D,QAAQ1G,QAAQuQ,OAClB,KChUb4V,GAAcC,IAAMC,MAAK,gBAAG3S,EAAH,EAAGA,SAAH,OAAiD,oCAAGA,MAEtE4S,GAAb,WAGI,WAAYC,EAAkB5rB,GAAsB,yBAF5C6rB,YAE2C,EAC/C3X,KAAK2X,OAASlgB,KACV3L,GAAQkU,KAAK4X,aAAa9rB,GAE9B+rB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAepqB,MAAOqS,KAAK2X,QACvB,kBAACL,GAAD,KACI,kBAAC,GAAD,SAIZvN,SAASC,cAAc0N,IAfnC,yDAuBiB5rB,GACT,OAAIA,EAAOsD,QAAUtD,EAAOsD,OAAO9C,OAAS,GACxC0T,KAAK2X,OAAO/pB,SAASgoB,GAAW9pB,KAK7B,IAHHqF,QAAQlD,MAAM,sCAAuCnC,IAC9C,KA5BnB,qCAkCQkU,KAAK2X,OAAO/pB,S7ExCe,CAC/B9D,KAAM,oB6EKV,8BAsCQ,OAAOkW,KAAK2X,OAAO9pB,WAAWgF,QAAQjJ,OAtC9C,6BA0CQ,OAAOoW,KAAK2X,OAAO9pB,WAAW/B,WA1CtC,KAmDA,GAHCuF,OAAeomB,WAAaA,GAGzBrpB,GAAM,GAAO,CACb,IAAM4pB,GAAO,IAAIP,GAAW,eAC5BO,GAAKJ,aAAaP,IACjBhmB,OAAe2mB,KAAOA,GF4DnB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACtqB,GACJkD,QAAQlD,MAAMA,EAAMgJ,c","file":"static/js/main.36fe4c0d.chunk.js","sourcesContent":["import { AllAnswersType } from \"./AnswerTypes\";\nimport { ImageType } from \"./CommonTypes\";\n\nexport enum questionTypes {\n    single = \"single\",\n    multiple = \"multiple\",\n    text = \"text\",\n    range = \"range\",\n}\n\ntype Hintable = {\n    title: string;\n    /** Each usage of the `{hint}` placeholder needs to have a string in this array. Optional if no hints are used. */\n    hints?: string[];\n};\n\nexport type BaseQuestion = {\n    /** Can be used for easy identification in calcFunction and while debugging. */\n    id?: string;\n    /**\n     * Created by application to identify the question. This links the question to it's answer.\n     * It is always set, but because we are using the same input as output typing it is defined as optional.\n     * @internal\n     */\n    hash?: string;\n    /** The question being asked to the user. This string can contain multiple `{hint}` placeholders. */\n    title: string;\n    /** Required questions need to be filled in by the user before they can submit their answers. */\n    required?: boolean;\n    /** Optional function that can be used to override the default score calculations. */\n    calcFunction?: (question: AllQuestionsType, answer: AllAnswersType) => number | undefined;\n    /** Will be displayed above or to the right of the question title. */\n    image?: ImageType;\n} & Hintable;\n\n// example: \"I agree with terms and conditions\"\nexport type SingleChoiceQuestionType = BaseQuestion & {\n    type: questionTypes.single;\n    /** Causes the checkbox to already be checked when the user first loads the form. */\n    checkedByDefault?: boolean;\n};\n\ntype Options = {\n    id: string;\n} & Hintable;\n\n// example: country, gender\nexport type MultipleChoiceQuestionType = BaseQuestion & {\n    type: questionTypes.multiple;\n    /** Will display the options with radio buttons (single answer), checkboxes or in a dropdown (multiple answers) */\n    inputType: \"radio\" | \"check\" | \"select\";\n    /** A required list of possible values. These are objects containing an id, title and optional hints array */\n    options: Options[];\n    /** Optional. When filled with id's matching an option, those options will already be selected when the user first loads the form. */\n    defaultIds?: string[]; // this should be the ids of the default selected options\n};\n\n// example: email, age\nexport type TextQuestionType = BaseQuestion & {\n    type: questionTypes.text;\n    /** Will validate and limit the user's input. */\n    inputType: \"text\" | \"email\" | \"number\";\n    /** Optional. Will be shown inside the input field when the user hasn't entered a value. */\n    placeholder?: string;\n    /** Optional, can contain a custom `error` message (string) and/or a custom `regex` expression (string) for validation. */\n    customValidation?: {\n        /** String without regex boundaries. Example: \"^.{0,10}$\" */\n        regex?: string;\n        /** Overrides default error message */\n        error?: string;\n    };\n    /** Optional, when filled in displays a multiline field */\n    rowCount?: number;\n};\n\nexport type RangeDirectionType = \"increase\" | \"decrease\"; // increase is default\n\n// example: ratings\nexport type RangeQuestionType = BaseQuestion & {\n    type: questionTypes.range;\n    /** Functionally these work the same, only the visual input method differs. \"slider\" has more options (ticks). */\n    inputType: \"slider\" | \"radio\";\n    /** Minimum value */\n    min: number;\n    /** Maximum value */\n    max: number;\n    /** Optional. The default value when the user first opens the form. */\n    default?: number;\n    /** Optional. The size of each step between slider positions / radio buttons. For example: setting this to 2 will only allow (un)even numbers. */\n    step?: number;\n    /** Optional, defaults to \"increase\". Setting this to decrease will default to and put the maximum first. */\n    direction?: RangeDirectionType;\n    /** Only used on slider, optional. Will spread out this amount of ticks on the slider. */\n    tickCount?: number;\n    /** Only used on slider, optional. When set, the ticks will be displayed at these exact values. Will override the `tickCount` setting. */\n    tickValues?: number[];\n    /** Only used on slider, optional. When set, will override the tick labels (normally just the value). Use `null` to keep a tick label empty. */\n    tickLabels?: (string | null)[];\n};\n\nexport type AllQuestionsType =\n    | SingleChoiceQuestionType\n    | MultipleChoiceQuestionType\n    | TextQuestionType\n    | RangeQuestionType;\n\nexport type QuestionGroup = {\n    title?: string;\n    /** Can contain HTML */\n    description?: string;\n    /** Will be displayed above or to the right of the question title. */\n    image?: ImageType;\n    /** When filled in a left border will be shown in the CSS hex colour */\n    accentColor?: string;\n    /** Colours the question wrappers in this CSS hex colour */\n    backgroundColor?: string;\n    questions: AllQuestionsType[];\n    /** Displays all questions/inputs in a compact table view */\n    tabledView?: boolean;\n    /** Headings above the input column */\n    tableInputHeadings?: string[];\n    // showOnNewPage?: boolean; // TODO: Allow pagination via groups\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */ // We actually want to use Typescript inferring\nimport { AllAnswersType } from \"../../types/AnswerTypes\";\nimport { DistributiveOmit } from \"../../utils/utils\";\n\nexport const initAnswers = (list: AllAnswersType[], lastUpdate?: number) => ({\n    type: \"ANSWERS_INIT\" as const,\n    list,\n    lastUpdate,\n});\n\nexport const resetAnswers = () => ({\n    type: \"ANSWERS_RESET\" as const,\n});\n\nexport const setAnswer = (answer: DistributiveOmit<AllAnswersType, \"focussed\">) => ({\n    type: \"ANSWERS_SET\" as const,\n    answer,\n});\n\nexport const setAnswerFocus = (questionHash: string, focussed: boolean) => ({\n    type: \"ANSWERS_SET_FOCUS\" as const,\n    questionHash,\n    focussed,\n});\n\nexport type AnswersActions =\n    | ReturnType<typeof initAnswers>\n    | ReturnType<typeof resetAnswers>\n    | ReturnType<typeof setAnswer>\n    | ReturnType<typeof setAnswerFocus>;\n","import { Dispatch } from \"redux\";\nimport { debounce } from \"lodash\";\nimport { calculateScore } from \"../utils/calculator\";\nimport { AllAnswersType } from \"../types/AnswerTypes\";\nimport { AnswerPostData } from \"../types/DataTypes\";\nimport { AnswerDataUrl } from \"../types/ResultTypes\";\nimport {\n    generateAnswerStorageKey,\n    replaceValues,\n    fetchAnswerData,\n    getAllQuestionsSelector,\n    getInitializedSelector,\n} from \"../utils/utils\";\nimport { StoreApiType } from \"./store\";\nimport { setResult, updateRestartTimer } from \"./actions/resultActions\";\n\n// This is an extra safety measure against loops because every dispatch triggers another listener\n// The actions here should be manually checked for changes below.\ntype SafeActions = ReturnType<typeof setResult> | ReturnType<typeof updateRestartTimer>;\ntype SafeStoreApiType = Omit<StoreApiType, \"dispatch\"> & {\n    dispatch: Dispatch<SafeActions>;\n};\n\n// ----------------------------------------------------------------------\n// calculateScoreListener\n// ----------------------------------------------------------------------\n\nconst debouncedFetchAnswerData = debounce(\n    (url: AnswerDataUrl, data: AnswerPostData) => fetchAnswerData(url, data),\n    500,\n);\n\nlet prevScoreAnswerList: AllAnswersType[];\nlet prevScoreValue = 0;\n\n/**\n * Calculate new score when results are visible (links to ANSWERS_SET and dispatches RESULT_SET). Why is this here?\n * - Because we can circumvent complexity in the middleware. However we modify answers, it will always be picked up here.\n * - This dispatch is an end state and the other option, redirect, feels wrong inside middleware\n */\nconst calculateScoreListener = (store: SafeStoreApiType): void => {\n    const state = store.getState();\n\n    // When viewing results or after, when answers change\n    if (getInitializedSelector(state) && state.result.showResult && state.answers.list !== prevScoreAnswerList) {\n        prevScoreAnswerList = state.answers.list;\n\n        // Restart timer when results were visible and answers change, also starts timer when showing results\n        if (state.config.result.restartTimeout) {\n            store.dispatch(updateRestartTimer(Date.now() + state.config.result.restartTimeout * 1000));\n        }\n\n        // Create and handle new score\n        const newScore = calculateScore(getAllQuestionsSelector(state), state.answers.list);\n        if (newScore !== prevScoreValue) {\n            prevScoreValue = newScore;\n\n            // Replace built in results page with a custom redirect\n            // this causes instant reloads when showResult was saved to localstorage (only in dev mode)\n            if (state.config.result.redirectUrl) {\n                window.location.href = replaceValues(state.config.result.redirectUrl, { score: newScore })!;\n                return;\n            }\n\n            // Post answers and score to endpoint\n            // use a debounced callback to avoid spamming the endpoint when changing a submitted result\n            if (state.config.result.postDataUrl) {\n                debouncedFetchAnswerData(state.config.result.postDataUrl, {\n                    configId: state.config.id,\n                    score: newScore,\n                    answers: state.answers.list,\n                });\n            }\n\n            store.dispatch(setResult(newScore));\n        }\n    }\n};\n\n// ----------------------------------------------------------------------\n// persistAnswerListener\n// ----------------------------------------------------------------------\n\nlet prevPersistAnswerList: AllAnswersType[];\n\nconst persistAnswerListener = (store: SafeStoreApiType): void => {\n    const state = store.getState();\n\n    if (prevPersistAnswerList !== state.answers.list && state.config.initialized && state.answers.initialized) {\n        localStorage.setItem(generateAnswerStorageKey(state.config.id), JSON.stringify(state.answers));\n    }\n};\n\n// ----------------------------------------------------------------------\n// Combine\n// ----------------------------------------------------------------------\n\nexport const listeners = [calculateScoreListener, persistAnswerListener];\n","import { ImageType } from \"./CommonTypes\";\n\nexport enum resultContentTypes {\n    label = \"label\",\n    button = \"button\",\n    image = \"image\",\n    graph = \"graph\",\n    iframe = \"iframe\",\n}\n\n/**\n * This is a special type of string that can contain {score} placeholder\n * and can start with POST; or GET; (Using POST will include the full list of answers).\n *\n * Defining this as \"answerDataUrl\" is a bit of a workaround so we can have strict typing instead of just any string.\n * Since Typescript is stripped away once in the browser it doesn't really matter except for defining typed mockdata.\n */\nexport type AnswerDataUrl = \"answerDataUrl\";\n\ntype BaseResult = {\n    /** Optional, domain that determines when the content is visible */\n    visibleScoreDomain?: [number, number];\n};\n\nexport type ResultLabelType = BaseResult & {\n    type: resultContentTypes.label;\n    /** Can contain {score}, {scoreX} placeholder (scoreX -> score/10, score/20, score/100...). */\n    label: string;\n    /** \"title\" and \"description\" only change font size, while \"scoreCounter\" will display the score in a dial. */\n    style: \"title\" | \"description\" | \"scoreCounter180\" | \"scoreCounter270\";\n    /** When enabled the score placeholders will count up in an animation. */\n    animate?: boolean;\n};\n\nexport type ResultButtonType = BaseResult & {\n    type: resultContentTypes.button;\n    /** Text to be displayed inside the button */\n    label: string;\n    /** A \"restart\" button will reset the user's input. \"postData\" will save the user's input to your server like the `postDataUrl` setting. \"link\" will redirect the user. */\n    function: \"restart\" | \"postData\" | \"link\"; // postData: will post data to url, link: open url in tab\n    /** Only necessary when function is \"postData\" or \"link\" */\n    url?: AnswerDataUrl;\n    /** Optional, only used when the function is \"link\" */\n    openInTab?: boolean;\n};\n\nexport type ResultImageType = BaseResult & {\n    type: resultContentTypes.image;\n} & Omit<ImageType, \"alignment\">;\n\nexport type ResultGraphType = BaseResult & {\n    type: resultContentTypes.graph;\n    /** Switches between a bar chart or line graph */\n    format: \"line\" | \"bar\";\n    /** Required. The tool will fetch this URL for data to be displayed, can contain `{score}` placeholder */\n    dataUrl: AnswerDataUrl;\n    /** Optional, will display a title above the graph. */\n    titleLabel?: string;\n    /** Optional, defaults to false. If enabled, the legend will not be displayed. */\n    hideLegend?: boolean;\n};\n\nexport type ResultIFrameType = BaseResult & {\n    type: resultContentTypes.iframe;\n    /** Required. The tool will display this url, can contain a `{score}` placeholder */\n    url: AnswerDataUrl;\n    /** Set a custom height for the IFrame. Defaults to 400px */\n    height?: number;\n    /** Will disable scrolling inside the IFrame when enabled. Optional, defaults to false. */\n    disableScroll?: boolean;\n};\n\nexport type AllResultContentType =\n    | ResultLabelType\n    | ResultButtonType\n    | ResultImageType\n    | ResultGraphType\n    | ResultIFrameType;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */ // We actually want to use Typescript inferring\nexport const setResult = (score: number) => ({\n    type: \"RESULT_SET\" as const,\n    score,\n});\n\nexport const showResult = (visible = true) => ({\n    type: \"RESULT_SHOW\" as const,\n    visible,\n});\n\nexport const updateRestartTimer = (timestamp: number | null) => ({\n    type: \"RESULT_UPDATE_RESTART_TIMER\" as const,\n    timestamp,\n});\n\nexport type ResultActions =\n    | ReturnType<typeof setResult>\n    | ReturnType<typeof showResult>\n    | ReturnType<typeof updateRestartTimer>;\n","export const generalLabels = {\n    /** Used for formatting and translating dates / times, See (but replace _ with -) https://github.com/umpirsky/locale-list/blob/master/data/en_US/locales.csv */\n    dateLocaleId: \"default\",\n    /** Displayed in the bottom right corner, can contain timestamp of when the user last made a change */\n    footerText: \"Last update on {date}\",\n};\n\nexport const messageLabels = {\n    /** Generic error message in case something really bad breaks */\n    messageErrorTitle: \"Error\",\n    /** Button to dismiss all in case multiple notifications / messages are shown */\n    messageDismissAll: \"Dismiss all\",\n    /** Shown when a graph could not be loaded */\n    messageGraphDataError: \"Oops, could not display graph.\",\n};\n\nexport const questionLabels = {\n    /** Will be shown below the list of questions to announce which questions still need to be filled in */\n    questionsErrorTitle: \"These questions need to be filled in correctly to see your result:\",\n    /** The placeholder text on a Multiple Choice select / dropdown input, can contain a {count} placeholder for the amount of options the question has */\n    inputSelectPlaceholder: \"--- {count} options ---\",\n    /** Error message shown below a text input (inputType=number) when the input is invalid */\n    inputTextErrorNumber: \"Please provide a valid number\",\n    /** Error message shown below a text input (inputType=email) when the input is invalid */\n    inputTextErrorEmail: \"Please provide a correctly formatted email address\",\n    /** Error message shown below a text input (inputType=text) when the input is invalid, should probably be overwritten with customValidation.error */\n    inputTextErrorText: \"Wrong format\",\n    /** Error message shown below a required Single Choice question (checkbox) */\n    inputSingleRequiredError: \"This field is required\",\n    /** Error message shown below a required Multiple Choice question */\n    inputMultipleRequiredError: \"Please select an option\",\n};\n\nexport const resultLabels = {\n    /** Button below the questions list to submit your answers / view your results */\n    resultSeeButton: \"See results\",\n};\n\nexport const defaultLabels = {\n    ...generalLabels,\n    ...messageLabels,\n    ...questionLabels,\n    ...resultLabels,\n};\n\nexport type ValuesType = Partial<Record<\"count\" | \"date\" | \"score\" | \"countdown\", string | number | null>>;\nexport type LabelsType = Partial<Record<LabelKeyType, string | null>>;\nexport type LabelKeyType = keyof typeof defaultLabels;\n","import { useStoreSelector } from \"../redux/store\";\nimport { ValuesType, LabelKeyType, defaultLabels, LabelsType } from \"../utils/labels\";\nimport { replaceValues } from \"../utils/utils\";\n\nexport const getLabel = (labels: LabelsType, query: LabelKeyType, values?: ValuesType): string | null => {\n    return replaceValues(labels[query] || defaultLabels[query] || null, values);\n};\n\n/**\n * Accepts either a single label key, optionally a value map can be provided that will replace {placeholders} inside a defined label with the provided value\n * Returns the user configured translation of a label, it's default or null if the label is optional.\n *\n * @example useLabel(\"scoreTitle\", { score: 95 }); + \"Congrats with your {score}% score!\" => \"Congrats with your 95% score!\"\n */\nexport const useLabel = (query: LabelKeyType, values?: ValuesType): string | null => {\n    const labels = useStoreSelector((state) => state.config.labels);\n    return getLabel(labels, query, values);\n};\n\n/**\n * Similar to useLabel, but accepts an array and returns an array\n */\nexport const useLabels = (query: LabelKeyType[], values?: ValuesType): (string | null)[] => {\n    const labels = useStoreSelector((state) => state.config.labels);\n    return query.map((labelKey) => getLabel(labels, labelKey, values));\n};\n\nexport default useLabel;\n","import { AllQuestionsType, questionTypes, TextQuestionType } from \"../types/QuestionTypes\";\nimport { AllAnswersType, TextAnswerType } from \"../types/AnswerTypes\";\nimport { getLabel } from \"../hooks/useLabel\";\nimport { setAnswerFocus } from \"../redux/actions/answersActions\";\nimport { StoreType } from \"../redux/store\";\nimport { LabelKeyType } from \"./labels\";\nimport { getQuestionAnswerSelector } from \"./utils\";\n\n// eslint-disable-next-line\nconst REGEX_EMAIL_FORMAT = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{1,}))$/; // https://emailregex.com/\nconst REGEX_NUMBER_ONLY = /^[0-9]*$/;\n\n/**\n * Blocks the user from entering a character. Not to be confused with isTextAnswerValid.\n */\nexport const hasTextAnswerForbiddenCharacter = (format: TextQuestionType[\"inputType\"], value: string): boolean => {\n    switch (format) {\n        case \"number\":\n            return !value.match(REGEX_NUMBER_ONLY);\n        case \"email\":\n            return value.includes(\" \"); // no spaces allowed\n        case \"text\":\n            return false; // everything is allowed\n    }\n};\n\n// ----------------------------------------------------------------------\n// isAnswerValid\n// ----------------------------------------------------------------------\n\nconst isAnswerValueFilledIn = (answer: AllAnswersType): boolean => {\n    switch (answer.type) {\n        case questionTypes.multiple: {\n            return answer.values.length > 0;\n        }\n        case questionTypes.range: {\n            return true;\n        }\n        case questionTypes.single: {\n            return answer.value;\n        }\n        case questionTypes.text: {\n            return !!answer.value;\n        }\n    }\n};\n\nconst isTextAnswerValid = (question: TextQuestionType, answer: TextAnswerType): boolean => {\n    // fail if answer is required but not filled in\n    if (question.required && !isAnswerValueFilledIn(answer)) return false;\n\n    // override with custom validation\n    if (question.customValidation?.regex) {\n        return !!answer.value.match(question.customValidation.regex);\n    }\n\n    switch (question.inputType) {\n        case \"number\":\n            return !!answer.value.match(REGEX_NUMBER_ONLY);\n        case \"email\":\n            return !!answer.value.match(REGEX_EMAIL_FORMAT);\n        case \"text\":\n            return true;\n    }\n};\n\nexport const isAnswerValid = (question: AllQuestionsType, answer: AllAnswersType): boolean => {\n    // Because the hash isn't 100% collision proof we also check some other fields here, just in case.\n    if (!question.hash || !answer.questionIdHash.includes(question.hash) || question.type !== answer.type) {\n        throw new Error(\n            `Cannot validate answer with data from a different question. Question hash: ${question.hash}, answers question idHash: ${answer.questionIdHash}`,\n        );\n    }\n\n    // validate text answers\n    if (question.type === questionTypes.text && answer.type === questionTypes.text) {\n        return isTextAnswerValid(question, answer);\n    }\n\n    // fail if answer is required but not filled in\n    if (question.required && !isAnswerValueFilledIn(answer)) return false;\n\n    // singleChoice, multipleChoice and range question types cannot be filled in with invalid values\n    return true;\n};\n\n// ----------------------------------------------------------------------\n// getValidAnswerData\n// ----------------------------------------------------------------------\n\nconst textAnswerErrorLabelMap: Record<TextQuestionType[\"inputType\"], LabelKeyType> = {\n    number: \"inputTextErrorNumber\",\n    email: \"inputTextErrorEmail\",\n    text: \"inputTextErrorText\",\n};\n\nconst getErrorLabel = (question: AllQuestionsType): LabelKeyType => {\n    switch (question.type) {\n        case questionTypes.single:\n            return \"inputSingleRequiredError\";\n        case questionTypes.multiple:\n            return \"inputMultipleRequiredError\";\n        case questionTypes.text:\n            return textAnswerErrorLabelMap[question.inputType];\n        case questionTypes.range:\n            return \"\" as LabelKeyType; // the slider component should prevent invalid values\n    }\n};\n\ntype DataType = {\n    error: string;\n    showError: boolean;\n    setFocussed: () => void;\n};\n\n/**\n * Returns the matching answer field for a question id, also takes care of type casting.\n * (!) Attention, because of it's direct store usage, it will not trigger a re-render on it's own when used in a React component!\n */\nexport const getValidAnswerData = <Q extends AllQuestionsType>(question: Q, store: StoreType): DataType => {\n    // get answer value\n    const { dispatch, getState } = store;\n    const state = getState();\n    const answer = getQuestionAnswerSelector(question)(state);\n\n    // get correct error label\n    const labels = state.config.labels;\n    const errorLabel = getLabel(labels, getErrorLabel(question));\n\n    const customErrorLabel = (question as TextQuestionType).customValidation?.error;\n    const valid = isAnswerValid(question, answer);\n\n    return {\n        error: customErrorLabel || errorLabel || \"Error\",\n        showError: !valid && answer.focussed,\n        setFocussed: () => {\n            dispatch(setAnswerFocus(answer.questionIdHash, true));\n        },\n    };\n};\n","import { Dispatch } from \"redux\";\nimport hash from \"object-hash\";\nimport {\n    AllQuestionsType,\n    MultipleChoiceQuestionType,\n    QuestionGroup,\n    questionTypes,\n    RangeQuestionType,\n    SingleChoiceQuestionType,\n    TextQuestionType,\n} from \"../types/QuestionTypes\";\nimport { AllAnswersType } from \"../types/AnswerTypes\";\nimport { AnswerPostData } from \"../types/DataTypes\";\nimport { AnswerDataUrl } from \"../types/ResultTypes\";\nimport { ActionsType, StateType } from \"../redux/store\";\nimport { resetAnswers, setAnswer, setAnswerFocus } from \"../redux/actions/answersActions\";\nimport { showResult, updateRestartTimer } from \"../redux/actions/resultActions\";\nimport Slider from \"../components/common/Slider\";\nimport RadioSlider from \"../components/common/RadioSlider\";\nimport { ValuesType } from \"./labels\";\nimport { hasTextAnswerForbiddenCharacter } from \"./validator\";\n\n// ----------------------------------------------------------------------\n// Constants\n// ----------------------------------------------------------------------\n\nexport const resultAnimationTotalFrames = 10;\nexport const resultAnimationFrameLength = 65;\nexport const graphHighlightId = \"highlight\";\n\n// ----------------------------------------------------------------------\n// Helper methods\n// ----------------------------------------------------------------------\n\nexport const isDev = (allowOnDemo?: boolean): boolean =>\n    process.env.NODE_ENV !== \"production\" || (!!allowOnDemo && !!process.env.REACT_APP_DEMO);\n\nexport const generateAnswerStorageKey = (configId: string): string => `surveyTool-answers-${configId}`;\n\nexport const generateThemeStorageKey = (configId: string): string => `surveyTool-theme-${configId}`;\n\nexport const generateShowResultStorageKey = (): string => `surveyTool-showresult`;\n\nexport const formatTimestamp = (timestamp: number, localeId: string | null | undefined): string =>\n    new Intl.DateTimeFormat(localeId || \"default\", {\n        weekday: \"short\",\n        day: \"numeric\",\n        month: \"long\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n    }).format(new Date(timestamp));\n\n/**\n * Returns the correct format for the `answers.questionIdHash` field\n */\nexport const getQuestionIdHash = (question: AllQuestionsType): string => `${question.hash}-${question.id}`;\n\n/**\n * Linked tot the element selector in ShowResultsButton.\n */\nexport const getQuestionScrollId = (question: AllQuestionsType): string => `question-${getQuestionIdHash(question)}`;\n\n/**\n * Adds the hash field to a question.\n */\nexport const populateQuestionHash = <Q extends AllQuestionsType>(question: Q): Q => {\n    const newQuestion = { ...question };\n    delete newQuestion.hash;\n    return { ...newQuestion, hash: hash(newQuestion) };\n};\n\n/**\n * Create a new answer object based on a question.\n */\nexport const generateInitialAnswer = (question: AllQuestionsType): AllAnswersType => {\n    const baseAnswer = { questionIdHash: getQuestionIdHash(question), focussed: false };\n    switch (question.type) {\n        case questionTypes.single: {\n            return { ...baseAnswer, type: questionTypes.single, value: question.checkedByDefault || false };\n        }\n        case questionTypes.multiple: {\n            return { ...baseAnswer, type: questionTypes.multiple, values: question.defaultIds || [] };\n        }\n        case questionTypes.text: {\n            return { ...baseAnswer, type: questionTypes.text, value: \"\" };\n        }\n        case questionTypes.range: {\n            return { ...baseAnswer, type: questionTypes.range, value: question.default || 0 };\n        }\n    }\n};\n\nexport const flattenQuestionGroups = (groups: QuestionGroup[]): AllQuestionsType[] =>\n    groups.reduce<AllQuestionsType[]>((list, group) => [...list, ...group.questions], []);\n\n/**\n * Will replace {key1} inside a string with the provided value for the key\n *\n * @example replaceValues(\"Congrats with your {score}% score!\", { score: 95 }) => \"Congrats with your 95% score!\"\n */\nexport const replaceValues = (label?: string | null, values?: ValuesType, replaceAll = true): string | null => {\n    if (!label) return null;\n    if (!values) return label;\n\n    // loop over provided values and replace those keys with their values in the provided label\n    return Object.entries(values).reduce((newLabel, [key, value]) => {\n        if (value === null) return newLabel;\n        const regex = new RegExp(`{${key}}`, replaceAll ? \"g\" : \"\");\n        return newLabel.replace(regex, typeof value === \"number\" && Number.isNaN(value) ? \"?\" : `${value}`);\n    }, label);\n};\n\n/**\n * Post data to an url and get return typed data\n * This url can contain the method and the score:\n * GET;http://example.org?score={score} or POST;http://example.org\n */\nexport const fetchAnswerData = async <T extends Record<string, unknown>>(\n    methodUrl: AnswerDataUrl,\n    data: AnswerPostData,\n): Promise<T | null> => {\n    const splitUrl = methodUrl.split(\";\"); // gives array like [\"GET\", \"http://url\"] or [\"http://url\"]\n    const url = replaceValues(splitUrl[splitUrl.length - 1], { score: data.score })!;\n    const method = splitUrl.length > 1 ? splitUrl[0] : \"GET\";\n\n    try {\n        const request = await fetch(url, {\n            method,\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: method === \"POST\" ? JSON.stringify(data) : undefined,\n        });\n        return (await request.json()) as T;\n    } catch (error) {\n        console.error(\"Could not fetch answer data\", error);\n        return null;\n    }\n};\n\n// ----------------------------------------------------------------------\n// Dispatcher helpers\n// ----------------------------------------------------------------------\n\nexport const resetFormDispatcher = (dispatch: Dispatch<ActionsType>): void => {\n    window.scrollTo({ top: 0 });\n    dispatch(showResult(false));\n    dispatch(resetAnswers());\n    dispatch(updateRestartTimer(null));\n};\n\n// ----------------------------------------------------------------------\n// Answer event handling\n// ----------------------------------------------------------------------\n\nexport const onTextAnswerChange = (\n    question: TextQuestionType,\n    dispatch: Dispatch<ActionsType>,\n    value: string,\n): void => {\n    // only block forbidden characters when no custom validation is applied, just to keep all options open\n    if (!question.customValidation && hasTextAnswerForbiddenCharacter(question.inputType, value)) return;\n    dispatch(\n        setAnswer({\n            questionIdHash: getQuestionIdHash(question),\n            type: question.type,\n            value: value,\n        }),\n    );\n};\n\nexport const onSingleAnswerClick = (\n    question: SingleChoiceQuestionType,\n    dispatch: Dispatch<ActionsType>,\n    value: boolean,\n): void => {\n    dispatch(setAnswerFocus(getQuestionIdHash(question), true));\n    dispatch(\n        setAnswer({\n            questionIdHash: getQuestionIdHash(question),\n            type: question.type,\n            value,\n        }),\n    );\n};\n\nexport const getRangeQuestionDefaultProps = (\n    question: RangeQuestionType,\n    dispatch: Dispatch<ActionsType>,\n    value: number,\n): React.ComponentProps<typeof Slider> | React.ComponentProps<typeof RadioSlider> => ({\n    min: question.min || 0,\n    max: question.max || 1,\n    value: value || 0,\n    step: question.step || 1,\n    disabled: false,\n    direction: question.direction || \"increase\",\n    tickCount: question.tickCount,\n    tickValues: question.tickValues,\n    tickLabels: question.tickLabels,\n    onChange: (value: number): void => {\n        dispatch(\n            setAnswer({\n                questionIdHash: getQuestionIdHash(question),\n                type: question.type,\n                value,\n            }),\n        );\n    },\n});\n\nexport const onMultipleAnswerClick = (\n    question: MultipleChoiceQuestionType,\n    dispatch: Dispatch<ActionsType>,\n    selectedIds: string[],\n    newSelectedId: string,\n): void => {\n    let newValues: string[] = [];\n    if (question.inputType === \"radio\") {\n        newValues = selectedIds.includes(newSelectedId) ? ([] as string[]) : [newSelectedId];\n    }\n\n    if (question.inputType === \"check\") {\n        newValues = selectedIds.includes(newSelectedId)\n            ? selectedIds.filter((id) => id !== newSelectedId)\n            : [...selectedIds, newSelectedId];\n    }\n\n    if (question.inputType === \"select\") {\n        newValues = [newSelectedId];\n    }\n\n    dispatch(setAnswerFocus(getQuestionIdHash(question), true));\n    dispatch(\n        setAnswer({\n            questionIdHash: getQuestionIdHash(question),\n            type: question.type,\n            values: newValues,\n        }),\n    );\n};\n\n// ----------------------------------------------------------------------\n// State Selectors\n// ----------------------------------------------------------------------\n\n/**\n * Checks if the app is initialized\n */\nexport const getInitializedSelector = (state: StateType): boolean =>\n    state.config.initialized && state.answers.initialized;\n\n/**\n * Checks if a control should be disabled.\n */\nexport const disableControlsSelector = (state: StateType): boolean =>\n    !state.config.result.enableControls && state.result.showResult;\n\n/**\n * Returns a flat list of all questions in the config.\n */\nexport const getAllQuestionsSelector = (state: StateType): AllQuestionsType[] =>\n    flattenQuestionGroups(state.config.groups);\n\n/**\n * Returns the matching answer field for a question id, also takes care of type casting\n */\nexport const getQuestionAnswerSelector = <A extends AllAnswersType>(question: AllQuestionsType) => (\n    state: StateType,\n): A => (state.answers.list.find((answer) => answer.questionIdHash.includes(question.hash!)) as A) || ({} as A);\n\n// ----------------------------------------------------------------------\n// Type helpers\n// ----------------------------------------------------------------------\n\n/**\n * Makes the all properties of a type and it's sub types Partial\n * Source: https://gist.github.com/navix/6c25c15e0a2d3cd0e5bce999e0086fc9#gistcomment-3300848\n */\nexport type DeepPartial<T> = T extends Function // eslint-disable-line @typescript-eslint/ban-types\n    ? T\n    : T extends object // eslint-disable-line @typescript-eslint/ban-types\n    ? T extends unknown[]\n        ? DeepPartial<T[number]>[]\n        : { [P in keyof T]?: DeepPartial<T[P]> }\n    : T;\n\n/**\n * This will spread the Omit util to all unioned types\n * Source: https://stackoverflow.com/a/57103940\n *\n * @example DistributiveOmit<A | B, \"key\"> = Omit<A, \"key\"> | Omit<B, \"key\">\n */\nexport type DistributiveOmit<T, K extends keyof any> = T extends any ? Omit<T, K> : never;\n","import { Middleware, Dispatch, applyMiddleware } from \"redux\";\nimport {\n    flattenQuestionGroups,\n    generateAnswerStorageKey,\n    generateInitialAnswer,\n    getAllQuestionsSelector,\n    populateQuestionHash,\n} from \"../utils/utils\";\nimport { AllAnswersType } from \"../types/AnswerTypes\";\nimport { ActionsType, StoreApiType } from \"./store\";\nimport { initAnswers } from \"./actions/answersActions\";\nimport { showResult, updateRestartTimer } from \"./actions/resultActions\";\n\nconst AllLogicMiddleware: Middleware = (store: StoreApiType) => (next: Dispatch<ActionsType>) => (\n    action: ActionsType,\n) => {\n    switch (action.type) {\n        case \"CONFIG_INIT\": {\n            // Prepopulate default or locally saved answers in store\n            // attempt to load from localstorage so answers are persisted between reloads\n            const localAnswersString = localStorage.getItem(generateAnswerStorageKey(action.config.id));\n            const loadedAnswers: AllAnswersType[] =\n                localAnswersString && localAnswersString.length ? JSON.parse(localAnswersString).list : [];\n\n            // or create a new set of placeholder answers\n            const initialAnswers = flattenQuestionGroups(action.config.groups)\n                .map(populateQuestionHash)\n                .map(generateInitialAnswer);\n\n            // merge loaded and initial answers\n            const mergedAnswers = initialAnswers.map((answer) => {\n                const foundLoadedAnswer = loadedAnswers.find(\n                    (loadedAnswer) =>\n                        loadedAnswer.questionIdHash === answer.questionIdHash && loadedAnswer.type === answer.type,\n                );\n                return foundLoadedAnswer || answer;\n            });\n\n            store.dispatch(initAnswers(mergedAnswers));\n            break;\n        }\n\n        case \"ANSWERS_RESET\": {\n            // Reuse initAnswers instead of dispatching the reset action\n            const questions = getAllQuestionsSelector(store.getState());\n            const initialAnswers = questions.map(generateInitialAnswer);\n            store.dispatch(initAnswers(initialAnswers));\n            return;\n        }\n\n        case \"ANSWERS_SET\": {\n            // Hide results when changing an answer\n            const { enableControls, hideResultsAfterUpdate } = store.getState().config.result;\n            if (enableControls && hideResultsAfterUpdate) {\n                store.dispatch(showResult(false));\n            }\n            break;\n        }\n\n        case \"RESULT_SHOW\": {\n            // Reset the update timer when it's no longer visible\n            if (!action.visible && store.getState().result.restartTimestamp) {\n                store.dispatch(updateRestartTimer(null));\n            }\n            break;\n        }\n\n        case \"MESSAGES_ADD\": {\n            const { customMessageHandler } = store.getState().config.settings;\n            if (customMessageHandler) {\n                try {\n                    const stopErrorInternally = !customMessageHandler(action.messages);\n                    // Do not add message to store otherwise duplicate visualization will occur\n                    if (stopErrorInternally) return;\n                } catch (exception) {\n                    console.error(`Custom message handler failed`, exception);\n                }\n            }\n        }\n    }\n\n    return next(action);\n};\n\nexport const middlewares = applyMiddleware(AllLogicMiddleware);\n","import { AllQuestionsType, questionTypes, MultipleChoiceQuestionType, TextQuestionType } from \"../types/QuestionTypes\";\nimport {\n    AllAnswersType,\n    SingleChoiceAnswerType,\n    MultipleChoiceAnswerType,\n    RangeAnswerType,\n    TextAnswerType,\n} from \"../types/AnswerTypes\";\nimport { getQuestionIdHash } from \"./utils\";\n\nconst calculateDefaultAnswerScore = (question: AllQuestionsType, answer: AllAnswersType): number => {\n    switch (question.type) {\n        case questionTypes.text: {\n            const textAnswer = answer as TextAnswerType;\n            const textQuestion = question as TextQuestionType;\n\n            if (textQuestion.inputType === \"number\") return parseInt(textAnswer.value) || 0;\n            return 0;\n        }\n        case questionTypes.single: {\n            return (answer as SingleChoiceAnswerType).value ? 1 : 0;\n        }\n        case questionTypes.multiple: {\n            const mcAnswer = answer as MultipleChoiceAnswerType;\n            const mcQuestion = question as MultipleChoiceQuestionType;\n\n            if (mcQuestion.inputType === \"check\") return mcAnswer.values.length;\n            else return mcQuestion.options.findIndex((option) => option.id === mcAnswer.values[0]) + 1;\n        }\n        case questionTypes.range: {\n            return (answer as RangeAnswerType).value;\n        }\n    }\n};\n\nexport const calculateScore = (questions: AllQuestionsType[], answers: AllAnswersType[]): number => {\n    return questions.reduce((total: number, question: AllQuestionsType, index: number) => {\n        const answer = answers[index];\n\n        if (question.calcFunction) {\n            try {\n                const score = parseInt((question.calcFunction(question, answer) as unknown) as string);\n                if (Number.isNaN(score)) throw new Error(\"calcFunction does not return a number\");\n\n                return total + score;\n            } catch (exception) {\n                console.error(`Failed to calculate score of question ${getQuestionIdHash(question)}`, exception);\n            }\n        }\n\n        return total + calculateDefaultAnswerScore(question, answer);\n    }, 0);\n};\n","import { AllAnswersType } from \"../../types/AnswerTypes\";\nimport { AnswersActions } from \"../actions/answersActions\";\n\n// ----------------------------------------------------------------------\n// Initial state\n// ----------------------------------------------------------------------\n\nexport const initialAnswersState = {\n    initialized: false,\n    list: [] as AllAnswersType[],\n    lastUpdate: 0,\n    loadedFromStorage: false,\n};\nexport type AnswersState = typeof initialAnswersState;\n\n// ----------------------------------------------------------------------\n// Reducer\n// ----------------------------------------------------------------------\n\nexport const answersReducer = (state: AnswersState = initialAnswersState, action: AnswersActions): AnswersState => {\n    switch (action.type) {\n        case \"ANSWERS_INIT\": {\n            return {\n                ...state,\n                initialized: true,\n                list: action.list,\n                lastUpdate: action.lastUpdate || 0,\n                loadedFromStorage: action.lastUpdate ? true : false,\n            };\n        }\n        // Not used, see store middleware\n        // case \"ANSWERS_RESET\": {\n        //     return { ...initialAnswersState };\n        // }\n        case \"ANSWERS_SET\": {\n            const { answer } = action;\n            const newAnswersList = [...state.list]; // do not mutate original state\n            const index = newAnswersList.findIndex((a) => a.questionIdHash.includes(answer.questionIdHash)); // find index of answer to edit\n            const newAnswer = { ...answer, focussed: true } as AllAnswersType; // Add focussed flag\n            newAnswersList[index > -1 ? index : newAnswersList.length] = newAnswer; // fallback to adding item as next one in the list\n            return { ...state, list: newAnswersList, lastUpdate: Date.now() }; // replace answer\n        }\n\n        case \"ANSWERS_SET_FOCUS\": {\n            const { questionHash, focussed } = action;\n            const newAnswersList = [...state.list];\n            const index = newAnswersList.findIndex((a) => a.questionIdHash.includes(questionHash));\n            newAnswersList[index] = { ...newAnswersList[index], focussed };\n            return { ...state, list: newAnswersList };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n","import { ConfigType } from \"../../types/ConfigTypes\";\nimport { generateThemeStorageKey, populateQuestionHash } from \"../../utils/utils\";\nimport { resultContentTypes } from \"../../types/ResultTypes\";\nimport { ConfigActions } from \"../actions/configActions\";\n\n// ----------------------------------------------------------------------\n// Initial state\n// ----------------------------------------------------------------------\n\nexport const initialConfigState: ConfigType & { initialized: boolean } = {\n    initialized: false,\n    id: \"\",\n    labels: {},\n    theme: {},\n    groups: [],\n    result: {\n        scoreDomain: [0, 100],\n        enableControls: false,\n        content: [{ type: resultContentTypes.label, style: \"title\", label: \"Thanks for your submission!\" }],\n    },\n    settings: {},\n};\nexport type ConfigState = typeof initialConfigState;\n\n// ----------------------------------------------------------------------\n// Reducer\n// ----------------------------------------------------------------------\n\nexport const configReducer = (state: ConfigState = initialConfigState, action: ConfigActions): ConfigState => {\n    switch (action.type) {\n        case \"CONFIG_INIT\": {\n            // remember dark mode toggle for easier debugging\n            const locallyStoredTheme = JSON.parse(\n                localStorage.getItem(generateThemeStorageKey(action.config.id)) || \"{}\",\n            );\n            return {\n                ...initialConfigState,\n                ...action.config,\n                initialized: true,\n                groups: action.config.groups.map((group) => ({\n                    ...group,\n                    questions: group.questions.map(populateQuestionHash),\n                })),\n                theme: {\n                    ...initialConfigState.theme,\n                    ...action.config.theme,\n                    ...locallyStoredTheme,\n                },\n                result: {\n                    ...initialConfigState.result,\n                    ...action.config.result,\n                },\n                settings: {\n                    ...initialConfigState.settings,\n                    ...action.config.settings,\n                },\n            };\n        }\n        case \"CONFIG_TOGGLE_THEME\": {\n            // remember dark mode toggle for easier debugging\n            localStorage.setItem(generateThemeStorageKey(state.id || \"\"), JSON.stringify({ darkMode: action.enabled }));\n            return { ...state, theme: { ...state.theme, darkMode: action.enabled } };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n","import { generateShowResultStorageKey, isDev } from \"../../utils/utils\";\nimport { ResultActions } from \"../actions/resultActions\";\n\n// ----------------------------------------------------------------------\n// Initial state\n// ----------------------------------------------------------------------\n\nexport const initialResultState = {\n    showResult: isDev() ? JSON.parse(localStorage.getItem(generateShowResultStorageKey()) || \"false\") : false, // remember setting for easier debugging\n    score: 0,\n    restartTimestamp: null as number | null,\n};\nexport type ResultState = typeof initialResultState;\n\n// ----------------------------------------------------------------------\n// Reducer\n// ----------------------------------------------------------------------\n\nexport const resultReducer = (state: ResultState = initialResultState, action: ResultActions): ResultState => {\n    switch (action.type) {\n        case \"RESULT_SET\": {\n            return {\n                ...state,\n                score: action.score,\n            };\n        }\n        case \"RESULT_SHOW\": {\n            // remember setting for easier debugging\n            if (isDev()) localStorage.setItem(generateShowResultStorageKey(), JSON.stringify(action.visible));\n            return {\n                ...state,\n                showResult: action.visible,\n            };\n        }\n        case \"RESULT_UPDATE_RESTART_TIMER\": {\n            return {\n                ...state,\n                restartTimestamp: action.timestamp,\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n","import { MessageType } from \"../../types/MessageTypes\";\nimport { MessagesActions } from \"../actions/messagesActions\";\n\n// ----------------------------------------------------------------------\n// Initial state\n// ----------------------------------------------------------------------\n\nexport const initialMessagesState = {\n    list: [] as MessageType[],\n};\nexport type MessagesState = typeof initialMessagesState;\n\n// ----------------------------------------------------------------------\n// Reducer\n// ----------------------------------------------------------------------\n\nexport const messagesReducer = (\n    state: MessagesState = initialMessagesState,\n    action: MessagesActions,\n): MessagesState => {\n    switch (action.type) {\n        case \"MESSAGES_ADD\": {\n            const lastId = state.list[state.list.length - 1]?.id || 0;\n            return {\n                ...state,\n                list: [...state.list, ...action.messages.map((input, index) => ({ ...input, id: lastId + index + 1 }))],\n            };\n        }\n        case \"MESSAGES_REMOVE\": {\n            return {\n                ...state,\n                list: [...state.list.filter((message) => message.id !== action.messageId)],\n            };\n        }\n        case \"MESSAGES_CLEAR\": {\n            return {\n                ...state,\n                list: [],\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport { createStore, combineReducers, MiddlewareAPI, Dispatch, Store } from \"redux\";\nimport { useSelector, TypedUseSelectorHook, useDispatch, useStore } from \"react-redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { middlewares } from \"./storeMiddleware\";\nimport { listeners } from \"./storeListener\";\nimport { answersReducer, initialAnswersState } from \"./reducers/answersReducer\";\nimport { AnswersActions } from \"./actions/answersActions\";\nimport { configReducer, initialConfigState } from \"./reducers/configReducer\";\nimport { ConfigActions } from \"./actions/configActions\";\nimport { resultReducer, initialResultState } from \"./reducers/resultReducer\";\nimport { ResultActions } from \"./actions/resultActions\";\nimport { messagesReducer, initialMessagesState } from \"./reducers/messagesReducer\";\nimport { MessagesActions } from \"./actions/messagesActions\";\n\nconst rootReducer = combineReducers({\n    answers: answersReducer,\n    config: configReducer,\n    result: resultReducer,\n    messages: messagesReducer,\n});\n\nexport const initialStoreState = {\n    answers: initialAnswersState,\n    config: initialConfigState,\n    result: initialResultState,\n    messages: initialMessagesState,\n};\n\nexport type StateType = typeof initialStoreState;\nexport type ActionsType = AnswersActions | ConfigActions | ResultActions | MessagesActions;\nexport type StoreApiType = MiddlewareAPI<Dispatch<ActionsType>, StateType>;\nexport type StoreType = Store<StateType, ActionsType>;\n\nexport const useStoreSelector: TypedUseSelectorHook<StateType> = useSelector;\nexport const useStoreDispatch: () => Dispatch<ActionsType> = useDispatch;\nexport const useTypedStore: () => StoreType = useStore;\n\nconst createNewStore = (): StoreType => {\n    const enhancers = composeWithDevTools(middlewares);\n    const store = createStore(rootReducer, initialStoreState, enhancers);\n    listeners.forEach((listener) => store.subscribe(() => listener(store)));\n    return store;\n};\n\nexport default createNewStore;\n","import { DefaultTheme } from \"styled-components\";\n\n// prettier-ignore\nexport const palettes = {\n    // generated by https://material.io/design/color/the-color-system.html#color-theme-creation\n    primary: [\"#fdebee\", \"#fbcdd1\", \"#e99a9a\", \"#dd7473\", \"#e55751\", \"#e94839\", \"#db3f37\", \"#c93631\", \"#bc302b\", \"#ac2720\"],\n    secondary: [\"#fefbe8\", \"#fcf5c5\", \"#faeea0\", \"#f8e87c\", \"#f6e362\", \"#f4dd4b\", \"#f2cd47\", \"#eeb640\", \"#e9a039\", \"#e17a2d\"],\n    // 8 stops between 000 and fff at percentages: 0%, 3%, 6%, 9%, 15%, 21%, 36%, 57%, 93%, 100% (and 100% - x) (https://www.joshuamiron.com/percent-to-hex-converter)\n    neutralLight: [\"#ffffff\", \"#f7f7f7\", \"#f0f0f0\", \"#e8e8e8\", \"#d9d9d9\", \"#c9c9c9\", \"#a3a3a3\", \"#6e6e6e\", \"#121212\", \"#000000\"],\n    neutralDark: [\"#000000\", \"#080808\", \"#0f0f0f\", \"#171717\", \"#262626\", \"#363636\", \"#5c5c5c\", \"#919191\", \"#ededed\", \"#ffffff\"],\n};\n\nconst colors = {\n    // general colors\n    primary: palettes.primary[8],\n    back: palettes.neutralLight[0],\n    surface: palettes.neutralLight[1],\n    error: palettes.secondary[9],\n    // text on general colors\n    onPrimary: palettes.neutralLight[0],\n    onBack: palettes.neutralLight[7],\n    onSurface: palettes.neutralLight[8],\n    onError: palettes.neutralLight[1],\n    // input controls\n    controlBack: palettes.neutralLight[0],\n    controlBackHover: palettes.neutralLight[2],\n    controlBackDisabled: palettes.neutralLight[2],\n    controlOnBackDisabled: palettes.neutralLight[6],\n    controlHighlight: palettes.primary[8],\n    controlHighlightActive: palettes.primary[6],\n    controlBorder: palettes.neutralLight[6],\n    controlBorderHover: palettes.neutralLight[8],\n    controlBorderActive: palettes.neutralLight[7],\n    controlPlaceholder: palettes.neutralLight[6],\n    controlTick: palettes.neutralLight[6],\n    controlSliderBack: palettes.neutralLight[6],\n    controlSliderDisabled: palettes.neutralLight[4],\n    controlSliderOnDisabled: palettes.neutralLight[6],\n    controlButton: palettes.primary[8],\n    controlOnButton: palettes.neutralLight[0],\n    controlButtonDisabled: palettes.neutralLight[4],\n    controlOnButtonDisabled: palettes.neutralLight[8],\n    // messages\n    messageInfo: \"#BBDEFB\",\n    messageInfoBorder: \"#2196F3\",\n    onMessageInfo: \"#1976D2\",\n    messageError: \"#FFCDD2\",\n    messageErrorBorder: \"#F44336\",\n    onMessageError: \"#D32F2F\",\n    messageNeutral: palettes.neutralLight[3],\n    messageNeutralBorder: palettes.neutralLight[6],\n    onMessageNeutral: palettes.neutralLight[8],\n    // other colors\n    shadow: palettes.neutralLight[7],\n    spinner: palettes.primary[9],\n    icon: palettes.neutralLight[6],\n    iconHover: palettes.neutralLight[7],\n    separator: palettes.neutralLight[4],\n    // score counter\n    scoreCounterFront: palettes.primary[8],\n    scoreCounterBack: palettes.neutralLight[3],\n};\n\nconst sizes = {\n    // general\n    radius: \"4px\",\n    title: \"32px\",\n    subtitle: \"18px\",\n    footer: \"14px\",\n    // inputs\n    controlWidthSingle: \"150px\",\n    controlWidthMulti: \"250px\",\n    controlBorder: \"2px\",\n    controlCheckOffset: \"2px\",\n    controlRadioOffset: \"3px\",\n    controlError: \"14px\",\n    controlSliderRailHeight: \"6px\",\n    controlSliderTrackHeight: \"12px\",\n    controlSliderHandleSize: \"24px\",\n    buttonTextSize: \"16px\",\n    // scoreCounter\n    scoreCounterSize: \"200px\",\n    scoreCounterThickness: \"20px\",\n};\n\nconst zIndex = {\n    checkmark: 1,\n    tooltip: 1,\n    selectValue: 1,\n    sliderTrack: 1,\n    sliderHandle: 2,\n    messages: 3,\n    debug: 4,\n};\n\nconst elevation = {\n    question: 1,\n    button: 2,\n    dropdown: 2,\n    tooltip: 3,\n    message: 3,\n};\n\n// ----------------------------------------------------------------------\n// Typing\n// ----------------------------------------------------------------------\n\ntype FontFamiliesType = \"title\" | \"description\" | \"question\" | \"text\";\ntype SizeType = keyof typeof sizes;\nexport type BreakpointType = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\";\nexport type ColorType = keyof typeof colors;\n\ndeclare module \"styled-components\" {\n    export interface DefaultTheme {\n        colors: { [color in ColorType]: string };\n        fonts: { [font in FontFamiliesType]: string };\n        breakpoints: { [bp in BreakpointType]: string };\n        sizes: { [size in SizeType]: string };\n        zIndex: { [index in keyof typeof zIndex]: number };\n        elevation: { [elevation in keyof typeof elevation]: number };\n        space: number[];\n    }\n}\n\n// ----------------------------------------------------------------------\n// Default theme\n// ----------------------------------------------------------------------\n\nconst lightTheme: DefaultTheme = {\n    colors,\n    sizes,\n    zIndex,\n    elevation,\n    fonts: {\n        // leave empty so it defaults to site wide font\n        title: \"\",\n        description: \"\",\n        question: \"\",\n        text: \"\",\n    },\n    breakpoints: {\n        xs: \"0px\",\n        sm: \"576px\",\n        md: \"768px\",\n        lg: \"992px\",\n        xl: \"1200px\",\n    },\n    space: [0, 4, 8, 16, 32, 64],\n};\n\nconst darkTheme: DefaultTheme = {\n    ...lightTheme,\n    colors: {\n        ...lightTheme.colors,\n        // general colors\n        primary: palettes.primary[9],\n        back: palettes.neutralDark[2],\n        surface: palettes.neutralDark[3],\n        error: palettes.secondary[9],\n        // text on general colors\n        onPrimary: palettes.neutralDark[8],\n        onBack: palettes.neutralDark[7],\n        onSurface: palettes.neutralDark[8],\n        onError: palettes.neutralDark[8],\n        // input controls\n        controlBack: palettes.neutralDark[1],\n        controlBackHover: palettes.neutralDark[3],\n        controlBackDisabled: palettes.neutralDark[1],\n        controlOnBackDisabled: palettes.neutralDark[6],\n        controlBorder: palettes.neutralDark[4],\n        controlBorderHover: palettes.neutralDark[6],\n        controlBorderActive: palettes.neutralDark[5],\n        controlPlaceholder: palettes.neutralDark[6],\n        controlTick: palettes.neutralDark[7],\n        controlSliderBack: palettes.neutralDark[5],\n        controlSliderDisabled: palettes.neutralDark[4],\n        controlSliderOnDisabled: palettes.neutralDark[5],\n        controlButton: palettes.primary[8],\n        controlOnButton: palettes.neutralDark[8],\n        controlButtonDisabled: palettes.neutralDark[5],\n        controlOnButtonDisabled: palettes.neutralDark[8],\n        // messages\n        messageInfo: palettes.neutralDark[3],\n        messageInfoBorder: \"#1976D2\",\n        onMessageInfo: \"#2196F3\",\n        messageError: palettes.neutralDark[3],\n        messageErrorBorder: \"#D32F2F\",\n        onMessageError: \"#F44336\",\n        messageNeutral: palettes.neutralDark[3],\n        messageNeutralBorder: palettes.neutralDark[5],\n        onMessageNeutral: palettes.neutralDark[7],\n        // other colors\n        shadow: palettes.neutralDark[0],\n        icon: palettes.neutralDark[7],\n        iconHover: palettes.neutralDark[8],\n        separator: palettes.neutralDark[5],\n    },\n};\n\nexport const defaultThemes = {\n    lightTheme,\n    darkTheme,\n};\n\n// ----------------------------------------------------------------------\n// Helpers\n// ----------------------------------------------------------------------\n\n// https://gist.github.com/serglo/f9f0be9a66fd6755a0bda85f9c64e85f\nconst elevations = [\n    `0 1px 1px 0 #00000035, 0 2px 1px -1px #0000001e, 0 1px 3px 0 #00000033`,\n    `0 2px 2px 0 #00000035, 0 3px 1px -2px #0000001e, 0 1px 5px 0 #00000033`,\n    `0 3px 4px 0 #00000035, 0 3px 3px -2px #0000001e, 0 1px 8px 0 #00000033`,\n    `0 4px 5px 0 #00000035, 0 1px 10px 0 #0000001e, 0 2px 4px -1px #00000033`,\n    `0 6px 10px 0 #00000035, 0 1px 18px 0 #0000001e, 0 3px 5px -1px #00000033`,\n    `0 8px 10px 1px #00000035, 0 3px 14px 2px #0000001e, 0 5px 5px -3px #00000033`,\n    `0 9px 12px 1px #00000035, 0 3px 16px 2px #0000001e, 0 5px 6px -3px #00000033`,\n    `0 12px 17px 2px #00000035, 0 5px 22px 4px #0000001e, 0 7px 8px -4px #00000033`,\n    `0 16px 24px 2px #00000035, 0 6px 30px 5px #0000001e, 0 8px 10px -5px #00000033`,\n    `0 24px 38px 3px #00000035, 0 9px 46px 8px #0000001e, 0 11px 15px -7px #00000033`,\n];\nexport const getElevation = (level: number) => ({ theme }: { theme: DefaultTheme }): string =>\n    (elevations[level] || \"\").replace(/#000000/g, theme.colors.shadow);\n","import styled, { css } from \"styled-components\";\nimport { ImageType } from \"../../types/CommonTypes\";\n\nexport const imageAlignmentStyles = css<{ imagePosition?: ImageType[\"alignment\"] }>`\n    ${({ imagePosition }) =>\n        imagePosition &&\n        css`\n            display: flex;\n            flex-direction: ${imagePosition === \"right\" ? \"row\" : \"column\"};\n            justify-content: space-between;\n\n            > ${Image} {\n                align-self: ${imagePosition === \"left\" ? \"flex-start\" : \"center\"};\n                margin-top: ${({ theme }) => (imagePosition === \"right\" ? 0 : theme.space[3])}px;\n                margin-left: ${({ theme }) => (imagePosition === \"right\" ? theme.space[4] : 0)}px;\n            }\n        `};\n`;\n\nexport const ImageWrapper = styled.div<{ imagePosition?: ImageType[\"alignment\"] }>`\n    ${imageAlignmentStyles};\n`;\n\nexport const Image = styled.img<{ widthPercentage?: number }>`\n    ${({ widthPercentage }) =>\n        widthPercentage\n            ? css`\n                  width: ${widthPercentage * 100}%;\n              `\n            : \"\"}\n`;\n","import styled, { css } from \"styled-components\";\nimport { SpaceProps, space } from \"styled-system\";\nimport { ImageType } from \"../../types/CommonTypes\";\nimport { getElevation } from \"../../utils/theme\";\nimport { imageAlignmentStyles } from \"./Image\";\n\nexport const Question = styled.article<SpaceProps & { imagePosition?: ImageType[\"alignment\"] }>`\n    background-color: ${({ theme }) => theme.colors.surface};\n    color: ${({ theme }) => theme.colors.onSurface};\n    box-shadow: ${({ theme }) => getElevation(theme.elevation.question)};\n    border-radius: ${({ theme }) => theme.sizes.radius};\n    ${space};\n\n    ${imageAlignmentStyles}\n    ${({ imagePosition }) =>\n        imagePosition &&\n        css`\n            flex-direction: ${imagePosition === \"right\" ? \"row-reverse\" : \"column\"};\n        `};\n`;\n\nQuestion.defaultProps = {\n    marginY: 4,\n    paddingY: 3,\n    paddingX: { xs: 3, lg: 4 },\n};\n\nexport const Title = styled.h2`\n    margin: ${({ theme }) => theme.space[3]}px 0;\n    font-family: ${({ theme }) => theme.fonts.question};\n    font-size: ${({ theme }) => theme.sizes.subtitle};\n    font-weight: normal;\n`;\n\nexport const ErrorPanel = styled.div`\n    margin-top: ${({ theme }) => theme.space[4]}px;\n    padding-top: ${({ theme }) => theme.space[3]}px;\n    border-top: 1px solid ${({ theme }) => theme.colors.separator};\n\n    p {\n        text-align: center;\n    }\n`;\n\nexport const ErrorList = styled.ul`\n    li {\n        color: ${({ theme }) => theme.colors.error};\n        cursor: pointer;\n    }\n`;\n","import styled, { css } from \"styled-components\";\nimport { SpaceProps, space, TextAlignProps, textAlign } from \"styled-system\";\nimport { BreakpointType } from \"../../utils/theme\";\nimport { ImageWrapper } from \"./Image\";\nimport { Question } from \"./Question\";\n\nexport const Container = styled.div<SpaceProps & { maxBreakpoint?: BreakpointType }>`\n    max-width: ${({ theme, maxBreakpoint }) => theme.breakpoints[maxBreakpoint || \"xl\"]};\n    ${space};\n`;\nContainer.defaultProps = {\n    marginX: \"auto\",\n    paddingX: { xs: 0, sm: 2, lg: 3 },\n};\n\nexport const Line = styled.hr`\n    display: none;\n    margin: ${({ theme }) => theme.space[5]}px 0;\n    border-top: 1px solid ${({ theme }) => theme.colors.separator};\n`;\n\nexport const Header = styled.h1`\n    font-size: ${({ theme }) => theme.sizes.title};\n    font-family: ${({ theme }) => theme.fonts.title};\n    text-align: center;\n`;\n\nexport const Description = styled.div<SpaceProps>`\n    font-family: ${({ theme }) => theme.fonts.description};\n    white-space: pre-wrap;\n    ${space};\n`;\nDescription.defaultProps = {\n    paddingX: { xs: 2, lg: 5 },\n};\n\nexport const Group = styled.div<{ showSeparator?: boolean; accentColor?: string; questionBackgroundColor?: string }>`\n    ${({ theme, showSeparator }) =>\n        showSeparator &&\n        css`\n            ${Line} {\n                display: block;\n            }\n\n            ${Description} {\n                padding-left: 0;\n                padding-right: 0;\n            }\n\n            ${ImageWrapper} {\n                margin: -${theme.space[3]}px;\n                margin-bottom: ${theme.space[3]}px;\n                padding: 0 ${theme.space[5]}px;\n            }\n        `}\n\n    ${Question} {\n        ${({ accentColor }) =>\n            accentColor\n                ? css`\n                      border-left: 6px solid ${accentColor};\n                  `\n                : \"\"};\n\n        ${({ questionBackgroundColor }) =>\n            questionBackgroundColor\n                ? css`\n                      background-color: ${questionBackgroundColor};\n                  `\n                : \"\"};\n    }\n`;\n\nexport const Footer = styled(Container)<TextAlignProps>`\n    font-size: ${({ theme }) => theme.sizes.footer};\n    font-style: italic;\n    ${textAlign};\n`;\nFooter.defaultProps = {\n    marginY: 4,\n    textAlign: { _: \"center\", md: \"right\" },\n};\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"\n});\n\nvar SvgInfoCircleSolid = function SvgInfoCircleSolid(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"info-circle\",\n    className: \"svg-inline--fa fa-info-circle fa-w-16\",\n    role: \"img\",\n    viewBox: \"0 0 512 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgInfoCircleSolid, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/info-circle-solid.d9a24d05.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z\"\n});\n\nvar SvgTimesCircleSolid = function SvgTimesCircleSolid(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"times-circle\",\n    className: \"svg-inline--fa fa-times-circle fa-w-16\",\n    role: \"img\",\n    viewBox: \"0 0 512 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgTimesCircleSolid, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/times-circle-solid.bb7daa97.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M288.662 352H31.338c-17.818 0-26.741-21.543-14.142-34.142l128.662-128.662c7.81-7.81 20.474-7.81 28.284 0l128.662 128.662c12.6 12.599 3.676 34.142-14.142 34.142z\"\n});\n\nvar SvgCaretUpSolid = function SvgCaretUpSolid(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"caret-up\",\n    className: \"svg-inline--fa fa-caret-up fa-w-10\",\n    role: \"img\",\n    viewBox: \"0 0 320 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgCaretUpSolid, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/caret-up-solid.f1c37d9b.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"\n});\n\nvar SvgCheckSolid = function SvgCheckSolid(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"check\",\n    className: \"svg-inline--fa fa-check fa-w-16\",\n    role: \"img\",\n    viewBox: \"0 0 512 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgCheckSolid, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/check-solid.e597acab.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"\n});\n\nvar SvgExclamationTriangleSolid = function SvgExclamationTriangleSolid(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"exclamation-triangle\",\n    className: \"svg-inline--fa fa-exclamation-triangle fa-w-18\",\n    role: \"img\",\n    viewBox: \"0 0 576 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgExclamationTriangleSolid, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/exclamation-triangle-solid.a35f82b9.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zm-28.9 143.6l75.5 72.4H120c-13.3 0-24 10.7-24 24v16c0 13.3 10.7 24 24 24h182.6l-75.5 72.4c-9.7 9.3-9.9 24.8-.4 34.3l11 10.9c9.4 9.4 24.6 9.4 33.9 0L404.3 273c9.4-9.4 9.4-24.6 0-33.9L271.6 106.3c-9.4-9.4-24.6-9.4-33.9 0l-11 10.9c-9.5 9.6-9.3 25.1.4 34.4z\"\n});\n\nvar SvgArrowCircleRightSolid = function SvgArrowCircleRightSolid(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"arrow-circle-right\",\n    className: \"svg-inline--fa fa-arrow-circle-right fa-w-16\",\n    role: \"img\",\n    viewBox: \"0 0 512 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgArrowCircleRightSolid, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/arrow-circle-right-solid.e7f07410.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"\n});\n\nvar SvgTimesSolid = function SvgTimesSolid(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    \"aria-hidden\": \"true\",\n    focusable: \"false\",\n    \"data-prefix\": \"fas\",\n    \"data-icon\": \"times\",\n    className: \"svg-inline--fa fa-times fa-w-11\",\n    role: \"img\",\n    viewBox: \"0 0 352 512\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgTimesSolid, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/times-solid.2c5552a1.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { ColorType } from \"../../utils/theme\";\nimport { ReactComponent as IconInfo } from \"../../svg/info-circle-solid.svg\";\nimport { ReactComponent as IconCloseCircle } from \"../../svg/times-circle-solid.svg\";\nimport { ReactComponent as IconUpCaret } from \"../../svg/caret-up-solid.svg\";\nimport { ReactComponent as IconCheck } from \"../../svg/check-solid.svg\";\nimport { ReactComponent as IconError } from \"../../svg/exclamation-triangle-solid.svg\";\nimport { ReactComponent as IconNext } from \"../../svg/arrow-circle-right-solid.svg\";\nimport { ReactComponent as IconClose } from \"../../svg/times-solid.svg\";\n\n// ----------------------------------------------------------------------\n// Icons\n// ----------------------------------------------------------------------\n\nconst icons = {\n    info: IconInfo,\n    closeCircle: IconCloseCircle,\n    upCaret: IconUpCaret,\n    check: IconCheck,\n    error: IconError,\n    next: IconNext,\n    close: IconClose,\n};\ntype IconType = keyof typeof icons;\nexport const iconTypes = Object.keys(icons) as IconType[];\n\n// ----------------------------------------------------------------------\n// Styling wrappers\n// ----------------------------------------------------------------------\n\nexport enum orientations { // values are numbers so they represent quadrants\n    \"up\" = 0,\n    \"right\" = 1,\n    \"down\" = 2,\n    \"left\" = 3,\n}\n\ntype SvgProps = { size?: number; color?: ColorType; orientation?: orientations };\nexport const IconWrapper = styled.span<SvgProps>`\n    &:hover svg {\n        color: ${({ theme, color }) => (color ? theme.colors[color] : theme.colors.iconHover)};\n    }\n\n    svg {\n        position: relative;\n        top: 2px;\n        align-self: center;\n\n        color: ${({ theme, color }) => (color ? theme.colors[color] : theme.colors.icon)};\n        width: 1em;\n        height: 1em;\n        transition: transform 0.3s, width 0.3s, height 0.3s, color 0.3s;\n        transform-origin: center;\n\n        ${({ orientation }) =>\n            orientation &&\n            css`\n                transform: rotate(${orientation * 90}deg);\n            `};\n\n        ${({ size }) =>\n            size &&\n            css`\n                width: ${size}px;\n                height: ${size}px;\n            `};\n    }\n`;\n\ntype PropsType = SvgProps & { type: IconType; onClick?: (event: React.SyntheticEvent) => void };\nconst Icon = (props: PropsType): JSX.Element => {\n    const Component = icons[props.type];\n    return (\n        <IconWrapper {...props}>\n            <Component />\n        </IconWrapper>\n    );\n};\n\nexport default Icon;\n","import styled, { css, DefaultTheme } from \"styled-components\";\nimport { width, WidthProps } from \"styled-system\";\nimport { IconWrapper } from \"../common/Icon\";\nimport { getElevation } from \"../../utils/theme\";\n\nconst baseColors = css`\n    background-color: ${({ theme }) => theme.colors.controlBack};\n    border-width: ${({ theme }) => theme.sizes.controlBorder};\n    border-color: ${({ theme }) => theme.colors.controlBorder};\n    border-style: solid;\n    transition: border 0.3s;\n    outline: none;\n`;\n\nconst baseMargin = css`\n    margin-top: ${({ theme }) => theme.space[1]}px;\n    margin-right: ${({ theme }) => theme.space[2]}px;\n    margin-bottom: ${({ theme }) => theme.space[1]}px;\n    margin-left: 0;\n`;\n\nconst basePadding = css`\n    padding: ${({ theme }) => `${theme.space[2]}px ${theme.space[3]}px`};\n`;\n\n// ----------------------------------------------------------------------\n// Checkbox\n// ----------------------------------------------------------------------\n\nexport const Checkbox = styled.div<{ checked?: boolean }>`\n    ${baseColors};\n    ${baseMargin};\n    position: relative;\n    display: inline-block;\n    width: 1em;\n    height: 1em;\n    border-color: ${({ theme, checked }) => (checked ? theme.colors.controlBorderActive : theme.colors.controlBorder)};\n    border-radius: ${({ theme }) => theme.sizes.radius};\n    overflow: hidden;\n\n    /* Invisible placeholder in front of checkmark icon to make check animation */\n    &::after {\n        content: \"\";\n        display: inline-block;\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: ${({ checked }) => (checked ? 100 : 0)}%;\n        bottom: 0;\n        z-index: ${({ theme }) => theme.zIndex.checkmark};\n        background-color: ${({ theme }) => theme.colors.controlBack};\n        transition: left 0.3s;\n    }\n\n    /* Check icon */\n    svg {\n        top: 0;\n        width: calc(100% - (${({ theme }) => theme.sizes.controlCheckOffset} * 2));\n        height: calc(100% - (${({ theme }) => theme.sizes.controlCheckOffset} * 2));\n        margin: ${({ theme }) => theme.sizes.controlCheckOffset};\n        vertical-align: super;\n    }\n`;\n\n// ----------------------------------------------------------------------\n// Radio button\n// ----------------------------------------------------------------------\n\nexport const RadioButton = styled.div<{ checked?: boolean }>`\n    ${baseColors};\n    ${baseMargin};\n    position: relative;\n    display: inline-block;\n    width: 1em;\n    height: 1em;\n    border-color: ${({ theme, checked }) => (checked ? theme.colors.controlBorderActive : theme.colors.controlBorder)};\n    border-radius: 100%;\n\n    /* Colored bullet */\n    &::before {\n        content: \"\";\n        display: inline-block;\n        position: absolute;\n        ${({ theme }) => css`\n            top: ${theme.sizes.controlRadioOffset};\n            right: ${theme.sizes.controlRadioOffset};\n            bottom: ${theme.sizes.controlRadioOffset};\n            left: ${theme.sizes.controlRadioOffset};\n        `};\n        border-radius: 50%;\n        background-color: ${({ theme }) => theme.colors.controlHighlight};\n\n        /* animation */\n        transition: opacity 0.3s, transform 0.3s;\n        transform-origin: center;\n        ${({ checked }) => css`\n            opacity: ${checked ? 1 : 0};\n            transform: scale(${checked ? 1 : 0.35});\n        `};\n    }\n`;\n\nexport const RadioListWrapper = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    gap: ${({ theme }) => theme.space[4]}px;\n    margin-top: ${({ theme }) => theme.space[2]}px;\n`;\n\n// ----------------------------------------------------------------------\n// Select\n// ----------------------------------------------------------------------\n\nexport const SelectWrapper = styled.div`\n    * {\n        box-sizing: border-box;\n        user-select: none;\n    }\n`;\n\nexport const SelectValue = styled.div<{ opened?: boolean; disabled?: boolean }>`\n    ${baseColors};\n    ${baseMargin};\n    ${basePadding};\n    position: relative;\n    z-index: ${({ theme }) => theme.zIndex.selectValue}; /* necessary to hide dropdown animation */\n\n    display: inline-flex;\n    justify-content: space-between;\n    min-width: 150px;\n    border-radius: ${({ theme }) => theme.sizes.radius};\n    cursor: pointer;\n\n    > * > svg {\n        margin-left: ${({ theme }) => theme.space[2]}px;\n    }\n\n    ${({ opened, disabled }) =>\n        !opened &&\n        !disabled && // default, not opened styles\n        css`\n            &:hover {\n                border-color: ${({ theme }) => theme.colors.controlBorderHover};\n            }\n\n            &:hover > * > svg {\n                color: ${({ theme }) => theme.colors.iconHover};\n            }\n        `};\n\n    ${({ opened }) =>\n        opened && // opened styles\n        css`\n            border-bottom-right-radius: 0px;\n            border-bottom-left-radius: 0px;\n\n            > * > svg {\n                color: ${({ theme }) => theme.colors.controlBorderActive};\n            }\n        `};\n\n    ${({ disabled, theme }) =>\n        disabled && // disabled styles\n        css`\n            cursor: default;\n            background-color: ${theme.colors.controlBackDisabled};\n            color: ${theme.colors.controlOnBackDisabled};\n        `}\n`;\n\nexport const SelectDropdown = styled.ul<{ show: boolean }>`\n    ${baseColors}\n    position: absolute;\n    display: block;\n    min-width: 150px;\n    margin: 0;\n    margin-top: calc(-1 * (${({ theme }) => theme.space[1]}px + ${({ theme }) => theme.sizes.controlBorder}));\n    padding: 0;\n    list-style: none;\n    border-bottom-right-radius: ${({ theme }) => theme.sizes.radius};\n    border-bottom-left-radius: ${({ theme }) => theme.sizes.radius};\n    box-shadow: ${({ theme }) => getElevation(theme.elevation.dropdown)};\n\n    /* animation */\n    transform-origin: top;\n    transition: opacity 0.3s, transform 0.3s;\n    ${({ show, theme }) => css`\n        opacity: ${show ? 1 : 0};\n        pointer-events: ${show ? \"initial\" : \"none\"};\n        transform: translateY(${show ? 0 : -theme.space[2]}px);\n    `};\n`;\n\nexport const SelectOption = styled.li`\n    ${basePadding};\n    cursor: pointer;\n    transition: background 0.3s;\n\n    &:not(:first-child) {\n        border-top: 1px solid ${({ theme }) => theme.colors.controlBorder};\n    }\n\n    &:hover {\n        background-color: ${({ theme }) => theme.colors.controlBackHover};\n    }\n`;\n\n// ----------------------------------------------------------------------\n// Shared Label\n// ----------------------------------------------------------------------\n\nexport const Label = styled.div<{ disabled?: boolean }>`\n    display: flex;\n    align-items: center;\n    user-select: none;\n\n    ${({ disabled, theme }) =>\n        disabled\n            ? css`\n                  /* Box around the checkmark / radio-bullet */\n                  ${RadioButton}, ${Checkbox} {\n                      background-color: ${theme.colors.controlBackDisabled};\n                      color: ${theme.colors.controlOnBackDisabled};\n                  }\n\n                  /* Style disabled state of the radio-bullet */\n                  ${RadioButton}::before {\n                      background-color: ${theme.colors.controlOnBackDisabled};\n                  }\n\n                  /* Style disabled state of the checkmark overlay that causes the check-animation */\n                  ${Checkbox}::after {\n                      background-color: ${theme.colors.controlBackDisabled};\n                  }\n              `\n            : css`\n                  /* Hover styling when not disabled */\n                  cursor: pointer;\n                  &:hover {\n                      ${RadioButton}, ${Checkbox} {\n                          border-color: ${({ theme }) => theme.colors.controlBorderHover};\n                      }\n                  }\n              `}\n`;\n\nexport const BottomLabel = styled(Label)`\n    flex-direction: column;\n    justify-content: end;\n    text-align: center;\n    color: ${({ theme }) => theme.colors.controlTick};\n\n    ${RadioButton}, ${Checkbox} {\n        margin-right: 0;\n    }\n`;\n\n// ----------------------------------------------------------------------\n// Text\n// ----------------------------------------------------------------------\n\nexport const TextFieldWrapper = styled.div`\n    overflow-x: auto;\n`;\n\nexport const TextField = styled.input<{ isError?: boolean; rows?: number }>`\n    ${baseColors};\n    ${baseMargin};\n    ${basePadding};\n    width: ${({ theme, rows }) => (rows && rows > 1 ? theme.sizes.controlWidthMulti : theme.sizes.controlWidthSingle)};\n    min-width: ${({ theme, rows }) =>\n        rows && rows > 1 ? theme.sizes.controlWidthMulti : theme.sizes.controlWidthSingle};\n    min-height: 15px;\n    border-radius: ${({ theme }) => theme.sizes.radius};\n    color: ${({ theme }) => theme.colors.onSurface};\n\n    &:hover,\n    &:focus,\n    &:active {\n        border-color: ${({ theme }) => theme.colors.controlBorderHover};\n    }\n\n    &:not([value=\"\"]) {\n        border-color: ${({ theme, isError }) => (isError ? theme.colors.error : theme.colors.controlBorderActive)};\n    }\n\n    &::placeholder {\n        color: ${({ theme }) => theme.colors.controlPlaceholder};\n    }\n\n    &:disabled {\n        background-color: ${({ theme }) => theme.colors.controlBackDisabled};\n        color: ${({ theme }) => theme.colors.controlOnBackDisabled};\n        border-color: ${({ theme }) => theme.colors.controlBorder};\n    }\n`;\n\nexport const FieldError = styled.div`\n    min-height: 1.5em;\n    line-height: 1.5;\n    font-size: ${({ theme }) => theme.sizes.controlError};\n    font-weight: 500;\n    color: ${({ theme }) => theme.colors.error};\n\n    ${IconWrapper} {\n        margin-right: 0.5em;\n        max-height: 100%;\n    }\n`;\n\n// ----------------------------------------------------------------------\n// Slider\n// ----------------------------------------------------------------------\n\nconst sliderTransition = css`\n    transition: all 0.15s;\n`;\n\ntype SliderDisabledType = { theme: DefaultTheme; disabled?: boolean };\n\nconst sliderDisabled = ({ disabled, theme }: SliderDisabledType) =>\n    disabled &&\n    css`\n        background-color: ${theme.colors.controlSliderDisabled};\n    `;\n\nconst sliderOnDisabled = ({ disabled, theme }: SliderDisabledType) =>\n    disabled &&\n    css`\n        background-color: ${theme.colors.controlSliderOnDisabled};\n    `;\n\nexport const SliderWrapper = styled.div<WidthProps>`\n    > div {\n        position: relative;\n        height: 30px;\n        margin-bottom: ${({ theme }) => theme.space[3]}px;\n        user-select: none;\n        ${width}\n    }\n`;\n\nexport const SliderRail = styled.div<{ disabled?: boolean }>`\n    position: absolute;\n    top: calc(50% - (${({ theme }) => theme.sizes.controlSliderRailHeight} / 2));\n    width: 100%;\n    height: ${({ theme }) => theme.sizes.controlSliderRailHeight};\n    border-radius: ${({ theme }) => theme.sizes.radius};\n    background-color: ${({ theme }) => theme.colors.controlSliderBack};\n    ${sliderDisabled}\n`;\n\nexport const SliderTrack = styled.div<{ percent: number; disabled?: boolean }>`\n    position: absolute;\n    z-index: ${({ theme }) => theme.zIndex.sliderTrack};\n    top: calc(50% - (${({ theme }) => theme.sizes.controlSliderTrackHeight} / 2));\n    left: 0;\n    right: ${({ percent }) => 100 - percent}%;\n    height: ${({ theme }) => theme.sizes.controlSliderTrackHeight};\n    width: unset;\n    background-color: ${({ theme }) => theme.colors.primary};\n    border-radius: ${({ percent, theme }) => (percent === 100 ? theme.sizes.radius : \"initial\")};\n    border-top-left-radius: ${({ theme }) => theme.sizes.radius};\n    border-bottom-left-radius: ${({ theme }) => theme.sizes.radius};\n    ${sliderTransition};\n    ${sliderOnDisabled};\n`;\n\nexport const SliderHandle = styled.div<{ percent: number; disabled?: boolean }>`\n    position: absolute;\n    z-index: ${({ theme }) => theme.zIndex.sliderHandle};\n    top: calc(50% - (${({ theme }) => theme.sizes.controlSliderHandleSize} / 2));\n    left: ${({ percent }) => percent}%;\n    display: flex;\n    width: ${({ theme }) => theme.sizes.controlSliderHandleSize};\n    height: ${({ theme }) => theme.sizes.controlSliderHandleSize};\n    justify-content: center;\n    align-items: center;\n    background-color: ${({ theme }) => theme.colors.controlHighlight};\n    border-radius: 100%;\n    transform: translateX(-50%); /* pick center as handle reference point */\n    ${sliderTransition}\n    ${sliderOnDisabled}\n\n    ${({ disabled, theme }) =>\n        !disabled &&\n        css`\n            cursor: move;\n            &:hover,\n            &:focus,\n            &:active {\n                background-color: ${theme.colors.controlHighlightActive};\n            }\n        `}\n`;\n\nexport const SliderTick = styled.div<{ percent: number; disabled?: boolean }>`\n    position: absolute;\n    top: calc(50% - (${({ theme }) => theme.sizes.controlSliderTrackHeight} / 2));\n    left: ${({ percent }) => percent}%;\n    width: 2px;\n    height: ${({ theme }) => theme.sizes.controlSliderTrackHeight};\n    background-color: ${({ theme }) => theme.colors.controlSliderBack};\n    ${sliderDisabled}\n\n    &:first-of-type ${({ percent }) => (percent === 100 ? \", &:last-of-type\" : \"\")} {\n        display: none;\n    }\n`;\n\nexport const SliderTickLabel = styled.span<{ percent: number }>`\n    position: absolute;\n    top: 100%;\n    left: ${({ percent }) => percent}%;\n    color: ${({ theme }) => theme.colors.controlTick};\n    transform: translateX(-50%); /* pick center as tick reference point */\n`;\n","import React from \"react\";\nimport * as Styles from \"../styles/Input\";\nimport Icon from \"./Icon\";\n\ntype PropsType = {\n    checked?: boolean;\n    /** Disable user interaction and display the value faded out. */\n    disabled?: boolean;\n    /** Will be used as label. Clicking the label will also check the checkbox. */\n    children?: React.ReactNode;\n    onClick: (newValue: boolean) => void;\n};\n\nconst Checkbox = (props: PropsType): JSX.Element => {\n    const { checked, disabled, children, onClick } = props;\n    return (\n        <Styles.Label onClick={!disabled ? () => onClick(!checked) : undefined} disabled={disabled}>\n            <Styles.Checkbox checked={checked}>\n                <Icon type=\"check\" color={disabled ? \"controlOnBackDisabled\" : \"controlHighlight\"} />\n            </Styles.Checkbox>\n            {children}\n        </Styles.Label>\n    );\n};\n\nexport default Checkbox;\n","import styled, { css } from \"styled-components\";\nimport { IconWrapper } from \"../common/Icon\";\nimport { getElevation } from \"../../utils/theme\";\n\nconst TOOLTIP_BOUNDS_SIZE = 20;\n\nexport const TooltipContent = styled.span<{ show?: boolean }>`\n    position: absolute;\n    z-index: ${({ theme }) => theme.zIndex.tooltip};\n    max-width: 300px;\n    margin-top: -10px;\n    margin-left: -32px;\n    padding: 10px 15px;\n    color: ${({ theme }) => theme.colors.onSurface};\n    background-color: ${({ theme }) => theme.colors.surface};\n    box-shadow: ${({ theme }) => getElevation(theme.elevation.tooltip)};\n    border-radius: 4px;\n    transition: opacity 0.3s;\n\n    ${({ show }) => css`\n        opacity: ${show ? 1 : 0};\n        pointer-events: ${show ? \"initial\" : \"none\"};\n    `};\n\n    ${IconWrapper} {\n        margin-right: ${({ theme }) => theme.space[2]}px;\n    }\n`;\n\nexport const Tooltip = styled.span`\n    user-select: none;\n    cursor: pointer;\n\n    &::before {\n        content: \"\";\n        position: absolute;\n        display: inline-block;\n        box-sizing: border-box;\n        padding: ${TOOLTIP_BOUNDS_SIZE}px;\n        margin-top: -${TOOLTIP_BOUNDS_SIZE / 2}px;\n        margin-left: -${TOOLTIP_BOUNDS_SIZE / 2 - 3}px;\n        pointer-events: none;\n    }\n\n    > ${IconWrapper} {\n        margin-left: ${({ theme }) => theme.space[1]}px;\n    }\n`;\n","import React, { useState } from \"react\";\nimport { Tooltip, TooltipContent } from \"../styles/Tooltip\";\nimport Icon from \"./Icon\";\n\ntype HintablePropsType = {\n    /** This string can contain multiple `{hint}` placeholders. */\n    label: string;\n    /** Each usage of the `{hint}` placeholder needs to have a string in this array. Optional if no hints are used. */\n    hints?: string[];\n};\n\nconst Hint = (props: { content: string }): JSX.Element => {\n    const [opened, setOpened] = useState(false);\n    const onClick = (event: React.SyntheticEvent) => {\n        event.stopPropagation();\n        setOpened((prev) => !prev);\n    };\n\n    return (\n        <Tooltip>\n            <Icon type=\"info\" onClick={opened ? undefined : onClick} />\n            <TooltipContent show={opened} onClick={opened ? onClick : undefined}>\n                <Icon type=\"closeCircle\" color=\"iconHover\" />\n                {props.content}\n            </TooltipContent>\n        </Tooltip>\n    );\n};\n\nconst HintableLabel = (props: HintablePropsType): JSX.Element => {\n    const { label, hints } = props;\n    const parts = label.split(\"{hint}\");\n\n    if (hints && hints.length) {\n        if (parts.length <= 1) {\n            console.warn(`The label \"${label}\" has hints defined, but doesn't have \"{hint}\" placeholders.`);\n        } else if (hints.length !== parts.length - 1) {\n            console.warn(`The label \"${label}\" doesn't contain the same amount of hints as \"{hint}\" placeholders.`);\n        } else {\n            return (\n                <span>\n                    {parts.reduce((output, part, index) => {\n                        const hint = hints[index];\n                        return (\n                            <>\n                                {output}\n                                {part}\n                                {hint && <Hint content={hint} />}\n                            </>\n                        );\n                    }, <></>)}\n                </span>\n            );\n        }\n    }\n\n    if (parts.length > 1) {\n        console.warn(`The label \"${label}\" contains \"{hint}\" placeholders, but doesn't have hints defined.`);\n    }\n\n    return <span>{label}</span>;\n};\n\nexport default HintableLabel;\n","import React from \"react\";\nimport { useStoreDispatch, useStoreSelector, useTypedStore } from \"../../redux/store\";\nimport { SingleChoiceAnswerType } from \"../../types/AnswerTypes\";\nimport { SingleChoiceQuestionType } from \"../../types/QuestionTypes\";\nimport {\n    disableControlsSelector,\n    getQuestionAnswerSelector,\n    getQuestionScrollId,\n    onSingleAnswerClick,\n} from \"../../utils/utils\";\nimport Checkbox from \"../common/Checkbox\";\nimport HintableLabel from \"../common/HintableLabel\";\nimport Icon from \"../common/Icon\";\nimport { FieldError } from \"../styles/Input\";\nimport { Question, Title } from \"../styles/Question\";\nimport { Image } from \"../styles/Image\";\nimport { getValidAnswerData } from \"../../utils/validator\";\n\ntype PropsType = {\n    question: SingleChoiceQuestionType;\n};\n\nconst SingleChoiceQuestion = (props: PropsType): JSX.Element => {\n    const { question } = props;\n\n    const dispatch = useStoreDispatch();\n    const disableControl = useStoreSelector(disableControlsSelector);\n    const checked = useStoreSelector(getQuestionAnswerSelector<SingleChoiceAnswerType>(question)).value;\n\n    const store = useTypedStore();\n    const { error, showError } = getValidAnswerData(question, store);\n\n    return (\n        <Question\n            id={getQuestionScrollId(question)}\n            imagePosition={question.image ? question.image.alignment || \"left\" : undefined}\n        >\n            {question.image && (\n                <Image src={question.image.url} widthPercentage={question.image.size} alt={question.image.alt} />\n            )}\n\n            <div>\n                <Checkbox\n                    checked={checked || false}\n                    disabled={disableControl}\n                    onClick={() => onSingleAnswerClick(question, dispatch, !checked)}\n                >\n                    <Title>\n                        <HintableLabel label={question.title} hints={question.hints} />\n                    </Title>\n                </Checkbox>\n\n                {/* always render FieldError with min-height so showing the error doesn't move content on the page */}\n                <FieldError>\n                    {showError && (\n                        <>\n                            <Icon type=\"error\" color=\"error\" />\n                            {error}\n                        </>\n                    )}\n                </FieldError>\n            </div>\n        </Question>\n    );\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const SingleChoiceQuestionDoc = (props: SingleChoiceQuestionType): null => props && null;\n\nexport default SingleChoiceQuestion;\n","import React, { useEffect, useState } from \"react\";\nimport useLabel from \"../../hooks/useLabel\";\nimport { SelectDropdown, SelectOption, SelectWrapper, SelectValue } from \"../styles/Input\";\nimport Icon, { orientations } from \"./Icon\";\nimport HintableLabel from \"./HintableLabel\";\n\ntype PropsType = {\n    /** List of items in the dropdown. These options can contain hints (see HintableLabel for more info). */\n    options: { id: string; title: string; hints?: string[] }[];\n    /** Id of the already selected option */\n    selectedOptionId: string;\n    /** Callback run when the user clicks an option */\n    onSelectOption: (id: string) => void;\n    /** Disable user interaction and display the value faded out. */\n    disabled?: boolean;\n};\n\nconst Select = (props: PropsType): JSX.Element => {\n    const { options, selectedOptionId, onSelectOption, disabled } = props;\n    const placeholder = useLabel(\"inputSelectPlaceholder\", { count: options.length });\n    const [opened, setOpened] = useState(false);\n\n    const toggleOpen = () => !disabled && setOpened((prev) => !prev);\n    const selectedOption = options.find((option) => option.id === selectedOptionId);\n\n    useEffect(() => {\n        if (disabled) setOpened(false);\n    }, [disabled]);\n\n    return (\n        <SelectWrapper>\n            <SelectValue onClick={toggleOpen} opened={opened} disabled={disabled}>\n                <HintableLabel label={selectedOption?.title || placeholder || \"\"} hints={selectedOption?.hints || []} />\n                <Icon\n                    type=\"upCaret\"\n                    orientation={opened ? orientations.up : orientations.down}\n                    color={disabled ? \"controlOnBackDisabled\" : undefined}\n                />\n            </SelectValue>\n\n            <SelectDropdown show={opened}>\n                {options.map((option) => (\n                    <SelectOption\n                        key={option.id}\n                        onClick={() => {\n                            onSelectOption(option.id);\n                            toggleOpen();\n                        }}\n                    >\n                        <HintableLabel label={option.title} hints={option.hints} />\n                    </SelectOption>\n                ))}\n            </SelectDropdown>\n        </SelectWrapper>\n    );\n};\n\nexport default Select;\n","import React from \"react\";\nimport { useStoreDispatch, useStoreSelector, useTypedStore } from \"../../redux/store\";\nimport { MultipleChoiceAnswerType } from \"../../types/AnswerTypes\";\nimport { MultipleChoiceQuestionType } from \"../../types/QuestionTypes\";\nimport {\n    disableControlsSelector,\n    getQuestionAnswerSelector,\n    getQuestionScrollId,\n    onMultipleAnswerClick,\n} from \"../../utils/utils\";\nimport Checkbox from \"../common/Checkbox\";\nimport HintableLabel from \"../common/HintableLabel\";\nimport Icon from \"../common/Icon\";\nimport Select from \"../common/Select\";\nimport { FieldError, Label, RadioButton } from \"../styles/Input\";\nimport { Question, Title } from \"../styles/Question\";\nimport { Image } from \"../styles/Image\";\nimport { getValidAnswerData } from \"../../utils/validator\";\n\ntype PropsType = {\n    question: MultipleChoiceQuestionType;\n};\n\nconst MultipleChoiceQuestion = (props: PropsType): JSX.Element => {\n    const { question } = props;\n    const dispatch = useStoreDispatch();\n    const disableControl = useStoreSelector(disableControlsSelector);\n    const selectedIds = useStoreSelector(getQuestionAnswerSelector<MultipleChoiceAnswerType>(question)).values;\n\n    const store = useTypedStore();\n    const { error, showError } = getValidAnswerData(question, store);\n\n    return (\n        <Question\n            id={getQuestionScrollId(question)}\n            imagePosition={question.image ? question.image.alignment || \"right\" : undefined}\n        >\n            {question.image && (\n                <Image src={question.image.url} widthPercentage={question.image.size} alt={question.image.alt} />\n            )}\n\n            <div>\n                <Title>\n                    <HintableLabel label={question.title} hints={question.hints} />\n                </Title>\n\n                {question.inputType === \"radio\" &&\n                    question.options.map((option) => (\n                        <Label\n                            key={option.id}\n                            onClick={() =>\n                                !disableControl && onMultipleAnswerClick(question, dispatch, selectedIds, option.id)\n                            }\n                            disabled={disableControl}\n                        >\n                            <RadioButton checked={selectedIds.includes(option.id)} />\n                            <HintableLabel label={option.title} hints={option.hints} />\n                        </Label>\n                    ))}\n\n                {question.inputType === \"check\" &&\n                    question.options.map((option) => (\n                        <Checkbox\n                            key={option.id}\n                            checked={selectedIds.includes(option.id)}\n                            onClick={() => onMultipleAnswerClick(question, dispatch, selectedIds, option.id)}\n                            disabled={disableControl}\n                        >\n                            <HintableLabel label={option.title} hints={option.hints} />\n                        </Checkbox>\n                    ))}\n\n                {question.inputType === \"select\" && (\n                    <Select\n                        options={question.options}\n                        selectedOptionId={selectedIds[0]}\n                        onSelectOption={(value) => onMultipleAnswerClick(question, dispatch, selectedIds, value)}\n                        disabled={disableControl}\n                    />\n                )}\n\n                {/* always render FieldError with min-height so showing the error doesn't move content on the page */}\n                <FieldError>\n                    {showError && (\n                        <>\n                            <Icon type=\"error\" color=\"error\" />\n                            {error}\n                        </>\n                    )}\n                </FieldError>\n            </div>\n        </Question>\n    );\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const MultipleChoiceQuestionDoc = (props: MultipleChoiceQuestionType): null => props && null;\n\nexport default MultipleChoiceQuestion;\n","import React, { ChangeEvent } from \"react\";\nimport { useStoreDispatch, useStoreSelector, useTypedStore } from \"../../redux/store\";\nimport { TextAnswerType } from \"../../types/AnswerTypes\";\nimport { TextQuestionType } from \"../../types/QuestionTypes\";\nimport {\n    disableControlsSelector,\n    getQuestionAnswerSelector,\n    getQuestionScrollId,\n    onTextAnswerChange,\n} from \"../../utils/utils\";\nimport HintableLabel from \"../common/HintableLabel\";\nimport Icon from \"../common/Icon\";\nimport { FieldError, TextField, TextFieldWrapper } from \"../styles/Input\";\nimport { Question, Title } from \"../styles/Question\";\nimport { Image } from \"../styles/Image\";\nimport { getValidAnswerData } from \"../../utils/validator\";\n\ntype PropsType = {\n    question: TextQuestionType;\n};\n\nconst TextQuestion = (props: PropsType): JSX.Element => {\n    const { question } = props;\n\n    const dispatch = useStoreDispatch();\n    const disableControl = useStoreSelector(disableControlsSelector);\n    const { value } = useStoreSelector(getQuestionAnswerSelector<TextAnswerType>(question));\n\n    const store = useTypedStore();\n    const { error, showError, setFocussed } = getValidAnswerData(question, store);\n\n    return (\n        <Question\n            id={getQuestionScrollId(question)}\n            imagePosition={question.image ? question.image.alignment || \"right\" : undefined}\n        >\n            {question.image && (\n                <Image src={question.image.url} widthPercentage={question.image.size} alt={question.image.alt} />\n            )}\n\n            <TextFieldWrapper>\n                <Title>\n                    <HintableLabel label={question.title} hints={question.hints} />\n                </Title>\n\n                <TextField\n                    value={value}\n                    placeholder={question.placeholder || \"\"}\n                    isError={showError}\n                    onChange={(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) =>\n                        onTextAnswerChange(question, dispatch, event.target.value)\n                    }\n                    onBlur={setFocussed}\n                    disabled={disableControl}\n                    as={(question.rowCount || 1) > 1 ? \"textarea\" : undefined}\n                    rows={question.rowCount}\n                />\n\n                {/* always render FieldError with min-height so showing the error doesn't move content on the page */}\n                <FieldError>\n                    {showError && (\n                        <>\n                            <Icon type=\"error\" color=\"error\" />\n                            {error}\n                        </>\n                    )}\n                </FieldError>\n            </TextFieldWrapper>\n        </Question>\n    );\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const TextQuestionDoc = (props: TextQuestionType): null => props && null;\n\nexport default TextQuestion;\n","import React, { Fragment } from \"react\";\nimport { Slider as CompoundSlider, Rail, Handles, Tracks, Ticks } from \"react-compound-slider\";\nimport { useTheme } from \"styled-components\";\nimport { SliderWrapper, SliderRail, SliderHandle, SliderTick, SliderTrack, SliderTickLabel } from \"../styles/Input\";\nimport { RangeDirectionType } from \"../../types/QuestionTypes\";\nimport { BreakpointType } from \"../../utils/theme\";\n\ntype PropsType = {\n    /** Minimum allowed value */\n    min: number;\n    /** Maximum allowed value */\n    max: number;\n    /** Current value */\n    value: number;\n    /** The size of each step between slider positions / radio buttons. For example, setting this to 2 will only allow (un)even numbers. */\n    step: number;\n    /** Setting this to decrease will default to and put the maximum first. */\n    direction: RangeDirectionType;\n    /** Disable user interaction and display the value faded out. */\n    disabled?: boolean;\n    /** Will spread out this amount of ticks on the slider. */\n    tickCount?: number;\n    /** When set, the ticks will be displayed at these exact values. Will override the `tickCount` setting. */\n    tickValues?: number[];\n    /** When set, will override the tick labels (normally just the value). Use `null` to keep a tick label empty. */\n    tickLabels?: (string | null)[];\n    /** Callback run when value is changed by the user. */\n    onChange: (value: number) => void;\n    /** By default the slider's width is related to the breakpoints size for a pleasing effect. Set this to full the width instead. */\n    fullWidth?: boolean;\n};\n\nconst Slider = (props: PropsType): JSX.Element => {\n    const { min, max, value, step, direction, onChange, disabled, fullWidth } = props;\n    const { tickCount, tickValues, tickLabels } = props;\n    const { breakpoints, space } = useTheme();\n\n    // TODO: fix layout on tablet breakpoints\n    const size: BreakpointType = (max - min) / step > 15 ? \"md\" : \"sm\";\n\n    return (\n        <SliderWrapper width={fullWidth ? 1 : { xs: 1, [size]: parseInt(breakpoints[size]) - space[4] * 2 }}>\n            <CompoundSlider\n                mode={1}\n                domain={[min, max]}\n                step={step}\n                values={[value]}\n                reversed={direction === \"decrease\"}\n                onChange={(values) => onChange(values[0])}\n                disabled={disabled}\n            >\n                <Rail>{({ getRailProps }) => <SliderRail disabled={disabled} {...getRailProps()} />}</Rail>\n                <Handles>\n                    {({ handles, getHandleProps }) => (\n                        <div className=\"slider-handles\">\n                            {handles.map((handle) => (\n                                <SliderHandle\n                                    key={handle.id}\n                                    percent={handle.percent}\n                                    disabled={disabled}\n                                    {...getHandleProps(handle.id)}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </Handles>\n                <Tracks left={false} right>\n                    {({ tracks, getTrackProps }) => (\n                        <div className=\"slider-tracks\">\n                            {tracks.map(({ id, source }) => (\n                                <SliderTrack\n                                    key={id}\n                                    percent={source.percent}\n                                    disabled={disabled}\n                                    {...getTrackProps()}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </Tracks>\n                <Ticks count={tickCount} values={tickValues}>\n                    {({ ticks }) => (\n                        <div className=\"slider-ticks\">\n                            {ticks.map((tick, tickIndex) => (\n                                <Fragment key={tick.id}>\n                                    <SliderTick percent={tick.percent} disabled={disabled} />\n                                    <SliderTickLabel percent={tick.percent}>\n                                        {tickLabels?.[tickIndex] || tick.value}\n                                    </SliderTickLabel>\n                                </Fragment>\n                            ))}\n                        </div>\n                    )}\n                </Ticks>\n            </CompoundSlider>\n        </SliderWrapper>\n    );\n};\n\nexport default Slider;\n","import React from \"react\";\nimport { RangeDirectionType } from \"../../types/QuestionTypes\";\nimport { RadioListWrapper, BottomLabel, RadioButton } from \"../styles/Input\";\n\ntype PropsType = {\n    /** Minimum allowed value */\n    min: number;\n    /** Maximum allowed value */\n    max: number;\n    /** Current value */\n    value: number;\n    /** The size of each step between slider positions / radio buttons. For example, setting this to 2 will only allow (un)even numbers. */\n    step: number;\n    /** Setting this to decrease will default to and put the maximum first. */\n    direction: RangeDirectionType;\n    /** Disable user interaction and display the value faded out. */\n    disabled?: boolean;\n    /** When set, the ticks will be displayed at these exact values. Will override the `tickCount` setting. */\n    tickValues?: number[];\n    /** When set, will override the tick labels (normally just the value). Use `null` to keep a tick label empty. */\n    tickLabels?: (string | null)[];\n    /** Callback run when the user clicks a value */\n    onChange: (value: number) => void;\n};\n\nconst RadioSlider = (props: PropsType): JSX.Element => {\n    const { min, max, value, step, direction, tickValues, tickLabels, onChange, disabled } = props;\n\n    const radioTickValues =\n        tickValues ||\n        (new Array(max - min + 1)\n            .fill(null)\n            .map((_, index) => {\n                if (step && index % step !== 0) return null;\n                return min + index;\n            })\n            .filter((value, index) => value || index === 0) as number[]);\n\n    const ticks = direction === \"decrease\" ? radioTickValues.reverse() : radioTickValues;\n\n    return (\n        <RadioListWrapper>\n            {ticks.map((itemValue, index) => {\n                return (\n                    <BottomLabel key={itemValue} onClick={() => !disabled && onChange(itemValue)} disabled={disabled}>\n                        <RadioButton checked={value === itemValue} />\n                        <div>{tickLabels?.[index] || itemValue}</div>\n                    </BottomLabel>\n                );\n            })}\n        </RadioListWrapper>\n    );\n};\n\nexport default RadioSlider;\n","import React from \"react\";\nimport { RangeQuestionType } from \"../../types/QuestionTypes\";\nimport { Question, Title } from \"../styles/Question\";\nimport { Image } from \"../styles/Image\";\nimport { useStoreDispatch, useStoreSelector } from \"../../redux/store\";\nimport HintableLabel from \"../common/HintableLabel\";\nimport { RangeAnswerType } from \"../../types/AnswerTypes\";\nimport Slider from \"../common/Slider\";\nimport RadioSlider from \"../common/RadioSlider\";\nimport {\n    disableControlsSelector,\n    getQuestionAnswerSelector,\n    getQuestionScrollId,\n    getRangeQuestionDefaultProps,\n} from \"../../utils/utils\";\n\ntype PropsType = {\n    question: RangeQuestionType;\n};\n\nconst RangeQuestion = (props: PropsType): JSX.Element => {\n    const { question } = props;\n    const dispatch = useStoreDispatch();\n    const disableControl = useStoreSelector(disableControlsSelector);\n    const { value } = useStoreSelector(getQuestionAnswerSelector<RangeAnswerType>(question));\n\n    const sliderProps: React.ComponentProps<typeof Slider> | React.ComponentProps<typeof RadioSlider> = {\n        ...getRangeQuestionDefaultProps(question, dispatch, value),\n        disabled: disableControl,\n    };\n\n    return (\n        <Question\n            id={getQuestionScrollId(question)}\n            imagePosition={question.image ? question.image.alignment || \"right\" : undefined}\n        >\n            {question.image && (\n                <Image src={question.image.url} widthPercentage={question.image.size} alt={question.image.alt} />\n            )}\n\n            <div>\n                <Title>\n                    <HintableLabel label={question.title} hints={question.hints} />\n                </Title>\n\n                {question.inputType === \"slider\" && <Slider {...sliderProps} tickCount={question.tickCount} />}\n                {question.inputType === \"radio\" && <RadioSlider {...sliderProps} />}\n            </div>\n        </Question>\n    );\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const RangeQuestionDoc = (props: RangeQuestionType): null => props && null;\n\nexport default RangeQuestion;\n","import styled, { keyframes } from \"styled-components\";\nimport { SpaceProps, space } from \"styled-system\";\n\nconst animation = keyframes`\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\nexport const Loader = styled.div<SpaceProps & { size?: number }>`\n    width: ${({ size }) => size || 50}px;\n    height: ${({ size }) => size || 50}px;\n    border-radius: 50%;\n    background-color: transparent;\n    border-style: solid;\n    border-width: ${({ size }) => (size || 50) / 12.5}px;\n    border-color: transparent;\n    border-top-color: ${({ theme }) => theme.colors.spinner};\n    animation: 1s ${animation} linear infinite;\n\n    ${space};\n`;\n\nexport const CenterWrapper = styled.div`\n    display: flex;\n    width: 100vw;\n    height: 100vh;\n    justify-content: center;\n    align-items: center;\n`;\n","import styled, { css } from \"styled-components\";\nimport { SpaceProps, space } from \"styled-system\";\nimport { getElevation } from \"../../utils/theme\";\nimport { Loader } from \"./Loader\";\n\nexport const Button = styled.button.attrs({ type: \"button\" })<{ disabled?: boolean; iconAlign?: \"left\" | \"right\" }>`\n    padding: ${({ theme }) => `${theme.space[2]}px ${theme.space[3]}px`};\n    background-color: ${({ theme }) => theme.colors.controlButton};\n    color: ${({ theme }) => theme.colors.controlOnButton};\n    font-size: ${({ theme }) => theme.sizes.buttonTextSize};\n    line-height: 1.2;\n    outline: none;\n    border: none;\n    border-radius: ${({ theme }) => theme.sizes.radius};\n    box-shadow: ${({ theme }) => getElevation(theme.elevation.button)};\n    transition: background 0.3s;\n    cursor: pointer;\n\n    &:hover,\n    &:active,\n    &:focus {\n        background-color: ${({ theme }) => theme.colors.controlHighlightActive};\n    }\n\n    ${({ disabled }) =>\n        disabled &&\n        css`\n            background-color: ${({ theme }) => theme.colors.controlButtonDisabled} !important;\n            color: ${({ theme }) => theme.colors.controlOnButtonDisabled};\n        `};\n\n    svg,\n    ${Loader} {\n        display: inline-block;\n        color: ${({ theme, disabled }) => (disabled ? theme.colors.icon : \"inherit\")} !important;\n        ${({ iconAlign, theme }) =>\n            iconAlign &&\n            css`\n                float: ${iconAlign};\n                margin-${iconAlign === \"left\" ? \"right\" : \"left\"}: ${theme.space[2]}px;\n        `};\n    }\n`;\n\nexport const CenteredButtonWrapper = styled.div<SpaceProps>`\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n\n    ${space};\n`;\n","import React from \"react\";\nimport { CenteredButtonWrapper, Button } from \"../styles/Button\";\nimport { useLabels } from \"../../hooks/useLabel\";\nimport Icon from \"../common/Icon\";\nimport { useStoreSelector, useStoreDispatch } from \"../../redux/store\";\nimport { isAnswerValid } from \"../../utils/validator\";\nimport { ErrorPanel, ErrorList } from \"../styles/Question\";\nimport { showResult } from \"../../redux/actions/resultActions\";\nimport { getAllQuestionsSelector, getQuestionIdHash } from \"../../utils/utils\";\nimport { setAnswerFocus } from \"../../redux/actions/answersActions\";\n\nconst MAX_ERRORS = 3;\n\ntype InvalidItem = { idHash: string; title: string };\n\nconst ShowResultsButton = (): JSX.Element => {\n    const dispatch = useStoreDispatch();\n    const allQuestions = useStoreSelector(getAllQuestionsSelector);\n    const allAnswers = useStoreSelector((state) => state.answers.list);\n    const [buttonLabel, errorTitleLabel] = useLabels([\"resultSeeButton\", \"questionsErrorTitle\"]);\n\n    const invalidDataList = allAnswers.reduce<InvalidItem[]>((invalidList, answer) => {\n        const question = allQuestions.find((question) => answer.questionIdHash.includes(question.hash!));\n        if (question && !isAnswerValid(question, answer)) {\n            // limit the errors list to MAX_ERRORS items\n            if (invalidList.length === MAX_ERRORS) {\n                invalidList.push({ idHash: \"more\", title: \"...\" });\n            }\n\n            if (invalidList.length < MAX_ERRORS) {\n                invalidList.push({\n                    idHash: getQuestionIdHash(question),\n                    title: question.title.replace(\"{hint}\", \"\"),\n                });\n            }\n        }\n        return invalidList;\n    }, []);\n    const isValid = invalidDataList.length < 1;\n\n    const scrollToQuestionId = (idHash: string) => {\n        dispatch(setAnswerFocus(idHash, true));\n        document.querySelector(`#question-${idHash}`)?.scrollIntoView({\n            behavior: \"smooth\",\n        });\n    };\n\n    const goToResults = (): void => {\n        if (isValid) dispatch(showResult());\n    };\n\n    return (\n        <CenteredButtonWrapper mt={4}>\n            <Button disabled={!isValid} onClick={goToResults} iconAlign=\"right\">\n                {buttonLabel}\n                <Icon type=\"next\" />\n            </Button>\n\n            {!isValid && (\n                <ErrorPanel>\n                    <p>{errorTitleLabel}</p>\n                    <ErrorList>\n                        {invalidDataList.map((item) => (\n                            <li key={item.idHash} onClick={() => scrollToQuestionId(item.idHash)}>\n                                {item.title}\n                            </li>\n                        ))}\n                    </ErrorList>\n                </ErrorPanel>\n            )}\n        </CenteredButtonWrapper>\n    );\n};\n\nexport default ShowResultsButton;\n","import styled, { css } from \"styled-components\";\nimport { BottomLabel, Checkbox, RadioButton, RadioListWrapper, SliderWrapper, TextField } from \"./Input\";\n\nexport const Table = styled.div`\n    display: grid;\n    margin: 0 auto;\n    grid-template-columns: minmax(min-content, max-content) minmax(100px, max-content);\n    grid-auto-rows: minmax(min-content, max-content);\n    align-items: center;\n\n    * {\n        box-sizing: border-box;\n    }\n`;\n\nexport const TitleCell = styled.div`\n    grid-column: 1;\n    padding-right: ${({ theme }) => theme.space[3]}px;\n    text-align: right;\n    font-family: ${({ theme }) => theme.fonts.question};\n    font-weight: bold;\n`;\n\nconst surfacedCellStyles = css`\n    grid-column: 2;\n    padding: ${({ theme }) => theme.space[3]}px;\n    background-color: ${({ theme }) => theme.colors.surface};\n    color: ${({ theme }) => theme.colors.onSurface};\n    text-align: center;\n`;\n\nexport const HeadingCell = styled.div`\n    ${surfacedCellStyles}\n    display: flex;\n    justify-content: stretch;\n    flex-wrap: nowrap;\n    gap: ${({ theme }) => theme.space[2]}px;\n    font-weight: bold;\n\n    > div {\n        flex-grow: 1;\n        flex-basis: 0;\n    }\n`;\n\nexport const InputCell = styled.div<{ isRadioButtonSlider?: boolean }>`\n    ${surfacedCellStyles}\n\n    ${({ isRadioButtonSlider: includeMargin, theme }) =>\n        !includeMargin\n            ? css`\n                  padding: ${theme.space[2]}px ${theme.space[3]}px;\n              `\n            : \"\"}\n\n    > * {\n        margin: 0 ${({ theme, isRadioButtonSlider: includeMargin }) => (includeMargin ? theme.space[3] : 0)}px;\n    }\n\n    ${TextField} {\n        width: calc(100% - ${({ theme, isRadioButtonSlider: includeMargin }) =>\n            includeMargin ? theme.space[3] * 2 : 0}px);\n    }\n\n    ${Checkbox}, ${RadioButton} {\n        font-size: 20px; /* To match fontsize of the other checkbox rendered in a h2 tag */\n    }\n\n    ${SliderWrapper} {\n        margin: 0 26px; /* Pixel perfect, I promise :) */\n    }\n\n    ${RadioListWrapper} {\n        justify-content: space-around;\n        gap: ${({ theme }) => theme.space[2]}px;\n        margin-top: 0;\n    }\n\n    ${BottomLabel} > div:not(${RadioButton}) {\n        display: none;\n    }\n`;\n","import React from \"react\";\nimport { useStoreDispatch, useStoreSelector, useTypedStore } from \"../../redux/store\";\nimport { SingleChoiceAnswerType } from \"../../types/AnswerTypes\";\nimport { SingleChoiceQuestionType } from \"../../types/QuestionTypes\";\nimport {\n    disableControlsSelector,\n    getQuestionAnswerSelector,\n    getQuestionScrollId,\n    onSingleAnswerClick,\n} from \"../../utils/utils\";\nimport Checkbox from \"../common/Checkbox\";\nimport Icon from \"../common/Icon\";\nimport { FieldError } from \"../styles/Input\";\nimport HintableLabel from \"../common/HintableLabel\";\nimport { TitleCell, InputCell } from \"../styles/GroupTable\";\nimport { getValidAnswerData } from \"../../utils/validator\";\n\ntype PropsType = {\n    question: SingleChoiceQuestionType;\n};\n\nconst TabledSingleChoiceQuestion = (props: PropsType): JSX.Element => {\n    const { question } = props;\n\n    const dispatch = useStoreDispatch();\n    const disableControl = useStoreSelector(disableControlsSelector);\n    const checked = useStoreSelector(getQuestionAnswerSelector<SingleChoiceAnswerType>(question)).value;\n\n    const store = useTypedStore();\n    const { error, showError } = getValidAnswerData(question, store);\n\n    return (\n        <>\n            <TitleCell>\n                <HintableLabel label={question.title} hints={question.hints} />\n\n                {showError && (\n                    <FieldError>\n                        <Icon type=\"error\" color=\"error\" />\n                        {error}\n                    </FieldError>\n                )}\n            </TitleCell>\n\n            <InputCell id={getQuestionScrollId(question)} isRadioButtonSlider>\n                <Checkbox\n                    checked={checked || false}\n                    disabled={disableControl}\n                    onClick={() => onSingleAnswerClick(question, dispatch, !checked)}\n                />\n            </InputCell>\n        </>\n    );\n};\n\nexport default TabledSingleChoiceQuestion;\n","import React from \"react\";\nimport { useStoreDispatch, useStoreSelector, useTypedStore } from \"../../redux/store\";\nimport { MultipleChoiceAnswerType } from \"../../types/AnswerTypes\";\nimport { MultipleChoiceQuestionType } from \"../../types/QuestionTypes\";\nimport {\n    disableControlsSelector,\n    getQuestionAnswerSelector,\n    getQuestionScrollId,\n    onMultipleAnswerClick,\n} from \"../../utils/utils\";\nimport Checkbox from \"../common/Checkbox\";\nimport HintableLabel from \"../common/HintableLabel\";\nimport Icon from \"../common/Icon\";\nimport Select from \"../common/Select\";\nimport { FieldError, Label, RadioButton } from \"../styles/Input\";\nimport { TitleCell, InputCell } from \"../styles/GroupTable\";\nimport { getValidAnswerData } from \"../../utils/validator\";\n\ntype PropsType = {\n    question: MultipleChoiceQuestionType;\n};\n\nconst TabledMultipleChoiceQuestion = (props: PropsType): JSX.Element => {\n    const { question } = props;\n    const dispatch = useStoreDispatch();\n    const disableControl = useStoreSelector(disableControlsSelector);\n    const selectedIds = useStoreSelector(getQuestionAnswerSelector<MultipleChoiceAnswerType>(question)).values;\n\n    const store = useTypedStore();\n    const { error, showError } = getValidAnswerData(question, store);\n\n    return (\n        <>\n            <TitleCell>\n                <HintableLabel label={question.title} hints={question.hints} />\n\n                {showError && (\n                    <FieldError>\n                        <Icon type=\"error\" color=\"error\" />\n                        {error}\n                    </FieldError>\n                )}\n            </TitleCell>\n\n            <InputCell id={getQuestionScrollId(question)} isRadioButtonSlider>\n                {question.inputType === \"radio\" &&\n                    question.options.map((option) => (\n                        <Label\n                            key={option.id}\n                            onClick={() =>\n                                !disableControl && onMultipleAnswerClick(question, dispatch, selectedIds, option.id)\n                            }\n                            disabled={disableControl}\n                        >\n                            <RadioButton checked={selectedIds.includes(option.id)} />\n                            <HintableLabel label={option.title} hints={option.hints} />\n                        </Label>\n                    ))}\n\n                {question.inputType === \"check\" &&\n                    question.options.map((option) => (\n                        <Checkbox\n                            key={option.id}\n                            checked={selectedIds.includes(option.id)}\n                            onClick={() => onMultipleAnswerClick(question, dispatch, selectedIds, option.id)}\n                            disabled={disableControl}\n                        >\n                            <HintableLabel label={option.title} hints={option.hints} />\n                        </Checkbox>\n                    ))}\n\n                {question.inputType === \"select\" && (\n                    <Select\n                        options={question.options}\n                        selectedOptionId={selectedIds[0]}\n                        onSelectOption={(value) => onMultipleAnswerClick(question, dispatch, selectedIds, value)}\n                        disabled={disableControl}\n                    />\n                )}\n            </InputCell>\n        </>\n    );\n};\n\nexport default TabledMultipleChoiceQuestion;\n","import React from \"react\";\nimport { useStoreDispatch, useStoreSelector, useTypedStore } from \"../../redux/store\";\nimport { TextAnswerType } from \"../../types/AnswerTypes\";\nimport { TextQuestionType } from \"../../types/QuestionTypes\";\nimport {\n    disableControlsSelector,\n    getQuestionAnswerSelector,\n    getQuestionScrollId,\n    onTextAnswerChange,\n} from \"../../utils/utils\";\nimport HintableLabel from \"../common/HintableLabel\";\nimport Icon from \"../common/Icon\";\nimport { FieldError, TextField } from \"../styles/Input\";\nimport { TitleCell, InputCell } from \"../styles/GroupTable\";\nimport { getValidAnswerData } from \"../../utils/validator\";\n\ntype PropsType = {\n    question: TextQuestionType;\n};\n\nconst TabledTextQuestion = (props: PropsType): JSX.Element => {\n    const { question } = props;\n\n    const dispatch = useStoreDispatch();\n    const disableControl = useStoreSelector(disableControlsSelector);\n    const { value } = useStoreSelector(getQuestionAnswerSelector<TextAnswerType>(question));\n\n    const store = useTypedStore();\n    const { error, showError, setFocussed } = getValidAnswerData(question, store);\n\n    return (\n        <>\n            <TitleCell>\n                <HintableLabel label={question.title} hints={question.hints} />\n\n                {showError && (\n                    <FieldError>\n                        <Icon type=\"error\" color=\"error\" />\n                        {error}\n                    </FieldError>\n                )}\n            </TitleCell>\n\n            <InputCell id={getQuestionScrollId(question)} isRadioButtonSlider>\n                <TextField\n                    value={value}\n                    placeholder={question.placeholder || \"\"}\n                    isError={showError}\n                    onChange={(event) => onTextAnswerChange(question, dispatch, event.target.value)}\n                    onBlur={setFocussed}\n                    disabled={disableControl}\n                />\n            </InputCell>\n        </>\n    );\n};\n\nexport default TabledTextQuestion;\n","import React from \"react\";\nimport { RangeQuestionType } from \"../../types/QuestionTypes\";\nimport { useStoreDispatch, useStoreSelector } from \"../../redux/store\";\nimport HintableLabel from \"../common/HintableLabel\";\nimport { RangeAnswerType } from \"../../types/AnswerTypes\";\nimport Slider from \"../common/Slider\";\nimport RadioSlider from \"../common/RadioSlider\";\nimport {\n    disableControlsSelector,\n    getQuestionAnswerSelector,\n    getQuestionScrollId,\n    getRangeQuestionDefaultProps,\n} from \"../../utils/utils\";\nimport { TitleCell, InputCell } from \"../styles/GroupTable\";\n\ntype PropsType = {\n    question: RangeQuestionType;\n};\n\nconst TabledRangeQuestion = (props: PropsType): JSX.Element => {\n    const { question } = props;\n    const dispatch = useStoreDispatch();\n    const disableControl = useStoreSelector(disableControlsSelector);\n    const { value } = useStoreSelector(getQuestionAnswerSelector<RangeAnswerType>(question));\n\n    const sliderProps: React.ComponentProps<typeof Slider> | React.ComponentProps<typeof RadioSlider> = {\n        ...getRangeQuestionDefaultProps(question, dispatch, value),\n        disabled: disableControl,\n    };\n\n    return (\n        <>\n            <TitleCell>\n                <HintableLabel label={question.title} hints={question.hints} />\n            </TitleCell>\n\n            <InputCell id={getQuestionScrollId(question)} isRadioButtonSlider={question.inputType !== \"radio\"}>\n                {question.inputType === \"slider\" && (\n                    <Slider {...sliderProps} tickCount={question.tickCount} fullWidth />\n                )}\n                {question.inputType === \"radio\" && <RadioSlider {...sliderProps} />}\n            </InputCell>\n        </>\n    );\n};\n\nexport default TabledRangeQuestion;\n","import React from \"react\";\nimport { AllQuestionsType, QuestionGroup, questionTypes } from \"../../types/QuestionTypes\";\nimport { HeadingCell, InputCell, Table } from \"../styles/GroupTable\";\nimport TabledSingleChoiceQuestion from \"./TabledSingleChoiceQuestion\";\nimport TabledMultipleChoiceQuestion from \"./TabledMultipleChoiceQuestion\";\nimport TabledTextQuestion from \"./TabledTextQuestion\";\nimport TabledRangeQuestion from \"./TabledRangeQuestion\";\n\nconst determineTabledComponent = (question: AllQuestionsType): JSX.Element => {\n    switch (question.type) {\n        case questionTypes.single:\n            return <TabledSingleChoiceQuestion key={question.id} question={question} />;\n        case questionTypes.multiple:\n            return <TabledMultipleChoiceQuestion key={question.id} question={question} />;\n        case questionTypes.text:\n            return <TabledTextQuestion key={question.id} question={question} />;\n        case questionTypes.range:\n            return <TabledRangeQuestion key={question.id} question={question} />;\n    }\n};\n\ntype PropsType = {\n    group: QuestionGroup;\n};\n\n// TODO: add this component to storybook\nconst QuestionTable = (props: PropsType): JSX.Element => {\n    const { group } = props;\n    return (\n        <Table>\n            {group.tableInputHeadings && (\n                <HeadingCell>\n                    {group.tableInputHeadings.map((heading) => (\n                        <div key={heading}>{heading}</div>\n                    ))}\n                </HeadingCell>\n            )}\n            {group.questions.map(determineTabledComponent)}\n            {/* Sneaky bottom margin without breaking the row alignment */}\n            <InputCell />\n        </Table>\n    );\n};\n\nexport default QuestionTable;\n","import React from \"react\";\nimport { AllQuestionsType, questionTypes } from \"../types/QuestionTypes\";\nimport { useStoreSelector } from \"../redux/store\";\nimport { getQuestionIdHash } from \"../utils/utils\";\nimport { Container, Group, Line, Header, Description } from \"./styles/Container\";\nimport SingleChoiceQuestion from \"./questions/SingleChoiceQuestion\";\nimport MultipleChoiceQuestion from \"./questions/MultipleChoiceQuestion\";\nimport TextQuestion from \"./questions/TextQuestion\";\nimport RangeQuestion from \"./questions/RangeQuestion\";\nimport ShowResultsButton from \"./questions/ShowResultsButton\";\nimport QuestionTable from \"./groups/QuestionTable\";\nimport { Image, ImageWrapper } from \"./styles/Image\";\n\nconst determineComponent = (question: AllQuestionsType): JSX.Element => {\n    switch (question.type) {\n        case questionTypes.single:\n            return <SingleChoiceQuestion key={getQuestionIdHash(question)} question={question} />;\n        case questionTypes.multiple:\n            return <MultipleChoiceQuestion key={getQuestionIdHash(question)} question={question} />;\n        case questionTypes.text:\n            return <TextQuestion key={getQuestionIdHash(question)} question={question} />;\n        case questionTypes.range:\n            return <RangeQuestion key={getQuestionIdHash(question)} question={question} />;\n    }\n};\n\nconst QuestionGroupList = (): JSX.Element | null => {\n    const config = useStoreSelector((state) => state.config);\n    if (!config.groups.length) return null;\n    return (\n        <Container py={4}>\n            {config.groups.map((group, i) => (\n                <Group\n                    key={i}\n                    showSeparator={i > 0}\n                    accentColor={group.accentColor}\n                    questionBackgroundColor={group.backgroundColor}\n                >\n                    <Line />\n                    <ImageWrapper imagePosition={group.image ? group.image.alignment || \"right\" : undefined}>\n                        <div>\n                            {group.title && <Header>{group.title}</Header>}\n                            {group.description && (\n                                <Description>\n                                    <span dangerouslySetInnerHTML={{ __html: group.description }} />\n                                </Description>\n                            )}\n                        </div>\n\n                        {group.image && (\n                            <Image src={group.image.url} widthPercentage={group.image.size} alt={group.image.alt} />\n                        )}\n                    </ImageWrapper>\n\n                    {group.tabledView ? (\n                        <QuestionTable group={group} />\n                    ) : (\n                        <div>{group.questions.map(determineComponent)}</div>\n                    )}\n                </Group>\n            ))}\n            <ShowResultsButton />\n        </Container>\n    );\n};\n\nexport default QuestionGroupList;\n","import { useEffect, useRef, useState } from \"react\";\nimport { useStoreDispatch, useStoreSelector } from \"../redux/store\";\nimport { resetFormDispatcher } from \"../utils/utils\";\n\nconst calcCountdown = (timestamp: number): number => Math.round((timestamp - Date.now()) / 1000);\n\n/**\n * Returns the number of seconds before the survey will restart\n */\nexport const useRestartTimer = (): number | null => {\n    const restartTimestamp = useStoreSelector((state) => state.result.restartTimestamp);\n    const [countdown, setCountdown] = useState(restartTimestamp ? calcCountdown(restartTimestamp) : null);\n    const timerInterval = useRef<number>();\n\n    useEffect(() => {\n        if (!restartTimestamp) return;\n        if (timerInterval.current) clearInterval(timerInterval.current);\n        timerInterval.current = setInterval(() => {\n            const newCountdown = calcCountdown(restartTimestamp!);\n            if (newCountdown <= 0) {\n                clearInterval(timerInterval.current);\n            }\n            setCountdown(newCountdown);\n        }, 1000);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [restartTimestamp]);\n\n    return countdown;\n};\n\n/**\n * Resets the answer state when the timer reaches 0\n */\nexport const useInitResetTimer = (): void => {\n    const dispatch = useStoreDispatch();\n    const restartTime = useRestartTimer();\n    useEffect(() => {\n        if (restartTime !== null && restartTime <= 0) {\n            resetFormDispatcher(dispatch);\n        }\n    }, [restartTime, dispatch]);\n};\n","import styled from \"styled-components\";\nimport { SpaceProps, space } from \"styled-system\";\n\nexport const Result = styled.article<SpaceProps>`\n    ${space};\n    display: flex;\n    justify-content: center;\n`;\n\nResult.defaultProps = {\n    marginY: 4,\n    paddingY: 3,\n    paddingX: { xs: 3, lg: 4 },\n};\n","import styled, { css } from \"styled-components\";\nimport { resultAnimationTotalFrames, resultAnimationFrameLength } from \"../../utils/utils\";\n\nexport const Wrapper = styled.div`\n    position: relative;\n    width: ${({ theme }) => theme.sizes.scoreCounterSize};\n    height: calc(${({ theme }) => theme.sizes.scoreCounterSize} / 2);\n    overflow: hidden;\n`;\n\nexport const Dial = styled.div<{ angle: number; enableAnimation?: boolean }>`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: ${({ theme }) => `calc(${theme.sizes.scoreCounterSize} - ${theme.sizes.scoreCounterThickness} * 2)`};\n    height: ${({ theme }) => `calc(${theme.sizes.scoreCounterSize} - ${theme.sizes.scoreCounterThickness} * 2)`};\n    border: ${({ theme }) => `${theme.sizes.scoreCounterThickness} solid ${theme.colors.scoreCounterBack}`};\n    border-radius: 50%;\n    transform: rotate(${({ angle }) => angle}deg);\n\n    ${({ enableAnimation }) =>\n        enableAnimation &&\n        css`\n            transition: transform ${resultAnimationTotalFrames * resultAnimationFrameLength}ms ease-in-out;\n        `}\n\n    &::before {\n        content: \"\";\n        position: absolute;\n        width: ${({ theme }) => `calc(${theme.sizes.scoreCounterSize} - ${theme.sizes.scoreCounterThickness} * 2)`};\n        height: ${({ theme }) => `calc(${theme.sizes.scoreCounterSize} - ${theme.sizes.scoreCounterThickness} * 2)`};\n        left: -${({ theme }) => theme.sizes.scoreCounterThickness};\n        top: -${({ theme }) => theme.sizes.scoreCounterThickness};\n        border: ${({ theme }) => `${theme.sizes.scoreCounterThickness} solid ${theme.colors.scoreCounterFront}`};\n        border-top-color: transparent;\n        border-left-color: transparent;\n        border-radius: 50%;\n        transform: rotate(45deg);\n    }\n`;\n\nexport const Counter = styled.div`\n    position: absolute;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    text-align: center;\n    font-weight: lighter;\n    font-size: 2.8em;\n`;\n","import React from \"react\";\nimport { Wrapper, Dial, Counter } from \"../styles/Dial180\";\n\ntype PropsType = {\n    /** Float from 0.0 - 1.0. */\n    dialPercentage: number;\n    /** Text to be displayed beneath the arc */\n    label: string;\n    /** Width in pixels. The height of the component will be half this because only half of a circle is visible. */\n    /** When enabled the border will fill up in an animation */\n    animate?: boolean;\n};\n\nconst ScoreCounter180 = (props: PropsType): JSX.Element => {\n    const { dialPercentage, label, animate } = props;\n\n    const maxAngle = 180;\n    const angle = dialPercentage * maxAngle;\n    const limitedAngle = Math.max(0, Math.min(angle, maxAngle));\n\n    return (\n        <Wrapper>\n            <Dial angle={limitedAngle} enableAnimation={animate} />\n            <Counter>{label}</Counter>\n        </Wrapper>\n    );\n};\n\nexport default ScoreCounter180;\n","import styled, { css } from \"styled-components\";\nimport { resultAnimationTotalFrames, resultAnimationFrameLength } from \"../../utils/utils\";\n\nexport const Wrapper = styled.div`\n    position: relative;\n    width: ${({ theme }) => theme.sizes.scoreCounterSize};\n    height: ${({ theme }) => theme.sizes.scoreCounterSize};\n    overflow: hidden;\n`;\n\ntype DialType = {\n    angle: number;\n    enableAnimation?: boolean;\n    type: \"filled\" | \"empty\";\n};\n\nexport const GenericDial = styled.div<DialType>`\n    position: absolute;\n    width: ${({ theme }) => `calc( ${theme.sizes.scoreCounterSize} - ${theme.sizes.scoreCounterThickness} * 2 )`};\n    height: ${({ theme }) => `calc( ${theme.sizes.scoreCounterSize} - ${theme.sizes.scoreCounterThickness} * 2 )`};\n    transform: rotate(${({ angle }) => angle}deg);\n    border-radius: 50%;\n    border: ${({ theme }) => theme.sizes.scoreCounterThickness} solid transparent;\n    border-bottom-color: ${({ type, theme }) =>\n        type === \"filled\" ? theme.colors.scoreCounterFront : theme.colors.scoreCounterBack};\n\n    ${({ enableAnimation }) =>\n        enableAnimation &&\n        css`\n            transition: transform ${resultAnimationTotalFrames * resultAnimationFrameLength}ms ease-in-out;\n        `}\n`;\n\nconst borderOffset = 2; // necessary to mask css pixel imperfect rotations\n\nexport const MaskDial = styled.div`\n    position: absolute;\n    width: ${({ theme }) =>\n        `calc( ${theme.sizes.scoreCounterSize} - (${theme.sizes.scoreCounterThickness} + ${borderOffset}px) * 2)`};\n    height: ${({ theme }) =>\n        `calc( ${theme.sizes.scoreCounterSize} - (${theme.sizes.scoreCounterThickness} + ${borderOffset}px) * 2)`};\n    left: -${borderOffset}px;\n    top: -${borderOffset}px;\n    border: ${({ theme }) => `calc( ${theme.sizes.scoreCounterThickness} + ${borderOffset}px * 2)`} solid transparent;\n    border-bottom-color: ${({ theme }) => theme.colors.back};\n    border-radius: 50%;\n`;\n\nexport const Counter = styled.div`\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    font-weight: lighter;\n    font-size: 2.8em;\n`;\n","export enum messageTypes {\n    error = \"error\",\n    info = \"info\",\n    neutral = \"neutral\",\n}\n\nexport type ExternalMessageType = {\n    title?: string;\n    description: string;\n    type: messageTypes;\n    timestamp?: number;\n};\n\nexport type MessageType = ExternalMessageType & {\n    id: number; // auto generated\n};\n","import React from \"react\";\nimport { Wrapper, GenericDial, MaskDial, Counter } from \"../styles/Dial270\";\n\ntype PropsType = {\n    /** Float from 0.0 - 1.0. */\n    dialPercentage: number;\n    /** Text to be displayed beneath the arc */\n    label: string;\n    /** When enabled the border will fill up in an animation */\n    animate?: boolean;\n};\n\nconst ScoreCounter270 = (props: PropsType): JSX.Element => {\n    const { dialPercentage, label, animate } = props;\n\n    const maxAngle = 270;\n    const angle = dialPercentage * maxAngle;\n    const limitedAngle = Math.max(0, Math.min(angle, maxAngle));\n\n    const items = new Array(4).fill(\"\"); // we need 4 items to get rid of imperfect css borders\n\n    return (\n        <Wrapper>\n            {items.map((_, index) => (\n                <GenericDial\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={index}\n                    type=\"filled\"\n                    angle={limitedAngle * ((index + 1) / items.length)}\n                    enableAnimation={animate}\n                />\n            ))}\n\n            {items.map((_, index) => (\n                <GenericDial\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={index}\n                    type=\"empty\"\n                    angle={-(maxAngle - limitedAngle) * ((index + 1) / items.length)}\n                    enableAnimation={animate}\n                />\n            ))}\n\n            <MaskDial />\n            <Counter>{label}</Counter>\n        </Wrapper>\n    );\n};\n\nexport default ScoreCounter270;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { ResultLabelType } from \"../../types/ResultTypes\";\nimport { Result } from \"../styles/Result\";\nimport { Description, Header } from \"../styles/Container\";\nimport { useStoreSelector } from \"../../redux/store\";\nimport { resultAnimationTotalFrames, resultAnimationFrameLength, replaceValues } from \"../../utils/utils\";\nimport { useAfterFirstRender } from \"../../hooks/useAfterFirstRender\";\nimport ScoreCounter180 from \"../common/ScoreCounter180\";\nimport ScoreCounter270 from \"../common/ScoreCounter270\";\nimport { useRestartTimer } from \"../../hooks/timerHooks\";\n\nconst rescaleToDomain = (value: number, sourceDomain: number[], targetDomain: number[]): number => {\n    // Rescale the value based on the formula for linear interpolation\n    return (\n        ((targetDomain[1] - targetDomain[0]) / (sourceDomain[1] - sourceDomain[0])) * (value - sourceDomain[0]) +\n        targetDomain[0]\n    );\n};\n\ntype PropsType = {\n    config: ResultLabelType;\n};\n\nconst LabelResult = (props: PropsType): JSX.Element => {\n    const { config } = props;\n    const score = useStoreSelector((state) => state.result.score);\n    const domain = useStoreSelector((state) => state.config.result.scoreDomain || [0, 1]);\n\n    const afterFirstRender = useAfterFirstRender(); // makes sure scoreCounter animation is visible when reloading page\n    const countdown = useRestartTimer();\n\n    // animation\n    const animation = useRef<number>();\n    const frame = useRef(0);\n    const [displayedScore, setDisplayedScore] = useState(config.animate ? domain[0] : score); // default to score when not animating\n    useEffect(() => {\n        if (!config.animate) {\n            setDisplayedScore(score);\n            return;\n        }\n\n        // reset after actual score change\n        setDisplayedScore(domain[0]);\n        frame.current = 0;\n        if (animation.current) clearInterval(animation.current);\n\n        // start animation\n        animation.current = setInterval(() => {\n            if (frame.current >= resultAnimationTotalFrames) {\n                clearInterval(animation.current);\n                setDisplayedScore(score);\n                return;\n            }\n            frame.current = frame.current + 1;\n            setDisplayedScore(score * (frame.current / resultAnimationTotalFrames));\n        }, resultAnimationFrameLength); // ms\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [score]);\n\n    // display score and countdown in label\n    const labelParts = config.label.split(new RegExp(\"\\\\{score(\\\\d+)?\\\\}\")); // split label on each possible score placeholder and keep X value\n    const label =\n        replaceValues(\n            labelParts\n                .map((text, index) => {\n                    if (index % 2 === 0) return text; // only uneven items are placeholders for score\n                    if (Number.isNaN(displayedScore)) return \"?\";\n                    if (text === undefined) return Math.round(displayedScore); // {score}\n                    return Math.round(rescaleToDomain(displayedScore, domain, [0, parseInt(text)])); // {scoreX}\n                })\n                .join(\"\"),\n            { countdown },\n        ) || \"\";\n\n    return (\n        <Result>\n            {config.style === \"title\" && <Header>{label}</Header>}\n            {config.style === \"description\" && <Description>{label}</Description>}\n            {config.style === \"scoreCounter180\" && (\n                <ScoreCounter180\n                    dialPercentage={afterFirstRender ? rescaleToDomain(score, domain, [0, 1]) : 0}\n                    label={label}\n                    animate={props.config.animate}\n                />\n            )}\n            {config.style === \"scoreCounter270\" && (\n                <ScoreCounter270\n                    dialPercentage={afterFirstRender ? rescaleToDomain(score, domain, [0, 1]) : 0}\n                    label={label}\n                    animate={props.config.animate}\n                />\n            )}\n        </Result>\n    );\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const LabelResultDoc = (props: ResultLabelType): null => props && null;\n\nexport default LabelResult;\n","import { useState, useEffect } from \"react\";\n\n/** Returns true after the first render */\nexport const useAfterFirstRender = (): boolean => {\n    const [value, setValue] = useState(false);\n    useEffect(() => {\n        setValue(true);\n    }, []);\n    return value;\n};\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */ // We actually want to use Typescript inferring\nimport { ExternalMessageType } from \"../../types/MessageTypes\";\n\nexport const addMessages = (messages: ExternalMessageType[]) => ({\n    type: \"MESSAGES_ADD\" as const,\n    messages,\n});\n\nexport const removeMessage = (messageId: number) => ({\n    type: \"MESSAGES_REMOVE\" as const,\n    messageId,\n});\n\nexport const clearMessages = () => ({\n    type: \"MESSAGES_CLEAR\" as const,\n});\n\nexport type MessagesActions =\n    | ReturnType<typeof addMessages>\n    | ReturnType<typeof removeMessage>\n    | ReturnType<typeof clearMessages>;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useState, useEffect, useCallback } from \"react\";\nimport { debounce } from \"lodash\";\nimport { SeriesDataTypes, AnswerPostData } from \"../types/DataTypes\";\nimport { fetchAnswerData } from \"../utils/utils\";\nimport { useStoreDispatch, useStoreSelector } from \"../redux/store\";\nimport { AnswerDataUrl } from \"../types/ResultTypes\";\nimport { messageTypes } from \"../types/MessageTypes\";\nimport { addMessages } from \"../redux/actions/messagesActions\";\nimport { useLabels } from \"./useLabel\";\n\ntype DataType = {\n    data: SeriesDataTypes | null;\n    loading: boolean;\n};\n\nconst useGraphData = (postUrl: AnswerDataUrl): DataType => {\n    const dispatch = useStoreDispatch();\n    const configId = useStoreSelector((state) => state.config.id);\n    const score = useStoreSelector((state) => state.result.score);\n    const answers = useStoreSelector((state) => state.answers.list);\n\n    const [title, description] = useLabels([\"messageErrorTitle\", \"messageGraphDataError\"]);\n\n    const [data, setData] = useState<SeriesDataTypes | null>(null);\n    const [loading, setLoading] = useState(true);\n\n    // Create data to be sent and create an easy to check string version for refetching with useEffect\n    const postData: AnswerPostData = { configId, score, answers };\n    const hash = JSON.stringify(postData);\n\n    // Create debounced request function to avoid spamming the endpoint when changing an already submitted result\n    const request = useCallback(\n        debounce(async (url: AnswerDataUrl, data: AnswerPostData) => {\n            setLoading(true);\n\n            const result = await fetchAnswerData<SeriesDataTypes>(url, data);\n\n            // validate result data\n            if (!result) {\n                setData(null);\n                setLoading(false);\n\n                console.error(\"Could not retrieve graph data\");\n                dispatch(\n                    addMessages([{ type: messageTypes.error, title: title || \"\", description: description || \"\" }]),\n                );\n\n                return;\n            }\n\n            // set result\n            setData(result);\n            setLoading(false);\n        }, 500),\n        [],\n    );\n\n    useEffect(() => {\n        request(postUrl, postData);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [postUrl, hash]);\n\n    return { data, loading };\n};\n\nexport default useGraphData;\n","import styled from \"styled-components\";\nimport { WidthProps, width, FlexboxProps, flexbox } from \"styled-system\";\nimport { IconWrapper } from \"../common/Icon\";\nimport { Loader } from \"./Loader\";\n\nconst LEGEND_RATIO = 0.25;\nexport const GRAPH_LOADER_SIZE = 50;\n\nexport const Title = styled.h2``;\n\nexport const Card = styled.div<WidthProps>`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    min-width: 75%;\n    padding: ${({ theme }) => theme.space[3]}px;\n    background-color: ${({ theme }) => theme.colors.surface};\n    color: ${({ theme }) => theme.colors.onSurface};\n    border-radius: ${({ theme }) => theme.sizes.radius};\n    ${width};\n`;\nCard.defaultProps = {\n    width: { xs: 1, md: 0.75 },\n};\n\nexport const StatusWrapper = styled.div`\n    position: relative;\n    width: 100%;\n    min-height: 100px;\n\n    & > ${Loader}, & > ${IconWrapper} {\n        position: absolute;\n        top: calc(50% - ${GRAPH_LOADER_SIZE / 2}px);\n        left: calc(50% - ${GRAPH_LOADER_SIZE / 2}px);\n    }\n`;\n\nexport const Wrapper = styled.div<FlexboxProps & WidthProps>`\n    display: flex;\n    flex-grow: 1;\n    justify-content: space-between;\n    width: 100%;\n    ${flexbox};\n\n    svg {\n        ${width};\n    }\n`;\nWrapper.defaultProps = {\n    width: { xs: 1, md: 1 - LEGEND_RATIO },\n    flexDirection: { xs: \"column\", md: \"row\" },\n};\n\nexport const Legend = styled.div<FlexboxProps & WidthProps>`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: ${({ theme }) => theme.space[3]}px;\n    ${width};\n    ${flexbox};\n`;\nLegend.defaultProps = {\n    width: { xs: 1, md: LEGEND_RATIO },\n    flexDirection: { xs: \"row\", md: \"column\" },\n    justifyContent: { xs: \"center\", md: \"flex-start\" },\n};\n\nexport const LegendItem = styled.div`\n    display: flex;\n    align-items: center;\n    margin-right: ${({ theme }) => theme.space[2]}px;\n    margin-bottom: ${({ theme }) => theme.space[1]}px;\n`;\n\nexport const LegendSwatch = styled.div`\n    flex-shrink: 0;\n    width: 0.85em;\n    height: 0.85em;\n    margin-right: ${({ theme }) => theme.space[2]}px;\n    background-color: ${({ color }) => color};\n    border: 1px solid white;\n    outline: 1px solid black;\n`;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport React, { useEffect, useRef } from \"react\";\nimport { SeriesDataTypes } from \"../../types/DataTypes\";\nimport { drawLineGraph } from \"../../utils/lineGraph\";\nimport { ResultGraphType } from \"../../types/ResultTypes\";\nimport { drawBarGraph } from \"../../utils/barGraph\";\n\ntype PropsType = {\n    type: ResultGraphType[\"format\"];\n    data: SeriesDataTypes;\n};\n\nconst Graph = (props: PropsType): JSX.Element => {\n    const graphElement = useRef<SVGSVGElement>(null);\n    const width = 600;\n    const height = 300;\n\n    useEffect(() => {\n        const margin = { top: 20, right: 20, bottom: 30, left: 30 };\n        const tickSpread = 80;\n\n        if (!graphElement.current) return;\n        switch (props.type) {\n            case \"line\":\n                drawLineGraph(\n                    props.data as SeriesDataTypes<number>,\n                    graphElement.current,\n                    width,\n                    height,\n                    margin,\n                    tickSpread,\n                );\n                break;\n            case \"bar\":\n                drawBarGraph(props.data as SeriesDataTypes<string>, graphElement.current, width, height, margin);\n                break;\n        }\n    }, [props.data, props.type]);\n\n    return <svg ref={graphElement} viewBox={`0, 0, ${width}, ${height}`} overflow=\"visible\" />;\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const GraphDoc = (props: SeriesDataTypes & Omit<PropsType, \"data\">): null => props && null;\n\nexport default Graph;\n","import { select, extent, min, max, axisLeft, scaleLinear, axisBottom, line } from \"d3\";\nimport { SeriesDataTypes } from \"../types/DataTypes\";\nimport { graphHighlightId } from \"./utils\";\n\ntype HighlightType = { x: number; color: string };\n\ntype LineSeriesType = {\n    id: string;\n    name: string;\n    color: string;\n    x: number[];\n    y: number[];\n};\n\nexport const drawLineGraph = (\n    inputData: SeriesDataTypes<number>,\n    element: SVGSVGElement,\n    width: number,\n    height: number,\n    margin: { top: number; bottom: number; left: number; right: number },\n    tickSpread: number,\n): void => {\n    const sortedValues = inputData.values.sort((a, b) => a.x - b.x);\n\n    // Format data\n    const data: LineSeriesType[] = inputData.series\n        .filter((item) => item.id !== graphHighlightId)\n        .map((item) => {\n            const filteredValues = sortedValues.reduce<\n                {\n                    x: number;\n                    y: number;\n                }[]\n            >((list, point) => {\n                if (point[item.id] !== undefined) {\n                    list.push({\n                        x: point.x,\n                        y: point[item.id] as number,\n                    });\n                }\n                return list;\n            }, []);\n\n            return {\n                ...item,\n                x: filteredValues.map((point) => point.x),\n                y: filteredValues.map((point) => point.y),\n            };\n        });\n\n    // Setup chart\n    const svg = select(element);\n    svg.selectAll(\"*\").remove();\n\n    // x axis\n    const [xMin, xMax] = extent(sortedValues, (d) => d.x);\n    const xScale = scaleLinear()\n        .domain([xMin || 0, xMax || 0])\n        .range([margin.left, width - margin.right]);\n\n    // render x axis\n    svg.append(\"g\")\n        .attr(\"class\", \"axis-x\")\n        .attr(\"transform\", `translate(0,${height - margin.bottom})`)\n        .call(\n            axisBottom(xScale)\n                .ticks(width / tickSpread)\n                .tickSizeOuter(0),\n        )\n        .call((group) =>\n            group // render x axis label\n                .select(\".tick:last-of-type text\")\n                .clone()\n                .attr(\"y\", -16)\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"font-weight\", \"bold\")\n                .text(inputData.xLabel),\n        );\n\n    // y axis\n    const yMin = min(data, (series) => min(series.y)) || 0;\n    const yMax = max(data, (series) => max(series.y)) || 0;\n    const yScale = scaleLinear()\n        .domain([yMin, yMax])\n        .range([height - margin.bottom, margin.top])\n        .nice();\n\n    // render y axis\n    svg.append(\"g\")\n        .attr(\"class\", \"axis-y\")\n        .attr(\"transform\", `translate(${margin.left},0)`)\n        .call(axisLeft(yScale))\n        .call((group) =>\n            group // render y axis label\n                .select(\".tick:last-of-type text\")\n                .clone()\n                .attr(\"x\", 6)\n                .attr(\"text-anchor\", \"start\")\n                .attr(\"font-weight\", \"bold\")\n                .text(inputData.yLabel),\n        );\n\n    // draw a single series line\n    const drawLine = (series: LineSeriesType): string | null => {\n        const lineFunc = line<number>()\n            .x((x) => xScale(x))\n            .y((_, index) => yScale(series.y[index]));\n\n        return lineFunc(series.x);\n    };\n\n    // create a group for all lines\n    const lineGroup = svg\n        .append(\"g\")\n        .attr(\"class\", \"linegroup\")\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"stroke-linejoin\", \"round\")\n        .attr(\"stroke-linecap\", \"round\");\n\n    // draw all lines\n    lineGroup\n        .selectAll(\"path\")\n        .data(data)\n        .join(\"path\")\n        .attr(\"stroke\", (series) => series.color)\n        .attr(\"d\", drawLine);\n\n    // Add highlight lines\n    const highlightSeries = inputData.series.find((item) => item.id === graphHighlightId);\n    if (highlightSeries) {\n        const lines = inputData.values.reduce<HighlightType[]>((list, value) => {\n            if (value.highlight) {\n                list.push({\n                    x: value.x,\n                    color: value.highlight === true ? highlightSeries.color : value.highlight,\n                });\n            }\n            return list;\n        }, []);\n\n        // Add a vertical line\n        lines.forEach((line) =>\n            svg\n                .append(\"line\")\n                .attr(\"x1\", xScale(line.x))\n                .attr(\"y1\", margin.top)\n                .attr(\"x2\", xScale(line.x))\n                .attr(\"y2\", height - margin.bottom)\n                .style(\"stroke-width\", 2)\n                .style(\"stroke\", line.color)\n                .style(\"fill\", \"none\"),\n        );\n    }\n};\n","import { select, axisLeft, scaleLinear, scaleBand, axisBottom } from \"d3\";\nimport { SeriesDataTypes } from \"../types/DataTypes\";\nimport { graphHighlightId } from \"./utils\";\n\ntype HighlightType = { category: string; color: string };\n\n// prettier-ignore\nexport const drawBarGraph = (\n    inputData: SeriesDataTypes<string>,\n    element: SVGSVGElement,\n    width: number,\n    height: number,\n    margin: { top: number; bottom: number; left: number; right: number },\n): void => {\n    // Setup chart\n    const svg = select(element);\n    svg.selectAll(\"*\").remove();\n\n    const graphWidth = width - margin.right; // 100% on x-axis\n    const graphHeight = height - margin.bottom - 10; // 0% on y-axis (+ extra spacing for x axis label)\n    const categories = inputData.values.map((d) => d.x);\n    const barPadding = 0.2;\n\n    // x axis\n    const xScale = scaleBand()\n        .domain(categories)\n        .range([margin.left, graphWidth])\n        .padding(barPadding);\n\n    // render x axis\n    const xAxis = svg\n        .append(\"g\")\n        .attr(\"class\", \"axis-x\")\n        .attr(\"transform\", `translate(0,${graphHeight})`)\n        .call(axisBottom(xScale));\n\n    // render x axis label \n    xAxis\n        .append(\"text\")\n        .attr(\"x\", width / 2 + margin.left / 4) // magic numbers ¯\\_(ツ)_/¯\n        .attr(\"y\", 32)\n        .attr(\"text-anchor\", \"center\")\n        .attr(\"font-weight\", \"bold\")\n        .attr(\"fill\", \"currentColor\")\n        .text(inputData.xLabel);\n\n    // y axis\n    const [yMin, yMax] = inputData.values.reduce(\n        (values, point) => {\n            const { x, highlight, ...yValues } = point;\n            const min = Math.min(values[0], ...(Object.values(yValues) as number[]));\n            const max = Math.max(values[1], ...(Object.values(yValues) as number[]));\n            return [min, max];\n        },\n        [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER],\n    );\n\n    const yScale = scaleLinear().domain([yMin, yMax]).range([graphHeight, margin.top]).nice();\n\n    // render y axis\n    svg.append(\"g\")\n        .attr(\"class\", \"axis-y\")\n        .attr(\"transform\", `translate(${margin.left},0)`)\n        .call(axisLeft(yScale))\n        .call((group) =>\n            group // render y axis label\n                .select(\".tick:last-of-type text\")\n                .clone()\n                .attr(\"x\", 6)\n                .attr(\"text-anchor\", \"start\")\n                .attr(\"font-weight\", \"bold\")\n                .text(inputData.yLabel),\n        );\n\n    const numberOfSeries = inputData.series.filter((item) => item.id !== graphHighlightId).length;\n\n    // Render highlights\n    let highlights: HighlightType[];\n    const highlightSeries = inputData.series.find((item) => item.id === graphHighlightId);\n    if (highlightSeries) {\n        highlights = inputData.values.reduce<HighlightType[]>((list, value) => {\n            if (value.highlight) {\n                list.push({\n                    category: value.x,\n                    color: value.highlight === true ? highlightSeries.color : value.highlight,\n                });\n            }\n            return list;\n        }, []);\n        \n        // If there is more than one series, draw a highlight behind the bars\n        if (numberOfSeries > 1) {\n            const highlightGroup = svg.append(\"g\").attr(\"class\", \"highlight\");\n            const highlightPadding = barPadding * xScale.bandwidth() / 3;\n            highlights.forEach((highlight) => {\n                highlightGroup\n                    .append(\"rect\")\n                    .attr(\"fill\", highlight.color)\n                    .attr(\"x\", xScale(highlight.category)! - highlightPadding)\n                    .attr(\"y\", margin.top)\n                    .attr(\"width\", xScale.bandwidth() + highlightPadding * 2)\n                    .attr(\"height\", graphHeight - margin.top);\n                }\n            );\n        }\n    }\n\n    // Draw bars\n    const group = svg.append(\"g\").attr(\"class\", \"bargroup\");\n    const barWidth = xScale.bandwidth() / inputData.series.filter((item) => item.id !== graphHighlightId).length;\n    inputData.values.forEach((point) => {\n        const { x, highlight, ...yValues } = point;\n        Object.entries(yValues).forEach(([id, value], index) => {\n            const series = inputData.series.find((series) => series.id === id)!;\n\n            const xValue = xScale(x)! + barWidth * index;\n\n            // If there is only one series, highlight by changing the bar's color\n            let barColor: string;\n            const selectedCategory = highlights.find((item) => item.category === x);\n            if (numberOfSeries === 1 && selectedCategory) {\n                barColor = selectedCategory.color;\n            } else {\n                barColor = series?.color;\n            }\n\n            group\n                .append(\"rect\")\n                .attr(\"class\", `bar bar-${id}`)\n                .attr(\"fill\", barColor)\n                .attr(\"x\", xValue)\n                .attr(\"y\", yScale(value as number))\n                .attr(\"width\", barWidth)\n                .attr(\"height\", graphHeight - yScale(value as number));\n        });\n    });\n};\n","import React from \"react\";\nimport { ResultGraphType } from \"../../types/ResultTypes\";\nimport useGraphData from \"../../hooks/useGraphData\";\nimport { Loader } from \"../styles/Loader\";\nimport {\n    Title,\n    Card,\n    Legend,\n    LegendItem,\n    Wrapper,\n    LegendSwatch,\n    StatusWrapper,\n    GRAPH_LOADER_SIZE,\n} from \"../styles/Graph\";\nimport { Result } from \"../styles/Result\";\nimport Graph from \"../common/Graph\";\nimport Icon from \"../common/Icon\";\n\ntype PropsType = {\n    config: ResultGraphType;\n};\n\nconst GraphResult = (props: PropsType): JSX.Element => {\n    const { titleLabel, dataUrl, format, hideLegend } = props.config;\n    const { data, loading } = useGraphData(dataUrl);\n\n    return (\n        <Result>\n            <Card>\n                <Title>{titleLabel}</Title>\n                <StatusWrapper>\n                    {loading && <Loader size={GRAPH_LOADER_SIZE} />}\n                    {!loading && !data && <Icon type=\"error\" color=\"error\" size={65} />}\n                    {data && (\n                        <Wrapper width={hideLegend ? 1 : undefined}>\n                            <Graph type={format} data={data} />\n                            {!hideLegend && (\n                                <Legend>\n                                    {data.series.map((series) => (\n                                        <LegendItem key={series.id}>\n                                            <LegendSwatch color={series.color} />\n                                            <span>{series.name}</span>\n                                        </LegendItem>\n                                    ))}\n                                </Legend>\n                            )}\n                        </Wrapper>\n                    )}\n                </StatusWrapper>\n            </Card>\n        </Result>\n    );\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const GraphResultDoc = (props: ResultGraphType): null => props && null;\n\nexport default GraphResult;\n","import React, { useEffect, useState } from \"react\";\nimport { useRestartTimer } from \"../../hooks/timerHooks\";\nimport { useStoreDispatch, useStoreSelector } from \"../../redux/store\";\nimport { AnswerDataUrl, ResultButtonType } from \"../../types/ResultTypes\";\nimport { fetchAnswerData, replaceValues, resetFormDispatcher } from \"../../utils/utils\";\nimport Icon from \"../common/Icon\";\nimport { Button, CenteredButtonWrapper } from \"../styles/Button\";\nimport { Loader } from \"../styles/Loader\";\n\ntype PropsType = {\n    config: ResultButtonType;\n};\n\nconst ButtonResult = (props: PropsType): JSX.Element => {\n    const { config } = props;\n\n    const configId = useStoreSelector((state) => state.config.id);\n    const score = useStoreSelector((state) => state.result.score);\n    const answers = useStoreSelector((state) => state.answers.list);\n    const dispatch = useStoreDispatch();\n\n    const [loading, setLoading] = useState(false);\n    const [loaded, setLoaded] = useState(false);\n\n    const countdown = useRestartTimer();\n    const label = replaceValues(config.label, { countdown, score });\n    const hash = JSON.stringify(answers);\n\n    const onClick = async (): Promise<void> => {\n        const url = replaceValues(config.url, { score })!;\n        switch (config.function) {\n            case \"restart\":\n                resetFormDispatcher(dispatch);\n                break;\n            case \"postData\":\n                setLoading(true);\n                await fetchAnswerData(config.url as AnswerDataUrl, { configId, score, answers });\n                setLoading(false);\n                setLoaded(true);\n                break;\n            case \"link\":\n                if (config.openInTab) {\n                    window.open(url);\n                } else {\n                    window.location.href = url;\n                }\n                break;\n        }\n    };\n\n    useEffect(() => {\n        setLoading(false);\n        setLoaded(false);\n    }, [score, hash]);\n\n    return (\n        <CenteredButtonWrapper mb={4}>\n            {/* We only want to allow posting data once. So disable when loading and when loaded. */}\n            <Button onClick={onClick} disabled={loading || loaded} iconAlign=\"right\">\n                {label}\n                {loading && <Loader size={12} />}\n                {loaded && <Icon type=\"check\" />}\n            </Button>\n        </CenteredButtonWrapper>\n    );\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const ButtonResultDoc = (props: ResultButtonType): null => props && null;\n\nexport default ButtonResult;\n","import styled from \"styled-components\";\nimport { height, HeightProps } from \"styled-system\";\n\nexport const IFrame = styled.iframe<HeightProps>`\n    width: 100%;\n    border: none;\n    ${height}\n`;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { debounce } from \"lodash\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useStoreSelector } from \"../../redux/store\";\nimport { ResultIFrameType } from \"../../types/ResultTypes\";\nimport { replaceValues } from \"../../utils/utils\";\nimport { IFrame } from \"../styles/IFrame\";\nimport { Result } from \"../styles/Result\";\n\ntype PropsType = {\n    config: ResultIFrameType;\n};\n\nconst IFrameResult = (props: PropsType): JSX.Element => {\n    const { config } = props;\n    const score = useStoreSelector((state) => state.result.score);\n    const scoreUrl = replaceValues(config.url, { score })!;\n\n    // use a debounced callback to avoid constantly reloading the iframe when changing a submitted result\n    const [debouncedUrl, setDebouncedUrl] = useState(scoreUrl);\n    const debouncedSetter = useCallback(\n        debounce((url: string) => setDebouncedUrl(url), 500),\n        [],\n    );\n    useEffect(() => {\n        debouncedSetter(scoreUrl);\n    }, [scoreUrl, debouncedSetter]);\n\n    return useMemo(\n        () => (\n            <Result>\n                <IFrame\n                    title=\"Results\"\n                    src={debouncedUrl}\n                    height={config.height || 400}\n                    scrolling={config.disableScroll ? \"no\" : undefined}\n                />\n            </Result>\n        ),\n        [debouncedUrl, config],\n    );\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const IFrameResultDoc = (props: ResultIFrameType): null => props && null;\n\nexport default IFrameResult;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { debounce } from \"lodash\";\nimport React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { useStoreSelector } from \"../../redux/store\";\nimport { ResultImageType } from \"../../types/ResultTypes\";\nimport { replaceValues } from \"../../utils/utils\";\nimport { Image } from \"../styles/Image\";\nimport { Result } from \"../styles/Result\";\n\ntype PropsType = {\n    config: ResultImageType;\n};\n\nconst ImageResult = (props: PropsType): JSX.Element => {\n    const { config } = props;\n    const score = useStoreSelector((state) => state.result.score);\n    const scoreUrl = replaceValues(config.url, { score })!;\n\n    // use a debounced callback to avoid constantly reloading the iframe when changing a submitted result\n    const [debouncedUrl, setDebouncedUrl] = useState(scoreUrl);\n    const debouncedSetter = useCallback(\n        debounce((url: string) => setDebouncedUrl(url), 500),\n        [],\n    );\n    useEffect(() => {\n        debouncedSetter(scoreUrl);\n    }, [scoreUrl, debouncedSetter]);\n\n    return useMemo(\n        () => (\n            <Result>\n                <Image src={debouncedUrl} widthPercentage={config.size} alt={config.alt} />\n            </Result>\n        ),\n        [debouncedUrl, config],\n    );\n};\n\n// A quick way to get the doc-gen function of Storybook working correctly\nexport const ImageResultDoc = (props: ResultImageType): null => props && null;\n\nexport default ImageResult;\n","import React, { useRef, useEffect, useMemo } from \"react\";\nimport { useStoreSelector } from \"../redux/store\";\nimport { AllResultContentType, resultContentTypes } from \"../types/ResultTypes\";\nimport { useInitResetTimer } from \"../hooks/timerHooks\";\nimport { Container } from \"./styles/Container\";\nimport LabelResult from \"./result/LabelResult\";\nimport GraphResult from \"./result/GraphResult\";\nimport ButtonResult from \"./result/ButtonResult\";\nimport IFrameResult from \"./result/IFrameResult\";\nimport ImageResult from \"./result/ImageResult\";\n\nconst determineComponent = (block: AllResultContentType, index: number): JSX.Element => {\n    switch (block.type) {\n        case resultContentTypes.label:\n            return <LabelResult key={index} config={block} />;\n        case resultContentTypes.button:\n            return <ButtonResult key={index} config={block} />;\n        case resultContentTypes.image:\n            return <ImageResult key={index} config={block} />;\n        case resultContentTypes.graph:\n            return <GraphResult key={index} config={block} />;\n        case resultContentTypes.iframe:\n            return <IFrameResult key={index} config={block} />;\n    }\n};\n\nconst ResultList = (): JSX.Element | null => {\n    const showResult = useStoreSelector((state) => state.result.showResult);\n    const content = useStoreSelector((state) => state.config.result.content);\n    const score = useStoreSelector((state) => state.result.score);\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    useInitResetTimer();\n\n    // Scroll to results when it becomes visible\n    useEffect(() => {\n        if (containerRef.current) {\n            containerRef.current.scrollIntoView({ behavior: \"smooth\" });\n        }\n    }, []);\n\n    // We need to wrap this in useMemo because the useInitResetTimer will otherwise trigger a re-render every second\n    return useMemo(() => {\n        if (!showResult || !content || !content.length) return null;\n        return (\n            <Container ref={containerRef} pb={4} maxBreakpoint=\"lg\">\n                {content\n                    .filter(\n                        (block) =>\n                            !block.visibleScoreDomain ||\n                            (block.visibleScoreDomain[0] <= score && score <= block.visibleScoreDomain[1]),\n                    )\n                    .map(determineComponent)}\n            </Container>\n        );\n    }, [showResult, content, score]);\n};\n\nexport default ResultList;\n","import styled from \"styled-components\";\nimport { messageTypes } from \"../../types/MessageTypes\";\nimport { ColorType, getElevation } from \"../../utils/theme\";\n\n// ----------------------------------------------------------------------\n// Constants\n// ----------------------------------------------------------------------\n\nconst MESSAGE_WIDTH = 450;\n\nconst backgroundColor: Record<messageTypes, ColorType> = {\n    [messageTypes.error]: \"messageError\",\n    [messageTypes.info]: \"messageInfo\",\n    [messageTypes.neutral]: \"messageNeutral\",\n};\n\nconst borderColor: Record<messageTypes, ColorType> = {\n    [messageTypes.error]: \"messageErrorBorder\",\n    [messageTypes.info]: \"messageInfoBorder\",\n    [messageTypes.neutral]: \"messageNeutralBorder\",\n};\n\nexport const textColor: Record<messageTypes, ColorType> = {\n    [messageTypes.error]: \"onMessageError\",\n    [messageTypes.info]: \"onMessageInfo\",\n    [messageTypes.neutral]: \"onMessageNeutral\",\n};\n\n// ----------------------------------------------------------------------\n// Styles\n// ----------------------------------------------------------------------\n\nexport const Wrapper = styled.div`\n    position: fixed;\n    right: 0;\n    bottom: 0;\n    z-index: ${({ theme }) => theme.zIndex.messages};\n    padding: ${({ theme }) => theme.space[3]}px;\n    max-width: ${MESSAGE_WIDTH}px;\n    min-width: 50px;\n`;\n\nexport const Message = styled.div<{ type: messageTypes; show: boolean }>`\n    position: relative;\n    right: ${({ theme, show }) => (show ? 0 : -MESSAGE_WIDTH - theme.space[3])}px;\n    margin: ${({ theme }) => theme.space[3]}px ${({ theme }) => theme.space[2]}px;\n    padding: ${({ theme }) => theme.space[3]}px;\n    padding-right: ${({ theme }) => theme.space[4]}px;\n    background-color: ${({ theme, type }) => theme.colors[backgroundColor[type]]};\n    border: 1px solid ${({ theme, type }) => theme.colors[borderColor[type]]};\n    border-radius: ${({ theme }) => theme.sizes.radius};\n    color: ${({ theme, type }) => theme.colors[textColor[type]]};\n    box-shadow: ${({ theme }) => getElevation(theme.elevation.message)};\n    transition: right 0.3s;\n`;\n\nexport const Title = styled.div`\n    font-weight: bold;\n`;\n\nexport const Description = styled.div`\n    font-size: 0.9em;\n`;\n\nexport const DismissLabel = styled.div`\n    font-size: 0.8em;\n    text-align: center;\n    cursor: pointer;\n    margin: ${({ theme }) => -theme.space[2]}px 0;\n`;\n\nexport const CloseButton = styled.div`\n    position: absolute;\n    top: ${({ theme }) => theme.space[2]}px;\n    right: ${({ theme }) => theme.space[2]}px;\n    cursor: pointer;\n`;\n","import React from \"react\";\nimport { Transition, TransitionGroup } from \"react-transition-group\";\nimport useLabel from \"../hooks/useLabel\";\nimport { useStoreDispatch, useStoreSelector } from \"../redux/store\";\nimport { messageTypes } from \"../types/MessageTypes\";\nimport { clearMessages, removeMessage } from \"../redux/actions/messagesActions\";\nimport Icon from \"./common/Icon\";\nimport { CloseButton, Description, Message, Title, Wrapper, DismissLabel, textColor } from \"./styles/Message\";\n\nconst MessagesList = (): JSX.Element | null => {\n    const messages = useStoreSelector((state) => state.messages.list);\n    const dispatch = useStoreDispatch();\n    const dismissLabel = useLabel(\"messageDismissAll\");\n\n    return (\n        <Wrapper>\n            {/* Messages list */}\n            <TransitionGroup>\n                {messages.map((message) => (\n                    <Transition key={message.id} timeout={200}>\n                        {(state) => (\n                            <Message type={message.type} show={state === \"entered\"}>\n                                <CloseButton onClick={() => dispatch(removeMessage(message.id))}>\n                                    <Icon type=\"closeCircle\" color={textColor[message.type]} />\n                                </CloseButton>\n                                {message.title && <Title>{message.title}</Title>}\n                                <Description>{message.description}</Description>\n                            </Message>\n                        )}\n                    </Transition>\n                ))}\n            </TransitionGroup>\n\n            {/* Clear all button */}\n            <Transition in={messages.length > 1} timeout={200}>\n                {(state) =>\n                    state !== \"exited\" && (\n                        <Message\n                            show={state === \"entered\"}\n                            type={messageTypes.neutral}\n                            onClick={() => dispatch(clearMessages())}\n                        >\n                            <DismissLabel>{dismissLabel}</DismissLabel>\n                        </Message>\n                    )\n                }\n            </Transition>\n        </Wrapper>\n    );\n};\n\nexport default MessagesList;\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */ // We actually want to use Typescript inferring\nimport { ConfigType } from \"../../types/ConfigTypes\";\n\nexport const initConfig = (config: ConfigType) => ({\n    type: \"CONFIG_INIT\" as const,\n    config,\n});\n\nexport const toggleBaseTheme = (enabled: boolean) => ({\n    type: \"CONFIG_TOGGLE_THEME\" as const,\n    enabled,\n});\n\nexport type ConfigActions = ReturnType<typeof initConfig> | ReturnType<typeof toggleBaseTheme>;\n","import React from \"react\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport { useStoreDispatch, useStoreSelector } from \"../redux/store\";\nimport { messageTypes } from \"../types/MessageTypes\";\nimport { isDev } from \"../utils/utils\";\nimport { initConfig, toggleBaseTheme } from \"../redux/actions/configActions\";\nimport { addMessages } from \"../redux/actions/messagesActions\";\nimport Checkbox from \"./common/Checkbox\";\nimport { Button } from \"./styles/Button\";\n\n// ----------------------------------------------------------------------\n// Constants\n// ----------------------------------------------------------------------\n\nconst mockMessages = [\n    {\n        description: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Erat enim Polemonis.\",\n        type: messageTypes.info,\n        timestamp: 0,\n    },\n    {\n        title: \"Something went wrong\",\n        description:\n            \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Erat enim Polemonis. Iam contemni non poteris. Equidem etiam Epicurum, in physicis quidem, Democriteum puto. An quod ita callida est, ut optime possit architectari voluptates? Iam quae corporis sunt, ea nec auctoritatem cum animi partibus, comparandam et cognitionem habent faciliorem.\",\n        type: messageTypes.error,\n        timestamp: 0,\n    },\n];\n\n// ----------------------------------------------------------------------\n// Styles\n// ----------------------------------------------------------------------\n\nexport const GlobalDebugStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    color: ${({ theme }) => theme.colors.onBack};\n    background-color: ${({ theme }) => theme.colors.back};\n    font-family: \"Segoe UI\", \"Roboto\", \"Helvetica Neue\", sans-serif;\n  }\n`;\n\nconst Wrapper = styled.div`\n    position: fixed;\n    top: 0;\n    right: ${({ theme }) => theme.space[3]}px;\n    z-index: ${({ theme }) => theme.zIndex.debug};\n    display: flex;\n    flex-direction: column;\n    align-items: flex-end;\n\n    & > * {\n        margin-top: ${({ theme }) => theme.space[3]}px;\n    }\n`;\n\n// ----------------------------------------------------------------------\n// Component\n// ----------------------------------------------------------------------\n\nconst DebugPanel = (): JSX.Element | null => {\n    const dispatch = useStoreDispatch();\n    const config = useStoreSelector((state) => state.config);\n\n    if (!isDev(true)) return null;\n    return (\n        <>\n            <GlobalDebugStyle />\n            <Wrapper>\n                <Checkbox\n                    checked={config.theme?.darkMode}\n                    onClick={() => dispatch(toggleBaseTheme(!config.theme?.darkMode))}\n                >\n                    Dark mode\n                </Checkbox>\n                <Button onClick={() => dispatch(addMessages(mockMessages))}>Add messages</Button>\n                <Button\n                    onClick={() =>\n                        dispatch(\n                            initConfig({\n                                ...config,\n                                result: { ...config.result, enableControls: !config.result.enableControls },\n                            }),\n                        )\n                    }\n                >\n                    Toggle editable\n                </Button>\n            </Wrapper>\n        </>\n    );\n};\n\nexport default DebugPanel;\n","import React from \"react\";\nimport useLabel from \"../hooks/useLabel\";\nimport { useStoreSelector } from \"../redux/store\";\nimport { formatTimestamp } from \"../utils/utils\";\nimport { Footer as FooterStyle } from \"./styles/Container\";\n\nconst Footer = (): JSX.Element | null => {\n    const lastAnsweredTimestamp = useStoreSelector((state) => state.answers.lastUpdate);\n    const showAnsweredTimetamp = useStoreSelector((state) => state.answers.loadedFromStorage);\n    const dateLocaleId = useLabel(\"dateLocaleId\");\n    const footerLabel = useLabel(\"footerText\", {\n        date: formatTimestamp(lastAnsweredTimestamp, dateLocaleId),\n    });\n\n    if (!showAnsweredTimetamp || !footerLabel) return null;\n    return <FooterStyle>{footerLabel}</FooterStyle>;\n};\n\nexport default Footer;\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { merge } from \"lodash\";\nimport { useStoreSelector } from \"../redux/store\";\nimport { getInitializedSelector } from \"../utils/utils\";\nimport { defaultThemes } from \"../utils/theme\";\nimport QuestionGroupList from \"./QuestionGroupList\";\nimport ResultList from \"./ResultList\";\nimport MessagesList from \"./MessagesList\";\nimport DebugPanel from \"./DebugPanel\";\nimport Footer from \"./Footer\";\n\nconst BaseStyle = styled.div`\n    font-family: ${({ theme }) => theme.fonts.text};\n`;\n\nconst App = (): JSX.Element | null => {\n    const initialized = useStoreSelector(getInitializedSelector);\n    const theme = useStoreSelector((state) => state.config.theme);\n    const overriddenTheme = merge(theme?.darkMode ? defaultThemes.darkTheme : defaultThemes.lightTheme, theme?.values);\n\n    if (!initialized) return null;\n    return (\n        <ThemeProvider theme={overriddenTheme}>\n            <BaseStyle>\n                <DebugPanel />\n                <MessagesList />\n                <QuestionGroupList />\n                <ResultList />\n                <Footer />\n            </BaseStyle>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { ConfigType } from \"../types/ConfigTypes\";\nimport { ExternalMessageType } from \"../types/MessageTypes\";\nimport { questionTypes } from \"../types/QuestionTypes\";\nimport { AnswerDataUrl, resultContentTypes } from \"../types/ResultTypes\";\n\nexport const mockConfig: Partial<ConfigType> = {\n    id: \"mock\",\n    groups: [\n        {\n            title: \"Questions\",\n            description:\n                \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Erat enim Polemonis. Iam contemni non poteris.\\nEquidem etiam Epicurum, in physicis quidem, Democriteum puto. An quod ita callida est, ut optime possit architectari voluptates? Iam quae corporis sunt, ea nec auctoritatem cum animi partibus.\",\n            accentColor: \"#db3f37\",\n            questions: [\n                {\n                    id: \"interested\",\n                    type: questionTypes.single,\n                    title: \"Are you interested{hint} in eating an ice cream?{hint}\",\n                    hints: [\"It's a word\", \"Say yes!\"],\n                },\n                {\n                    id: \"flavour\",\n                    type: questionTypes.multiple,\n                    title: \"What flavour do you want?\",\n                    inputType: \"radio\",\n                    options: [\n                        { id: \"0\", title: \"Vanilla\" },\n                        { id: \"1\", title: \"Banana\" },\n                        {\n                            id: \"2\",\n                            title: \"Ben & Jerry's{hint} Imagine Whirled Peace{hint}\",\n                            hints: [\"(TM)\", \"Yes this is a real flavour.\"],\n                        },\n                        { id: \"3\", title: \"Chocolat\" },\n                    ],\n                    required: true,\n                    image: {\n                        url: \"https://via.placeholder.com/350x65\",\n                        alt: \"Placeholder 1\",\n                        alignment: \"left\",\n                    },\n                },\n                {\n                    id: \"flavour-shared\",\n                    type: questionTypes.text,\n                    inputType: \"number\",\n                    title: \"How many other people would you estimate that share your favourite flavour?\",\n                    required: true,\n                },\n                {\n                    id: \"amount\",\n                    type: questionTypes.range,\n                    title: \"How many do you want?\",\n                    inputType: \"slider\",\n                    min: 0,\n                    max: 10,\n                    required: true,\n                    tickLabels: [\"Min\", \"\", \"Two\"],\n                    image: {\n                        url: \"https://via.placeholder.com/350x65\",\n                        size: 0.3,\n                        alt: \"Placeholder 2\",\n                    },\n                },\n            ],\n        },\n        {\n            accentColor: \"#1E88E5\",\n            description:\n                \"Lorem <strong>ipsum dolor sit amet</strong>, consectetur adipiscing elit. Erat enim Polemonis. Iam contemni non poteris.\\nEquidem etiam Epicurum, in physicis quidem, Democriteum puto. An quod ita callida est, ut optime possit architectari voluptates? Iam quae corporis sunt, ea nec auctoritatem cum animi partibus.\",\n            image: {\n                url: \"https://via.placeholder.com/200x200\",\n                alt: \"Placeholder 3\",\n                alignment: \"right\",\n            },\n            questions: [\n                {\n                    id: \"mailaddress\",\n                    type: questionTypes.text,\n                    inputType: \"email\",\n                    placeholder: \"ben@jerry.com\",\n                    title: \"On which address do you want to receive your digital{hint} ice cream?\",\n                    hints: [\"Do not worry it won't melt.\"],\n                },\n                {\n                    id: \"location\",\n                    type: questionTypes.multiple,\n                    title: \"Where do you live?\",\n                    inputType: \"select\",\n                    options: [\n                        { id: \"0\", title: \"US{hint}\", hints: [\"United States\"] },\n                        { id: \"1\", title: \"Somewhere else\" },\n                    ],\n                    calcFunction: (question: any, answer: any) => {\n                        return answer.values.includes(\"0\") ? -99 : 0;\n                    },\n                },\n                {\n                    id: \"toppings\",\n                    type: questionTypes.multiple,\n                    title: \"Which toppings do you want?\",\n                    inputType: \"check\",\n                    options: [\n                        { id: \"0\", title: \"Sprinkels\" },\n                        { id: \"1\", title: \"Crumbs\" },\n                        { id: \"2\", title: \"Chocolat sauce\" },\n                    ],\n                    defaultIds: [\"1\", \"2\"],\n                },\n                {\n                    id: \"name\",\n                    type: questionTypes.text,\n                    inputType: \"text\",\n                    title: \"How do you want to name your creation?\",\n                    // customValidation: {\n                    //     regex: \"^.{0,10}$\",\n                    //     error: \"Names longer than 10 characters are not allowed\",\n                    // },\n                    image: {\n                        url: \"https://via.placeholder.com/350x65\",\n                        alignment: \"right\",\n                        alt: \"Placeholder 3\",\n                    },\n                    calcFunction: (question: any, answer: any) => {\n                        return answer.value.length;\n                    },\n                    rowCount: 5,\n                },\n                {\n                    id: \"rating-order\",\n                    type: questionTypes.single,\n                    title: \"Did you like this order flow?\",\n                    checkedByDefault: true,\n                    required: true,\n                    image: {\n                        url: \"https://via.placeholder.com/350x65\",\n                        alignment: \"center\",\n                        size: 0.6,\n                        alt: \"Placeholder 4\",\n                    },\n                },\n                {\n                    id: \"rating-product\",\n                    type: questionTypes.range,\n                    title: \"How much did you like it?\",\n                    inputType: \"radio\",\n                    min: 2,\n                    step: 2,\n                    max: 8,\n                    default: 4,\n                    direction: \"decrease\",\n                    calcFunction: (question: any, answer: any): number =>\n                        (answer.value / (question.max - question.min)) * 100,\n                },\n            ],\n        },\n        {\n            title: \"Table questions\",\n            tabledView: true,\n            tableInputHeadings: [\"Very bad\", \"Bad\", \"Neutral\", \"Good\", \"Very good\"],\n            questions: [\n                {\n                    id: \"Table1\",\n                    type: questionTypes.range,\n                    title: \"Question 1Question 1Question 1Question 1\",\n                    inputType: \"radio\",\n                    min: 0,\n                    max: 4,\n                },\n                {\n                    id: \"Table2\",\n                    type: questionTypes.range,\n                    title: \"Question 2\",\n                    inputType: \"radio\",\n                    min: 0,\n                    max: 4,\n                },\n                {\n                    id: \"Table3\",\n                    type: questionTypes.range,\n                    title: \"Question 3\",\n                    inputType: \"radio\",\n                    min: 0,\n                    max: 4,\n                },\n                {\n                    id: \"Table4\",\n                    type: questionTypes.range,\n                    title: \"Question 4\",\n                    inputType: \"radio\",\n                    min: 0,\n                    max: 4,\n                },\n                {\n                    id: \"Table5\",\n                    type: questionTypes.range,\n                    title: \"Question 5\",\n                    inputType: \"slider\",\n                    min: 0,\n                    max: 4,\n                    tickCount: 5,\n                },\n                {\n                    id: \"interested2\",\n                    type: questionTypes.single,\n                    title: \"Are you interested{hint} in eating an ice cream?{hint}\",\n                    hints: [\"It's a word\", \"Say yes!\"],\n                },\n                {\n                    id: \"flavour2\",\n                    type: questionTypes.multiple,\n                    title: \"What flavour do you want?\",\n                    inputType: \"radio\",\n                    options: [\n                        { id: \"0\", title: \"Vanilla\" },\n                        { id: \"1\", title: \"Banana\" },\n                        {\n                            id: \"2\",\n                            title: \"Ben & Jerry's{hint} Imagine Whirled Peace{hint}\",\n                            hints: [\"(TM)\", \"Yes this is a real flavour.\"],\n                        },\n                        { id: \"3\", title: \"Chocolat\" },\n                    ],\n                    required: true,\n                    image: {\n                        url: \"https://via.placeholder.com/350x65\",\n                        alt: \"Placeholder 1\",\n                        alignment: \"left\",\n                    },\n                },\n                {\n                    id: \"flavour-shared2\",\n                    type: questionTypes.text,\n                    inputType: \"number\",\n                    title: \"How many other people would you estimate that share your favourite flavour?\",\n                    required: true,\n                },\n            ],\n        },\n    ],\n    result: {\n        scoreDomain: [0, 150],\n        postDataUrl: \"POST;https://example.org/api/answer\" as AnswerDataUrl,\n        restartTimeout: 1000,\n        content: [\n            { type: resultContentTypes.label, style: \"title\", label: \"Thanks for your {score10}/10 submission.\" },\n            {\n                type: resultContentTypes.button,\n                label: \"Your score is {score}\",\n                function: \"link\",\n                url: \"https://example.org/?score={score}\" as AnswerDataUrl,\n            },\n            {\n                type: resultContentTypes.label,\n                style: \"description\",\n                label:\n                    \"Lorem {score5}/5 ipsum dolor sit amet ({score}) consectetur adipiscing elit. {score20} out of 20 Erat enim Polemonis. Iam contemni non poteris. Equidem etiam Epicurum, in physicis quidem, Democriteum puto. An quod ita callida est, ut optime possit architectari voluptates? Iam quae corporis sunt, ea nec auctoritatem cum animi partibus, comparandam et cognitionem habent faciliorem. Duo Reges: constructio interrete. Sine ea igitur iucunde negat posse se vivere? Cur tantas regiones barbarorum pedibus obiit, tot maria transmisit? Bonum incolumis acies: misera caecitas. Cur tantas regiones barbarorum pedibus obiit, tot maria transmisit?\",\n            },\n            {\n                type: resultContentTypes.label,\n                style: \"scoreCounter270\",\n                label: \"{score100}%\",\n                animate: true,\n                visibleScoreDomain: [75, Number.MAX_SAFE_INTEGER],\n            },\n            {\n                type: resultContentTypes.label,\n                style: \"scoreCounter180\",\n                label: \"{score100}%\",\n                animate: true,\n                visibleScoreDomain: [Number.MIN_SAFE_INTEGER, 75],\n            },\n            {\n                type: resultContentTypes.image,\n                url: \"https://via.placeholder.com/350x65\",\n                size: 0.7,\n                alt: \"Placeholder 1\",\n            },\n            {\n                type: resultContentTypes.graph,\n                dataUrl: \"GET;/surveytool/mockLineGraph.json?score={score}\" as AnswerDataUrl,\n                format: \"line\",\n                titleLabel: \"Line graph\",\n            },\n            {\n                type: resultContentTypes.graph,\n                dataUrl: \"/surveytool/mockBarGraph.json\" as AnswerDataUrl,\n                format: \"bar\",\n                titleLabel: \"Bar graph\",\n            },\n            {\n                type: resultContentTypes.graph,\n                dataUrl: \"/surveytool/mockSingleBarGraph.json\" as AnswerDataUrl,\n                format: \"bar\",\n                titleLabel: \"Bar graph\",\n                hideLegend: true,\n            },\n            { type: resultContentTypes.button, label: \"Restart ({countdown})\", function: \"restart\" },\n            {\n                type: resultContentTypes.button,\n                label: \"Save results\",\n                function: \"postData\",\n                url: \"POST;https://example.org/api/answer\" as AnswerDataUrl,\n            },\n            {\n                type: resultContentTypes.button,\n                label: \"Open results in new tab\",\n                function: \"link\",\n                url: \"https://example.org/?score={score}\" as AnswerDataUrl,\n                openInTab: true,\n            },\n            {\n                type: resultContentTypes.button,\n                label: \"Navigate to result page\",\n                function: \"link\",\n                url: \"https://example.org/?score={score}\" as AnswerDataUrl,\n            },\n            {\n                type: resultContentTypes.iframe,\n                url: \"https://example.org/?score={score}\" as AnswerDataUrl,\n                height: 300,\n                disableScroll: true,\n            },\n            {\n                type: resultContentTypes.label,\n                style: \"description\",\n                label: \"The survey will restart in {countdown} seconds.\",\n            },\n        ],\n    },\n    settings: {\n        customMessageHandler: (messages: ExternalMessageType[]): boolean => {\n            // eslint-disable-next-line no-console\n            messages.forEach(console.info);\n            return true;\n        },\n    },\n    // theme: {\n    //     darkMode: true,\n    //     values: {\n    //         colors: { controlHighlight: \"#ff00ff\" },\n    //         sizes: { radius: \"0px\" },\n    //         fonts: { title: \"Serif\", description: \"fantasy\", question: \"cursive\", text: \"sans-serif\" },\n    //         breakpoints: { md: \"600px\" },\n    //     },\n    // },\n    // labels: { footerText: \"Copyright\" },\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider as StoreProvider } from \"react-redux\";\nimport App from \"./components/App\";\nimport createNewStore, { StoreType } from \"./redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { ConfigType } from \"./types/ConfigTypes\";\nimport { initConfig } from \"./redux/actions/configActions\";\nimport { mockConfig } from \"./utils/mockConfig\";\nimport { isDev } from \"./utils/utils\";\nimport { resetAnswers } from \"./redux/actions/answersActions\";\nimport { AllAnswersType } from \"./types/AnswerTypes\";\n\n// Prevent rerenders from Providers\nconst MemoWrapper = React.memo(({ children }: { children: React.ReactNode }) => <>{children}</>);\n\nexport class SurveyTool {\n    private _store: StoreType;\n\n    constructor(selector: string, config?: ConfigType) {\n        this._store = createNewStore();\n        if (config) this.updateConfig(config);\n\n        ReactDOM.render(\n            <React.StrictMode>\n                <StoreProvider store={this._store}>\n                    <MemoWrapper>\n                        <App />\n                    </MemoWrapper>\n                </StoreProvider>\n            </React.StrictMode>,\n            document.querySelector(selector),\n        );\n    }\n\n    /**\n     * Update the active config\n     * @returns boolean indicating a valid config\n     */\n    updateConfig(config: ConfigType): boolean {\n        if (config.groups && config.groups.length > 0) {\n            this._store.dispatch(initConfig(config));\n        } else {\n            console.error(\"Supplied data is not a valid config\", config);\n            return false;\n        }\n        return true;\n    }\n\n    resetAnswers(): void {\n        this._store.dispatch(resetAnswers());\n    }\n\n    get answers(): AllAnswersType[] {\n        return this._store.getState().answers.list;\n    }\n\n    get config(): ConfigType {\n        return this._store.getState().config;\n    }\n}\n\n// Make this class accessible on window\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n(window as any).SurveyTool = SurveyTool;\n\n// Init the tool with mockconfig when developing or running demo\nif (isDev(true)) {\n    const tool = new SurveyTool(\"#surveyTool\");\n    tool.updateConfig(mockConfig as ConfigType);\n    (window as any).tool = tool;\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}